// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_ImageCache
#include <ImageCache.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Startup
#include <Startup.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_config_CacheSettings
#include <config/CacheSettings.h>
#endif
#ifndef INCLUDED_config_Config
#include <config/Config.h>
#endif
#ifndef INCLUDED_config_KeyBinds
#include <config/KeyBinds.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_GraphicTransTileDiamond
#include <flixel/addons/transition/GraphicTransTileDiamond.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_title_TitleVideo
#include <title/TitleVideo.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_21_new,"Startup","new",0x8ae2528f,"Startup.new","Startup.hx",21,0x27a773c1)
static const ::String _hx_array_data_026c5f1d_1[] = {
	HX_("logoBumpin",26,cb,02,ab),HX_("titleBG",5d,e5,5d,e5),HX_("gfDanceTitle",64,64,d2,7b),HX_("titleEnter",60,80,6b,82),HX_("stageback",e5,7b,3b,06),HX_("stagefront",2b,fd,b0,c6),HX_("stagecurtains",df,ec,1a,4b),HX_("halloween_bg",77,a6,29,9b),HX_("philly/sky",3a,d3,d5,cc),HX_("philly/city",32,0d,ae,63),HX_("philly/behindTrain",07,a4,6d,d4),HX_("philly/train",61,ce,51,a4),HX_("philly/street",4a,23,ee,ee),HX_("philly/win0",1b,4c,e6,70),HX_("philly/win1",1c,4c,e6,70),HX_("philly/win2",1d,4c,e6,70),HX_("philly/win3",1e,4c,e6,70),HX_("philly/win4",1f,4c,e6,70),HX_("limo/bgLimo",b4,c7,45,2c),HX_("limo/fastCarLol",c1,b0,ed,94),HX_("limo/limoDancer",8e,b6,e5,ea),HX_("limo/limoDrive",3b,67,64,e6),HX_("limo/limoSunset",45,de,4f,6e),HX_("christmas/bgWalls",57,9f,1b,51),HX_("christmas/upperBop",2e,2f,6d,ac),HX_("christmas/bgEscalator",64,1f,c0,d5),HX_("christmas/christmasTree",73,57,6d,7b),HX_("christmas/bottomBop",cb,69,c5,59),HX_("christmas/fgSnow",91,40,e7,37),HX_("christmas/santa",00,86,f4,2d),HX_("christmas/evilBG",86,9d,17,83),HX_("christmas/evilTree",7f,5b,65,3a),HX_("christmas/evilSnow",a4,24,b9,39),HX_("weeb/weebSky",52,34,cf,a4),HX_("weeb/weebSchool",a3,21,c0,f5),HX_("weeb/weebStreet",32,81,24,c6),HX_("weeb/weebTreesBack",4d,ac,bd,40),HX_("weeb/weebTrees",06,ab,3a,76),HX_("weeb/petals",8d,ca,2b,c2),HX_("weeb/bgFreaks",d9,71,bd,0f),HX_("weeb/animatedEvilSchool",8f,dd,53,cd),
};
static const ::String _hx_array_data_026c5f1d_2[] = {
	HX_("BOYFRIEND",4a,99,10,e2),HX_("bfCar",b0,c8,e3,b0),HX_("christmas/bfChristmas",d1,87,5c,b1),HX_("weeb/bfPixel",be,30,3a,8f),HX_("weeb/bfPixelsDEAD",19,2b,e2,7b),HX_("GF_assets",e3,ad,39,df),HX_("gfCar",35,af,e4,91),HX_("christmas/gfChristmas",16,a0,b4,35),HX_("weeb/gfPixel",83,82,25,5f),HX_("DADDY_DEAREST",b1,a3,05,5d),HX_("spooky_kids_assets",81,c1,f5,ce),HX_("Monster_Assets",88,25,46,b3),HX_("Pico_FNF_assetss",95,ca,e1,39),HX_("Mom_Assets",f7,fa,9b,96),HX_("momCar",09,26,a0,c6),HX_("christmas/mom_dad_christmas_assets",b9,c9,6d,11),HX_("christmas/monsterChristmas",75,74,b6,a6),HX_("weeb/senpai",20,f0,51,f1),HX_("weeb/spirit",15,cc,6d,43),HX_("weeb/senpaiCrazy",d1,d1,90,fa),
};
static const ::String _hx_array_data_026c5f1d_3[] = {
	HX_("Tutorial",be,4b,67,5c),HX_("Bopeebo",90,29,16,da),HX_("Fresh",4e,f6,b3,99),HX_("Dadbattle",9f,4a,7c,48),HX_("Spookeez",2c,36,dd,4e),HX_("South",ed,01,fa,13),HX_("Monster",fa,7b,01,86),HX_("Pico",05,15,31,35),HX_("Philly",48,eb,f2,23),HX_("Blammed",76,2a,51,09),HX_("Satin-Panties",be,dc,41,e6),HX_("High",82,63,e7,2f),HX_("Milf",f6,78,35,33),HX_("Cocoa",e9,0c,83,dd),HX_("Eggnog",81,78,4e,29),HX_("Winter-Horrorland",9d,fd,2a,b7),HX_("Senpai",5c,53,22,a0),HX_("Roses",e4,db,91,80),HX_("Thorns",bc,33,5c,c1),
};
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_130_create,"Startup","create",0x8b0f2c2d,"Startup.create","Startup.hx",130,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_63_create,"Startup","create",0x8b0f2c2d,"Startup.create","Startup.hx",63,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_138_update,"Startup","update",0x96054b3a,"Startup.update","Startup.hx",138,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_167_update,"Startup","update",0x96054b3a,"Startup.update","Startup.hx",167,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_182_preload,"Startup","preload",0x46100d78,"Startup.preload","Startup.hx",182,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_189_preload,"Startup","preload",0x46100d78,"Startup.preload","Startup.hx",189,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_195_preload,"Startup","preload",0x46100d78,"Startup.preload","Startup.hx",195,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_201_preload,"Startup","preload",0x46100d78,"Startup.preload","Startup.hx",201,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_207_preloadMusic,"Startup","preloadMusic",0x01fc600d,"Startup.preloadMusic","Startup.hx",207,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_218_preloadCharacters,"Startup","preloadCharacters",0x7a43f042,"Startup.preloadCharacters","Startup.hx",218,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_227_preloadGraphics,"Startup","preloadGraphics",0xe5a7fa63,"Startup.preloadGraphics","Startup.hx",227,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_236_openPreloadSettings,"Startup","openPreloadSettings",0x68a6d951,"Startup.openPreloadSettings","Startup.hx",236,0x27a773c1)
HX_LOCAL_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_60_boot,"Startup","boot",0xf33eeb23,"Startup.boot","Startup.hx",60,0x27a773c1)

void Startup_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_21_new)
HXLINE(  58)		this->cacheStart = false;
HXLINE(  48)		this->graphics = ::Array_obj< ::String >::fromData( _hx_array_data_026c5f1d_1,41);
HXLINE(  40)		this->characters = ::Array_obj< ::String >::fromData( _hx_array_data_026c5f1d_2,20);
HXLINE(  29)		this->songs = ::Array_obj< ::String >::fromData( _hx_array_data_026c5f1d_3,19);
HXLINE(  21)		super::__construct(MaxSize);
            	}

Dynamic Startup_obj::__CreateEmpty() { return new Startup_obj; }

void *Startup_obj::_hx_vtable = 0;

Dynamic Startup_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Startup_obj > _hx_result = new Startup_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Startup_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x19d07db1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19d07db1;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void Startup_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_130_create)
HXLINE( 130)			::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("splashSound",e8,05,b0,05)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_63_create)
HXLINE(  65)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  66)		::flixel::FlxG_obj::sound->muteKeys = null();
HXLINE(  68)		::flixel::FlxG_obj::save->bind(HX_("data",2a,56,63,42),null());
HXLINE(  69)		::Highscore_obj::load();
HXLINE(  70)		::config::KeyBinds_obj::keyCheck();
HXLINE(  71)		::PlayerSettings_obj::init();
HXLINE(  73)		::PlayerSettings_obj::player1->controls->loadKeyBinds();
HXLINE(  74)		::config::Config_obj::configCheck();
HXLINE(  76)		 ::flixel::graphics::FlxGraphic diamond = ::flixel::graphics::FlxGraphic_obj::fromClass(::hx::ClassOf< ::flixel::addons::transition::GraphicTransTileDiamond >(),null(),null(),null());
HXLINE(  77)		diamond->persist = true;
HXLINE(  78)		diamond->set_destroyOnNoUse(false);
HXLINE(  80)		 ::flixel::math::FlxPoint _hx_tmp =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,-1);
HXDLIN(  80)		::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn =  ::flixel::addons::transition::TransitionData_obj::__alloc( HX_CTX ,HX_("fade",7c,b5,b5,43),-16777216,1,_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("width",06,b6,62,ca),32)
            			->setFixed(1,HX_("height",e7,07,4c,02),32)
            			->setFixed(2,HX_("asset",f0,69,39,26),diamond)), ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,-200,-200,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.4))));
HXLINE(  82)		 ::flixel::math::FlxPoint _hx_tmp1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  82)		::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut =  ::flixel::addons::transition::TransitionData_obj::__alloc( HX_CTX ,HX_("fade",7c,b5,b5,43),-16777216,((Float)0.7),_hx_tmp1, ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("width",06,b6,62,ca),32)
            			->setFixed(1,HX_("height",e7,07,4c,02),32)
            			->setFixed(2,HX_("asset",f0,69,39,26),diamond)), ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,-200,-200,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.4))));
HXLINE(  85)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("weekUnlocked",37,64,c4,a5),::hx::paccDynamic) )) {
HXLINE(  91)			if ((::StoryMenuState_obj::weekUnlocked->length < 4)) {
HXLINE(  92)				::StoryMenuState_obj::weekUnlocked->insert(0,true);
            			}
HXLINE(  95)			if (!(::StoryMenuState_obj::weekUnlocked->__get(0))) {
HXLINE(  96)				::StoryMenuState_obj::weekUnlocked[0] = true;
            			}
            		}
HXLINE(  99)		bool _hx_tmp2;
HXDLIN(  99)		bool _hx_tmp3;
HXDLIN(  99)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("musicPreload",a4,2d,b7,eb),::hx::paccDynamic) )) {
HXLINE(  99)			_hx_tmp3 = ::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("charPreload",93,37,c8,5c),::hx::paccDynamic) );
            		}
            		else {
HXLINE(  99)			_hx_tmp3 = true;
            		}
HXDLIN(  99)		if (!(_hx_tmp3)) {
HXLINE(  99)			_hx_tmp2 = ::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("graphicsPreload",3e,f6,9b,54),::hx::paccDynamic) );
            		}
            		else {
HXLINE(  99)			_hx_tmp2 = true;
            		}
HXDLIN(  99)		if (_hx_tmp2) {
HXLINE( 103)			this->openPreloadSettings();
            		}
            		else {
HXLINE( 106)			this->songsCached = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("musicPreload",a4,2d,b7,eb),::hx::paccDynamic)) ));
HXLINE( 107)			this->charactersCached = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("charPreload",93,37,c8,5c),::hx::paccDynamic)) ));
HXLINE( 108)			this->graphicsCached = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("graphicsPreload",3e,f6,9b,54),::hx::paccDynamic)) ));
            		}
HXLINE( 111)		this->splash =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE( 112)		 ::flixel::FlxSprite _hx_tmp4 = this->splash;
HXDLIN( 112)		::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("fpsPlus/rozeSplash",1b,05,b3,91)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 112)		 ::Dynamic _hx_tmp5;
HXDLIN( 112)		if (::ImageCache_obj::exists(data)) {
HXLINE( 112)			_hx_tmp5 = ::ImageCache_obj::get(data);
            		}
            		else {
HXLINE( 112)			_hx_tmp5 = data;
            		}
HXDLIN( 112)		_hx_tmp4->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp5,((HX_("assets/images/",ab,47,cb,9f) + HX_("fpsPlus/rozeSplash",1b,05,b3,91)) + HX_(".xml",69,3e,c3,1e))));
HXLINE( 113)		this->splash->animation->addByPrefix(HX_("start",62,74,0b,84),HX_("Splash Start",e9,c4,48,38),24,false,null(),null());
HXLINE( 114)		this->splash->animation->addByPrefix(HX_("end",db,03,4d,00),HX_("Splash End",a2,54,bf,76),24,false,null(),null());
HXLINE( 115)		this->add(this->splash);
HXLINE( 116)		this->splash->animation->play(HX_("start",62,74,0b,84),null(),null(),null());
HXLINE( 117)		this->splash->updateHitbox();
HXLINE( 118)		this->splash->screenCenter(null());
HXLINE( 120)		this->loadingText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 30),0,HX_("",00,00,00,00),24,null());
HXLINE( 121)		this->loadingText->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),24,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 122)		this->add(this->loadingText);
HXLINE( 128)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.1), ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 133)		this->super::create();
            	}


void Startup_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_138_update)
HXLINE( 137)		 ::Startup _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 140)		bool _hx_tmp;
HXDLIN( 140)		bool _hx_tmp1;
HXDLIN( 140)		if (this->splash->animation->_curAnim->finished) {
HXLINE( 140)			_hx_tmp1 = (this->splash->animation->_curAnim->name == HX_("start",62,74,0b,84));
            		}
            		else {
HXLINE( 140)			_hx_tmp1 = false;
            		}
HXDLIN( 140)		if (_hx_tmp1) {
HXLINE( 140)			_hx_tmp = !(this->cacheStart);
            		}
            		else {
HXLINE( 140)			_hx_tmp = false;
            		}
HXDLIN( 140)		if (_hx_tmp) {
HXLINE( 150)			this->preload();
HXLINE( 153)			this->cacheStart = true;
            		}
HXLINE( 155)		bool _hx_tmp2;
HXDLIN( 155)		if (this->splash->animation->_curAnim->finished) {
HXLINE( 155)			_hx_tmp2 = (this->splash->animation->_curAnim->name == HX_("end",db,03,4d,00));
            		}
            		else {
HXLINE( 155)			_hx_tmp2 = false;
            		}
HXDLIN( 155)		if (_hx_tmp2) {
HXLINE( 156)			 ::flixel::FlxState nextState =  ::title::TitleVideo_obj::__alloc( HX_CTX ,null());
HXDLIN( 156)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 156)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 159)		bool _hx_tmp3;
HXDLIN( 159)		bool _hx_tmp4;
HXDLIN( 159)		bool _hx_tmp5;
HXDLIN( 159)		bool _hx_tmp6;
HXDLIN( 159)		if (this->songsCached) {
HXLINE( 159)			_hx_tmp6 = this->charactersCached;
            		}
            		else {
HXLINE( 159)			_hx_tmp6 = false;
            		}
HXDLIN( 159)		if (_hx_tmp6) {
HXLINE( 159)			_hx_tmp5 = this->graphicsCached;
            		}
            		else {
HXLINE( 159)			_hx_tmp5 = false;
            		}
HXDLIN( 159)		if (_hx_tmp5) {
HXLINE( 159)			_hx_tmp4 = this->splash->animation->_curAnim->finished;
            		}
            		else {
HXLINE( 159)			_hx_tmp4 = false;
            		}
HXDLIN( 159)		if (_hx_tmp4) {
HXLINE( 159)			_hx_tmp3 = (this->splash->animation->_curAnim->name != HX_("end",db,03,4d,00));
            		}
            		else {
HXLINE( 159)			_hx_tmp3 = false;
            		}
HXDLIN( 159)		if (_hx_tmp3) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Startup,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_167_update)
HXLINE( 167)				_gthis->loadingText->set_text(HX_("Done!",3f,f1,f1,70));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 161)			this->splash->animation->play(HX_("end",db,03,4d,00),null(),null(),null());
HXLINE( 162)			this->splash->updateHitbox();
HXLINE( 163)			this->splash->screenCenter(null());
HXLINE( 165)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
HXLINE( 171)		bool _hx_tmp7;
HXDLIN( 171)		if (!(this->cacheStart)) {
HXLINE( 171)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 171)			_hx_tmp7 = _this->keyManager->checkStatus(79,_this->status);
            		}
            		else {
HXLINE( 171)			_hx_tmp7 = false;
            		}
HXDLIN( 171)		if (_hx_tmp7) {
HXLINE( 174)			this->openPreloadSettings();
            		}
HXLINE( 178)		this->super::update(elapsed);
            	}


void Startup_obj::preload(){
            	HX_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_182_preload)
HXDLIN( 182)		 ::Startup _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 184)		this->loadingText->set_text(HX_("Preloading Assets...",24,8d,45,c3));
HXLINE( 187)		if (!(this->songsCached)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Startup,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_189_preload)
HXLINE( 189)				_gthis->preloadMusic();
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 188)			 ::Dynamic this1 =  ::__hxcpp_thread_create( ::Dynamic(new _hx_Closure_0(_gthis)));
            		}
HXLINE( 193)		if (!(this->charactersCached)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::Startup,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_195_preload)
HXLINE( 195)				_gthis->preloadCharacters();
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 194)			 ::Dynamic this1 =  ::__hxcpp_thread_create( ::Dynamic(new _hx_Closure_1(_gthis)));
            		}
HXLINE( 199)		if (!(this->graphicsCached)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::Startup,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_201_preload)
HXLINE( 201)				_gthis->preloadGraphics();
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 200)			 ::Dynamic this1 =  ::__hxcpp_thread_create( ::Dynamic(new _hx_Closure_2(_gthis)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Startup_obj,preload,(void))

void Startup_obj::preloadMusic(){
            	HX_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_207_preloadMusic)
HXLINE( 208)		{
HXLINE( 208)			int _g = 0;
HXDLIN( 208)			::Array< ::String > _g1 = this->songs;
HXDLIN( 208)			while((_g < _g1->length)){
HXLINE( 208)				::String x = _g1->__get(_g);
HXDLIN( 208)				_g = (_g + 1);
HXLINE( 209)				{
HXLINE( 209)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN( 209)					::String EmbeddedSound = (((HX_("assets/music/",36,ab,d2,e0) + (x + HX_("_Inst",c5,8b,a5,e3))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension);
HXDLIN( 209)					bool _hx_tmp;
HXDLIN( 209)					if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE( 209)						_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            					}
            					else {
HXLINE( 209)						_hx_tmp = true;
            					}
HXDLIN( 209)					if (_hx_tmp) {
HXLINE( 209)						::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            					}
            				}
HXLINE( 210)				::haxe::Log_obj::trace((HX_("Chached ",e0,b5,40,eb) + x),::hx::SourceInfo(HX_("source/Startup.hx",b5,3b,0c,b4),210,HX_("Startup",1d,5f,6c,02),HX_("preloadMusic",1c,20,bf,2f)));
            			}
            		}
HXLINE( 212)		{
HXLINE( 212)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN( 212)			::String EmbeddedSound = (((HX_("assets/music/",36,ab,d2,e0) + HX_("klaskiiLoop",9c,b4,18,a0)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension);
HXDLIN( 212)			bool _hx_tmp;
HXDLIN( 212)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE( 212)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE( 212)				_hx_tmp = true;
            			}
HXDLIN( 212)			if (_hx_tmp) {
HXLINE( 212)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE( 214)		this->loadingText->set_text(HX_("Songs cached...",8a,6d,c8,63));
HXLINE( 215)		this->songsCached = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Startup_obj,preloadMusic,(void))

void Startup_obj::preloadCharacters(){
            	HX_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_218_preloadCharacters)
HXLINE( 219)		{
HXLINE( 219)			int _g = 0;
HXDLIN( 219)			::Array< ::String > _g1 = this->characters;
HXDLIN( 219)			while((_g < _g1->length)){
HXLINE( 219)				::String x = _g1->__get(_g);
HXDLIN( 219)				_g = (_g + 1);
HXLINE( 220)				::String data = ((HX_("assets/images/",ab,47,cb,9f) + x) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 220)				 ::Dynamic _hx_tmp;
HXDLIN( 220)				if (::ImageCache_obj::exists(data)) {
HXLINE( 220)					_hx_tmp = ::ImageCache_obj::get(data);
            				}
            				else {
HXLINE( 220)					_hx_tmp = data;
            				}
HXDLIN( 220)				::ImageCache_obj::add(( (::String)(_hx_tmp) ));
HXLINE( 221)				::haxe::Log_obj::trace((HX_("Chached ",e0,b5,40,eb) + x),::hx::SourceInfo(HX_("source/Startup.hx",b5,3b,0c,b4),221,HX_("Startup",1d,5f,6c,02),HX_("preloadCharacters",d3,99,e3,b1)));
            			}
            		}
HXLINE( 223)		this->loadingText->set_text(HX_("Characters cached...",76,42,b2,7b));
HXLINE( 224)		this->charactersCached = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Startup_obj,preloadCharacters,(void))

void Startup_obj::preloadGraphics(){
            	HX_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_227_preloadGraphics)
HXLINE( 228)		{
HXLINE( 228)			int _g = 0;
HXDLIN( 228)			::Array< ::String > _g1 = this->graphics;
HXDLIN( 228)			while((_g < _g1->length)){
HXLINE( 228)				::String x = _g1->__get(_g);
HXDLIN( 228)				_g = (_g + 1);
HXLINE( 229)				::String data = ((HX_("assets/images/",ab,47,cb,9f) + x) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 229)				 ::Dynamic _hx_tmp;
HXDLIN( 229)				if (::ImageCache_obj::exists(data)) {
HXLINE( 229)					_hx_tmp = ::ImageCache_obj::get(data);
            				}
            				else {
HXLINE( 229)					_hx_tmp = data;
            				}
HXDLIN( 229)				::ImageCache_obj::add(( (::String)(_hx_tmp) ));
HXLINE( 230)				::haxe::Log_obj::trace((HX_("Chached ",e0,b5,40,eb) + x),::hx::SourceInfo(HX_("source/Startup.hx",b5,3b,0c,b4),230,HX_("Startup",1d,5f,6c,02),HX_("preloadGraphics",b4,6d,07,30)));
            			}
            		}
HXLINE( 232)		this->loadingText->set_text(HX_("Graphics cached...",d7,6d,56,71));
HXLINE( 233)		this->graphicsCached = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Startup_obj,preloadGraphics,(void))

void Startup_obj::openPreloadSettings(){
            	HX_GC_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_236_openPreloadSettings)
HXLINE( 238)		::config::CacheSettings_obj::noFunMode = true;
HXLINE( 239)		{
HXLINE( 239)			 ::flixel::FlxState nextState =  ::config::CacheSettings_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 239)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 239)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 240)		::config::CacheSettings_obj::returnLoc =  ::Startup_obj::__alloc( HX_CTX ,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Startup_obj,openPreloadSettings,(void))

bool Startup_obj::thing;


::hx::ObjectPtr< Startup_obj > Startup_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< Startup_obj > __this = new Startup_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< Startup_obj > Startup_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	Startup_obj *__this = (Startup_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Startup_obj), true, "Startup"));
	*(void **)__this = Startup_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

Startup_obj::Startup_obj()
{
}

void Startup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Startup);
	HX_MARK_MEMBER_NAME(splash,"splash");
	HX_MARK_MEMBER_NAME(loadingText,"loadingText");
	HX_MARK_MEMBER_NAME(songsCached,"songsCached");
	HX_MARK_MEMBER_NAME(songs,"songs");
	HX_MARK_MEMBER_NAME(charactersCached,"charactersCached");
	HX_MARK_MEMBER_NAME(characters,"characters");
	HX_MARK_MEMBER_NAME(graphicsCached,"graphicsCached");
	HX_MARK_MEMBER_NAME(graphics,"graphics");
	HX_MARK_MEMBER_NAME(cacheStart,"cacheStart");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Startup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(splash,"splash");
	HX_VISIT_MEMBER_NAME(loadingText,"loadingText");
	HX_VISIT_MEMBER_NAME(songsCached,"songsCached");
	HX_VISIT_MEMBER_NAME(songs,"songs");
	HX_VISIT_MEMBER_NAME(charactersCached,"charactersCached");
	HX_VISIT_MEMBER_NAME(characters,"characters");
	HX_VISIT_MEMBER_NAME(graphicsCached,"graphicsCached");
	HX_VISIT_MEMBER_NAME(graphics,"graphics");
	HX_VISIT_MEMBER_NAME(cacheStart,"cacheStart");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Startup_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { return ::hx::Val( songs ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"splash") ) { return ::hx::Val( splash ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"preload") ) { return ::hx::Val( preload_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { return ::hx::Val( graphics ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"characters") ) { return ::hx::Val( characters ); }
		if (HX_FIELD_EQ(inName,"cacheStart") ) { return ::hx::Val( cacheStart ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadingText") ) { return ::hx::Val( loadingText ); }
		if (HX_FIELD_EQ(inName,"songsCached") ) { return ::hx::Val( songsCached ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"preloadMusic") ) { return ::hx::Val( preloadMusic_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"graphicsCached") ) { return ::hx::Val( graphicsCached ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"preloadGraphics") ) { return ::hx::Val( preloadGraphics_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"charactersCached") ) { return ::hx::Val( charactersCached ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"preloadCharacters") ) { return ::hx::Val( preloadCharacters_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"openPreloadSettings") ) { return ::hx::Val( openPreloadSettings_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Startup_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"thing") ) { outValue = ( thing ); return true; }
	}
	return false;
}

::hx::Val Startup_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { songs=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"splash") ) { splash=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"characters") ) { characters=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheStart") ) { cacheStart=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadingText") ) { loadingText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songsCached") ) { songsCached=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"graphicsCached") ) { graphicsCached=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"charactersCached") ) { charactersCached=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Startup_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"thing") ) { thing=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Startup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("splash",67,81,98,bf));
	outFields->push(HX_("loadingText",49,b5,f4,92));
	outFields->push(HX_("songsCached",80,5d,e6,7e));
	outFields->push(HX_("songs",fe,36,c7,80));
	outFields->push(HX_("charactersCached",2c,08,e8,87));
	outFields->push(HX_("characters",aa,58,ce,55));
	outFields->push(HX_("graphicsCached",0d,f7,bd,03));
	outFields->push(HX_("graphics",cb,f8,67,12));
	outFields->push(HX_("cacheStart",c0,da,c3,c6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Startup_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Startup_obj,splash),HX_("splash",67,81,98,bf)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Startup_obj,loadingText),HX_("loadingText",49,b5,f4,92)},
	{::hx::fsBool,(int)offsetof(Startup_obj,songsCached),HX_("songsCached",80,5d,e6,7e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Startup_obj,songs),HX_("songs",fe,36,c7,80)},
	{::hx::fsBool,(int)offsetof(Startup_obj,charactersCached),HX_("charactersCached",2c,08,e8,87)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Startup_obj,characters),HX_("characters",aa,58,ce,55)},
	{::hx::fsBool,(int)offsetof(Startup_obj,graphicsCached),HX_("graphicsCached",0d,f7,bd,03)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Startup_obj,graphics),HX_("graphics",cb,f8,67,12)},
	{::hx::fsBool,(int)offsetof(Startup_obj,cacheStart),HX_("cacheStart",c0,da,c3,c6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Startup_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Startup_obj::thing,HX_("thing",ee,87,89,0f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Startup_obj_sMemberFields[] = {
	HX_("splash",67,81,98,bf),
	HX_("loadingText",49,b5,f4,92),
	HX_("songsCached",80,5d,e6,7e),
	HX_("songs",fe,36,c7,80),
	HX_("charactersCached",2c,08,e8,87),
	HX_("characters",aa,58,ce,55),
	HX_("graphicsCached",0d,f7,bd,03),
	HX_("graphics",cb,f8,67,12),
	HX_("cacheStart",c0,da,c3,c6),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("preload",c9,47,43,35),
	HX_("preloadMusic",1c,20,bf,2f),
	HX_("preloadCharacters",d3,99,e3,b1),
	HX_("preloadGraphics",b4,6d,07,30),
	HX_("openPreloadSettings",22,c9,b0,86),
	::String(null()) };

static void Startup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Startup_obj::thing,"thing");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Startup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Startup_obj::thing,"thing");
};

#endif

::hx::Class Startup_obj::__mClass;

static ::String Startup_obj_sStaticFields[] = {
	HX_("thing",ee,87,89,0f),
	::String(null())
};

void Startup_obj::__register()
{
	Startup_obj _hx_dummy;
	Startup_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Startup",1d,5f,6c,02);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Startup_obj::__GetStatic;
	__mClass->mSetStaticField = &Startup_obj::__SetStatic;
	__mClass->mMarkFunc = Startup_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Startup_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Startup_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Startup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Startup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Startup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Startup_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Startup_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_60_boot)
HXDLIN(  60)		thing = false;
            	}
}

