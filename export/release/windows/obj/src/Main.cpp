// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Startup
#include <Startup.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_FPS
#include <openfl/display/FPS.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_16_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",16,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_12_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",12,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_13_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",13,0x087e5c05)

void Main_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_16_new)
HXLINE(  17)		super::__construct();
HXLINE(  20)		::Main_obj::novid = ::Sys_obj::args()->contains(HX_("-novid",e3,a0,db,9d));
HXLINE(  21)		::Main_obj::flippymode = ::Sys_obj::args()->contains(HX_("-flippymode",c6,1a,87,a5));
HXLINE(  24)		this->addChild( ::flixel::FlxGame_obj::__alloc( HX_CTX ,0,0,::hx::ClassOf< ::Startup >(),1,144,144,true,null()));
HXLINE(  27)		::Main_obj::fpsDisplay =  ::openfl::display::FPS_obj::__alloc( HX_CTX ,10,3,16777215);
HXLINE(  28)		::Main_obj::fpsDisplay->set_visible(false);
HXLINE(  29)		this->addChild(::Main_obj::fpsDisplay);
HXLINE(  37)		::haxe::Log_obj::trace(HX_("-=Args=-",7d,63,c8,db),::hx::SourceInfo(HX_("source/Main.hx",91,d3,a7,40),37,HX_("Main",59,64,2f,33),HX_("new",60,d0,53,00)));
HXLINE(  38)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  38)		::String _hx_tmp1 = (HX_("novid: ",d6,02,d2,76) + ::Std_obj::string(::Main_obj::novid));
HXDLIN(  38)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/Main.hx",91,d3,a7,40),38,HX_("Main",59,64,2f,33),HX_("new",60,d0,53,00)));
HXLINE(  39)		 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  39)		::String _hx_tmp3 = (HX_("flippymode: ",3f,fb,c1,26) + ::Std_obj::string(::Main_obj::flippymode));
HXDLIN(  39)		_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("source/Main.hx",91,d3,a7,40),39,HX_("Main",59,64,2f,33),HX_("new",60,d0,53,00)));
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::openfl::display::FPS Main_obj::fpsDisplay;

bool Main_obj::novid;

bool Main_obj::flippymode;


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"novid") ) { outValue = ( novid ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fpsDisplay") ) { outValue = ( fpsDisplay ); return true; }
		if (HX_FIELD_EQ(inName,"flippymode") ) { outValue = ( flippymode ); return true; }
	}
	return false;
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"novid") ) { novid=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fpsDisplay") ) { fpsDisplay=ioValue.Cast<  ::openfl::display::FPS >(); return true; }
		if (HX_FIELD_EQ(inName,"flippymode") ) { flippymode=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::FPS */ ,(void *) &Main_obj::fpsDisplay,HX_("fpsDisplay",59,49,8e,21)},
	{::hx::fsBool,(void *) &Main_obj::novid,HX_("novid",30,64,cc,9f)},
	{::hx::fsBool,(void *) &Main_obj::flippymode,HX_("flippymode",59,40,6e,fe)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::fpsDisplay,"fpsDisplay");
	HX_MARK_MEMBER_NAME(Main_obj::novid,"novid");
	HX_MARK_MEMBER_NAME(Main_obj::flippymode,"flippymode");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::fpsDisplay,"fpsDisplay");
	HX_VISIT_MEMBER_NAME(Main_obj::novid,"novid");
	HX_VISIT_MEMBER_NAME(Main_obj::flippymode,"flippymode");
};

#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("fpsDisplay",59,49,8e,21),
	HX_("novid",30,64,cc,9f),
	HX_("flippymode",59,40,6e,fe),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_12_boot)
HXDLIN(  12)		novid = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_13_boot)
HXDLIN(  13)		flippymode = false;
            	}
}

