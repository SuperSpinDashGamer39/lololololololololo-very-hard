// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display__BlendMode_BlendMode_Impl_
#include <openfl/display/_BlendMode/BlendMode_Impl_.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c8186eee1bd9a607_38_new,"ChartingState","new",0x5e894bff,"ChartingState.new","ChartingState.hx",38,0xd9647851)
static const int _hx_array_data_9bdde08d_1[] = {
	(int)-4043879,(int)-16711681,(int)-15533563,(int)-444097,
};
static const ::String _hx_array_data_9bdde08d_2[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_111_create,"ChartingState","create",0xe351b8bd,"ChartingState.create","ChartingState.hx",111,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_257_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",257,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_262_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",262,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_267_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",267,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_272_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",272,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_278_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",278,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_310_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",310,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_317_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",317,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_325_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",325,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_333_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",333,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_339_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",339,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_251_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",251,0xd9647851)
static const ::String _hx_array_data_9bdde08d_18[] = {
	HX_("Easy",22,b8,e5,2d),HX_("Normal",47,e6,fd,64),HX_("Hard",0b,5b,e1,2f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_375_addToolsUI,"ChartingState","addToolsUI",0x97aacb4f,"ChartingState.addToolsUI","ChartingState.hx",375,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_383_addToolsUI,"ChartingState","addToolsUI",0x97aacb4f,"ChartingState.addToolsUI","ChartingState.hx",383,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_370_addToolsUI,"ChartingState","addToolsUI",0x97aacb4f,"ChartingState.addToolsUI","ChartingState.hx",370,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_440_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",440,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_452_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",452,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_463_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",463,0xd9647851)
static const int _hx_array_data_9bdde08d_28[] = {
	(int)3,(int)2,(int)1,(int)0,(int)7,(int)6,(int)5,(int)4,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_483_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",483,0xd9647851)
static const int _hx_array_data_9bdde08d_30[] = {
	(int)3,(int)2,(int)1,(int)0,(int)7,(int)6,(int)5,(int)4,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_424_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",424,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_533_addNoteUI,"ChartingState","addNoteUI",0x01b274a6,"ChartingState.addNoteUI","ChartingState.hx",533,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_569_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",569,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_550_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",550,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_579_generateUI,"ChartingState","generateUI",0x13f5670a,"ChartingState.generateUI","ChartingState.hx",579,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_598_getEvent,"ChartingState","getEvent",0x4f66dba5,"ChartingState.getEvent","ChartingState.hx",598,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_671_sectionStartTime,"ChartingState","sectionStartTime",0x9b4027eb,"ChartingState.sectionStartTime","ChartingState.hx",671,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_686_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",686,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_737_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",737,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_757_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",757,0xd9647851)
static const bool _hx_array_data_9bdde08d_44[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_986_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",986,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1030_changeNoteSustain,"ChartingState","changeNoteSustain",0x9b3f5f20,"ChartingState.changeNoteSustain","ChartingState.hx",1030,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1045_setNoteSustain,"ChartingState","setNoteSustain",0x38a28510,"ChartingState.setNoteSustain","ChartingState.hx",1045,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1060_recalculateSteps,"ChartingState","recalculateSteps",0xf6d4c855,"ChartingState.recalculateSteps","ChartingState.hx",1060,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1080_resetSection,"ChartingState","resetSection",0xb8b9e457,"ChartingState.resetSection","ChartingState.hx",1080,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1103_changeSection,"ChartingState","changeSection",0xb8ce82b4,"ChartingState.changeSection","ChartingState.hx",1103,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1140_copySection,"ChartingState","copySection",0xd085354f,"ChartingState.copySection","ChartingState.hx",1140,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1158_updateSectionUI,"ChartingState","updateSectionUI",0x006c124f,"ChartingState.updateSectionUI","ChartingState.hx",1158,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1171_updateHeads,"ChartingState","updateHeads",0x26e9ef29,"ChartingState.updateHeads","ChartingState.hx",1171,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1189_updateNoteUI,"ChartingState","updateNoteUI",0x1a7d0230,"ChartingState.updateNoteUI","ChartingState.hx",1189,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1194_updateGrid,"ChartingState","updateGrid",0xc2b587b0,"ChartingState.updateGrid","ChartingState.hx",1194,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1244_addNotesToRender,"ChartingState","addNotesToRender",0xd9fb9eb2,"ChartingState.addNotesToRender","ChartingState.hx",1244,0xd9647851)
static const int _hx_array_data_9bdde08d_63[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,
};
static const int _hx_array_data_9bdde08d_64[] = {
	(int)4,(int)5,(int)6,(int)7,(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1296_addSection,"ChartingState","addSection",0x8af6f805,"ChartingState.addSection","ChartingState.hx",1296,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1311_selectNote,"ChartingState","selectNote",0x7d3a534f,"ChartingState.selectNote","ChartingState.hx",1311,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1330_deleteNote,"ChartingState","deleteNote",0x61ebbbfe,"ChartingState.deleteNote","ChartingState.hx",1330,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1349_clearSection,"ChartingState","clearSection",0x225a5059,"ChartingState.clearSection","ChartingState.hx",1349,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1356_clearSectionBF,"ChartingState","clearSectionBF",0x29d2125d,"ChartingState.clearSectionBF","ChartingState.hx",1356,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1380_clearSectionOpp,"ChartingState","clearSectionOpp",0x6e080156,"ChartingState.clearSectionOpp","ChartingState.hx",1380,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1404_clearSong,"ChartingState","clearSong",0xd7f188e1,"ChartingState.clearSong","ChartingState.hx",1404,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1414_addNote,"ChartingState","addNote",0x780c91d2,"ChartingState.addNote","ChartingState.hx",1414,0xd9647851)
static const int _hx_array_data_9bdde08d_81[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,
};
static const int _hx_array_data_9bdde08d_82[] = {
	(int)4,(int)5,(int)6,(int)7,(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1454_getStrumTime,"ChartingState","getStrumTime",0xec7b6301,"ChartingState.getStrumTime","ChartingState.hx",1454,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1459_getYfromStrum,"ChartingState","getYfromStrum",0x7268247b,"ChartingState.getYfromStrum","ChartingState.hx",1459,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1484_loadLevel,"ChartingState","loadLevel",0xa572de5d,"ChartingState.loadLevel","ChartingState.hx",1484,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1488_getNotes,"ChartingState","getNotes",0x796cefcc,"ChartingState.getNotes","ChartingState.hx",1488,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1500_loadJson,"ChartingState","loadJson",0x30d3176f,"ChartingState.loadJson","ChartingState.hx",1500,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1506_loadAutosave,"ChartingState","loadAutosave",0xe706d2f3,"ChartingState.loadAutosave","ChartingState.hx",1506,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1512_autosaveSong,"ChartingState","autosaveSong",0x50afbca2,"ChartingState.autosaveSong","ChartingState.hx",1512,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1520_saveLevel,"ChartingState","saveLevel",0x18e899e6,"ChartingState.saveLevel","ChartingState.hx",1520,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1538_saveGenericLevel,"ChartingState","saveGenericLevel",0x92efcbcb,"ChartingState.saveGenericLevel","ChartingState.hx",1538,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1568_onSaveComplete,"ChartingState","onSaveComplete",0x9fbb2796,"ChartingState.onSaveComplete","ChartingState.hx",1568,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1580_onSaveCancel,"ChartingState","onSaveCancel",0xc234b317,"ChartingState.onSaveCancel","ChartingState.hx",1580,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1591_onSaveError,"ChartingState","onSaveError",0x40b268cb,"ChartingState.onSaveError","ChartingState.hx",1591,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1601_swapSections,"ChartingState","swapSections",0x1819ed22,"ChartingState.swapSections","ChartingState.hx",1601,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1610_sectionHasBfNotes,"ChartingState","sectionHasBfNotes",0x81e0a5c7,"ChartingState.sectionHasBfNotes","ChartingState.hx",1610,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1623_removeDuplicates,"ChartingState","removeDuplicates",0x622fc2ed,"ChartingState.removeDuplicates","ChartingState.hx",1623,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1656_approxEqual,"ChartingState","approxEqual",0xdbda93d9,"ChartingState.approxEqual","ChartingState.hx",1656,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1662_beatHit,"ChartingState","beatHit",0x66ca219c,"ChartingState.beatHit","ChartingState.hx",1662,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_52_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",52,0xd9647851)

void ChartingState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_38_new)
HXLINE(1480)		this->daSpacing = ((Float)0.3);
HXLINE( 660)		this->updatedSection = false;
HXLINE(  98)		this->tempBpm = ((Float)0);
HXLINE(  76)		this->GRID_SIZE = 40;
HXLINE(  72)		this->strumColors = ::Array_obj< int >::fromData( _hx_array_data_9bdde08d_1,4);
HXLINE(  69)		this->amountSteps = 0;
HXLINE(  68)		this->curSong = HX_("Dadbattle",9f,4a,7c,48);
HXLINE(  61)		this->diffDropFinal = HX_("",00,00,00,00);
HXLINE(  60)		this->diffList = ::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_2,3);
HXLINE(  50)		this->timeOld = ((Float)0);
HXLINE(  48)		this->curSection = 0;
HXLINE(  38)		super::__construct(TransIn,TransOut);
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x7824f5cd || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_111_create)
HXLINE( 113)		::openfl::Lib_obj::get_current()->stage->set_frameRate(( (Float)(120) ));
HXLINE( 115)		 ::flixel::text::FlxText controlInfo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,30,0,HX_("LEFT CLICK - Place Notes\nRIGHT CLICK - Delete Notes\nMIDDLE CLICK - Reselect a note.\n\nSHIFT - Unlock cursor from grid\nALT - Triplets\nCONTROL - 1/32 Notes\nSHIFT + CONTROL - 1/64 Notes\n\nTAB - Place notes on both sides\nHJKL - Place notes during\n                       playback\n\nR - Top of section\nSHIFT + R - Song start\n\nENTER - Test chart.\nCTRL + ENTER - Test chart from\n                         current section.",36,e7,4d,7c),12,null());
HXLINE( 116)		controlInfo->scrollFactor->set(null(),null());
HXLINE( 117)		this->add(controlInfo);
HXLINE( 119)		::ChartingState_obj::lastSection = 0;
HXLINE( 121)		int gridBG2Length = 4;
HXLINE( 123)		this->gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(this->GRID_SIZE,this->GRID_SIZE,(this->GRID_SIZE * 8),(this->GRID_SIZE * 16),true,-1579033,-3815995);
HXLINE( 125)		int _hx_tmp = this->GRID_SIZE;
HXDLIN( 125)		int _hx_tmp1 = ::Std_obj::_hx_int((( (Float)((this->GRID_SIZE * 4)) ) / ( (Float)(3) )));
HXDLIN( 125)		this->gridBGTriple = ::flixel::addons::display::FlxGridOverlay_obj::create(_hx_tmp,_hx_tmp1,(this->GRID_SIZE * 8),(this->GRID_SIZE * 16),true,-1579033,-3815995);
HXLINE( 126)		this->gridBGTriple->set_visible(false);
HXLINE( 128)		this->gridBG2 = ::flixel::addons::display::FlxGridOverlay_obj::create(this->GRID_SIZE,this->GRID_SIZE,(this->GRID_SIZE * 8),((this->GRID_SIZE * 16) * gridBG2Length),true,-11447983,-12763843);
HXLINE( 130)		this->gridBGOverlay = ::flixel::addons::display::FlxGridOverlay_obj::create((this->GRID_SIZE * 4),(this->GRID_SIZE * 4),(this->GRID_SIZE * 8),((this->GRID_SIZE * 16) * gridBG2Length),true,-1,-4872754);
HXLINE( 131)		 ::flixel::FlxSprite _hx_tmp2 = this->gridBGOverlay;
HXDLIN( 131)		_hx_tmp2->set_blend(::openfl::display::_BlendMode::BlendMode_Impl__obj::fromString(HX_("multiply",24,e2,8c,9a)));
HXLINE( 133)		this->add(this->gridBG2);
HXLINE( 134)		this->add(this->gridBG);
HXLINE( 135)		this->add(this->gridBGTriple);
HXLINE( 136)		this->add(this->gridBGOverlay);
HXLINE( 139)		this->leftIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("bf",c4,55,00,00),null(),null());
HXLINE( 140)		this->rightIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("dad",47,36,4c,00),null(),null());
HXLINE( 142)		this->leftIcon->scrollFactor->set(1,1);
HXLINE( 143)		this->rightIcon->scrollFactor->set(1,1);
HXLINE( 145)		this->leftIcon->iconScale = ((Float)0.5);
HXLINE( 146)		this->rightIcon->iconScale = ((Float)0.5);
HXLINE( 148)		 ::HealthIcon _hx_tmp3 = this->leftIcon;
HXDLIN( 148)		Float _hx_tmp4 = (this->gridBG->get_width() / ( (Float)(4) ));
HXDLIN( 148)		_hx_tmp3->setPosition((_hx_tmp4 - (this->leftIcon->get_width() / ( (Float)(4) ))),-75);
HXLINE( 149)		 ::HealthIcon _hx_tmp5 = this->rightIcon;
HXDLIN( 149)		Float _hx_tmp6 = ((this->gridBG->get_width() / ( (Float)(4) )) * ( (Float)(3) ));
HXDLIN( 149)		_hx_tmp5->setPosition((_hx_tmp6 - (this->rightIcon->get_width() / ( (Float)(4) ))),-75);
HXLINE( 151)		this->leftIconBack =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->leftIcon->x - ((Float)2.5)),(this->leftIcon->y - ((Float)2.5)),null())->makeGraphic(75,75,-16733441,null(),null());
HXLINE( 152)		this->rightIconBack =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->rightIcon->x - ((Float)2.5)),(this->rightIcon->y - ((Float)2.5)),null())->makeGraphic(75,75,-16733441,null(),null());
HXLINE( 154)		this->add(this->leftIconBack);
HXLINE( 155)		this->add(this->rightIconBack);
HXLINE( 156)		this->add(this->leftIcon);
HXLINE( 157)		this->add(this->rightIcon);
HXLINE( 159)		Float gridBlackLine = this->gridBG->x;
HXDLIN( 159)		 ::flixel::FlxSprite gridBlackLine1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(gridBlackLine + (this->gridBG->get_width() / ( (Float)(2) ))),null(),null());
HXDLIN( 159)		 ::flixel::FlxSprite gridBlackLine2 = gridBlackLine1->makeGraphic(2,::Std_obj::_hx_int(this->gridBG2->get_height()),-16777216,null(),null());
HXLINE( 160)		this->add(gridBlackLine2);
HXLINE( 162)		{
HXLINE( 162)			int _g = 1;
HXDLIN( 162)			int _g1 = gridBG2Length;
HXDLIN( 162)			while((_g < _g1)){
HXLINE( 162)				_g = (_g + 1);
HXDLIN( 162)				int i = (_g - 1);
HXLINE( 164)				Float gridSectionLine = this->gridBG->x;
HXDLIN( 164)				Float gridSectionLine1 = this->gridBG->y;
HXDLIN( 164)				 ::flixel::FlxSprite gridSectionLine2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,gridSectionLine,(gridSectionLine1 + (this->gridBG->get_height() * ( (Float)(i) ))),null());
HXDLIN( 164)				 ::flixel::FlxSprite gridSectionLine3 = gridSectionLine2->makeGraphic(::Std_obj::_hx_int(this->gridBG2->get_width()),2,-16777216,null(),null());
HXLINE( 165)				this->add(gridSectionLine3);
            			}
            		}
HXLINE( 169)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 170)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 172)		if (::hx::IsNotNull( ::PlayState_obj::SONG )) {
HXLINE( 173)			this->_song = ::PlayState_obj::SONG;
            		}
            		else {
HXLINE( 176)			this->_song =  ::Dynamic(::hx::Anon_obj::Create(10)
            				->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            				->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            				->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            				->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            				->setFixed(4,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(5,HX_("validScore",b6,dc,18,c7),false)
            				->setFixed(6,HX_("gf",1f,5a,00,00),HX_("gf",1f,5a,00,00))
            				->setFixed(7,HX_("bpm",df,be,4a,00),( (Float)(150) ))
            				->setFixed(8,HX_("needsVoices",be,05,e9,0d),true)
            				->setFixed(9,HX_("song",d5,23,58,4c),HX_("Test",72,f4,d2,37)));
            		}
HXLINE( 190)		{
HXLINE( 190)			int _g2 = 0;
HXDLIN( 190)			::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 190)			while((_g2 < _g3->length)){
HXLINE( 190)				 ::Dynamic x = _g3->__get(_g2);
HXDLIN( 190)				_g2 = (_g2 + 1);
HXLINE( 191)				if (!(( (bool)(x->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) ))) {
HXLINE( 192)					x->__SetField(HX_("bpm",df,be,4a,00),0,::hx::paccDynamic);
            				}
            			}
            		}
HXLINE( 195)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 196)		 ::flixel::util::FlxSave _hx_tmp7 = ::flixel::FlxG_obj::save;
HXDLIN( 196)		_hx_tmp7->bind(::StringTools_obj::replace(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)),HX_("Chart Editor Autosaves",36,ca,04,77));
HXLINE( 198)		this->tempBpm = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 200)		this->addSection(null());
HXLINE( 204)		this->updateGrid();
HXLINE( 206)		this->loadSong(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 207)		::Conductor_obj::changeBPM(( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 208)		::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 210)		this->bpmTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1000,50,0,HX_("",00,00,00,00),16,null());
HXLINE( 211)		this->bpmTxt->scrollFactor->set(null(),null());
HXLINE( 212)		this->add(this->bpmTxt);
HXLINE( 214)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(this->GRID_SIZE,this->GRID_SIZE,null(),null(),null());
HXLINE( 215)		this->add(this->dummyArrow);
HXLINE( 217)		 ::flixel::FlxSprite _hx_tmp8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null());
HXDLIN( 217)		this->strumLine = _hx_tmp8->makeGraphic(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))),4,-16776961,null(),null());
HXLINE( 218)		this->add(this->strumLine);
HXLINE( 220)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Song",f5,4f,31,37))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song",f5,4f,31,37))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Section",c5,2d,29,2b))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Section",c5,2d,29,2b))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Note",12,44,e3,33))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Note",12,44,e3,33))))->init(3, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Tools",fb,01,5c,a7))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Tools",fb,01,5c,a7))));
HXLINE( 227)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 229)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 230)		this->UI_box->set_x((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )));
HXLINE( 231)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 232)		this->add(this->UI_box);
HXLINE( 234)		this->addSongUI();
HXLINE( 235)		this->addSectionUI();
HXLINE( 236)		this->addNoteUI();
HXLINE( 237)		this->addToolsUI();
HXLINE( 238)		this->updateHeads();
HXLINE( 240)		this->add(this->curRenderedNotes);
HXLINE( 241)		this->add(this->curRenderedSustains);
HXLINE( 243)		{
HXLINE( 243)			int _g4 = 0;
HXDLIN( 243)			int _g5 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 243)			while((_g4 < _g5)){
HXLINE( 243)				_g4 = (_g4 + 1);
HXDLIN( 243)				int i = (_g4 - 1);
HXLINE( 244)				this->removeDuplicates(i,null());
            			}
            		}
HXLINE( 247)		this->super::create();
            	}


void ChartingState_obj::addSongUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_257_addSongUI)
HXLINE( 257)			_gthis->saveLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_262_addSongUI)
HXLINE( 262)			_gthis->saveGenericLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_267_addSongUI)
HXLINE( 267)			_gthis->loadSong(( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_272_addSongUI)
HXLINE( 272)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 272)			_gthis1->loadJson(( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_278_addSongUI)
HXLINE( 279)			::String song_name = ( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE( 281)			::PlayState_obj::SONG =  ::Dynamic(::hx::Anon_obj::Create(10)
            				->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            				->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            				->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            				->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            				->setFixed(4,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(5,HX_("validScore",b6,dc,18,c7),false)
            				->setFixed(6,HX_("gf",1f,5a,00,00),HX_("gf",1f,5a,00,00))
            				->setFixed(7,HX_("bpm",df,be,4a,00),((Float)120.0))
            				->setFixed(8,HX_("needsVoices",be,05,e9,0d),true)
            				->setFixed(9,HX_("song",d5,23,58,4c),song_name));
HXLINE( 294)			{
HXLINE( 294)				 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 294)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 294)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_310_addSongUI)
HXLINE( 311)			::Array< ::String > characters1 = characters;
HXDLIN( 311)			 ::Dynamic _hx_tmp = ::Std_obj::parseInt(character);
HXDLIN( 311)			_gthis->_song->__SetField(HX_("player1",b0,09,15,8a),characters1->__get(( (int)(_hx_tmp) )),::hx::paccDynamic);
HXLINE( 312)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_317_addSongUI)
HXLINE( 318)			::Array< ::String > characters1 = characters;
HXDLIN( 318)			 ::Dynamic _hx_tmp = ::Std_obj::parseInt(character);
HXDLIN( 318)			_gthis->_song->__SetField(HX_("player2",b1,09,15,8a),characters1->__get(( (int)(_hx_tmp) )),::hx::paccDynamic);
HXLINE( 319)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String diff){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_325_addSongUI)
HXLINE( 326)			::haxe::Log_obj::trace(diff,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),326,HX_("ChartingState",8d,e0,dd,9b),HX_("addSongUI",6a,02,ad,e5)));
HXLINE( 327)			::Array< ::String > _gthis1 = _gthis->diffList;
HXDLIN( 327)			 ::Dynamic diffDrop = ::Std_obj::parseInt(diff);
HXDLIN( 327)			_gthis->diffDropFinal = _gthis1->__get(( (int)(diffDrop) ));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_8, ::ChartingState,_gthis,::Array< ::String >,gfs) HXARGC(1)
            		void _hx_run(::String gf){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_333_addSongUI)
HXLINE( 333)			::Array< ::String > gfs1 = gfs;
HXDLIN( 333)			 ::Dynamic _hx_tmp = ::Std_obj::parseInt(gf);
HXDLIN( 333)			_gthis->_song->__SetField(HX_("gf",1f,5a,00,00),gfs1->__get(( (int)(_hx_tmp) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9,::Array< ::String >,stages, ::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String selStage){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_339_addSongUI)
HXLINE( 339)			::Array< ::String > stages1 = stages;
HXDLIN( 339)			 ::Dynamic _hx_tmp = ::Std_obj::parseInt(selStage);
HXDLIN( 339)			_gthis->_song->__SetField(HX_("stage",be,6a,0b,84),stages1->__get(( (int)(_hx_tmp) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_251_addSongUI)
HXLINE( 250)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 252)		 ::flixel::addons::ui::FlxUIInputText UI_songTitle =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,70,( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE( 253)		this->typingShit = UI_songTitle;
HXLINE( 255)		 ::flixel::ui::FlxButton saveButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,8,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 260)		 ::flixel::ui::FlxButton saveGenericButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,(saveButton->y + 30),HX_("Save Generic",34,ba,e3,aa), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 265)		Float saveButton1 = saveButton->x;
HXDLIN( 265)		Float reloadSong = ((saveButton1 + saveButton->get_width()) + 10);
HXDLIN( 265)		 ::flixel::ui::FlxButton reloadSong1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong,saveButton->y,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 270)		 ::flixel::ui::FlxButton reloadSongJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong1->x,(saveButton->y + 30),HX_("Reload JSON",2f,1c,a5,4a), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 275)		 ::flixel::ui::FlxButton loadAutosaveBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSongJson->x,(reloadSongJson->y + 30),HX_("load autosave",66,5f,5a,83),this->loadAutosave_dyn());
HXLINE( 277)		 ::flixel::ui::FlxButton fullreset =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,150,HX_("Full Blank",03,de,92,bc), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 297)		 ::flixel::addons::ui::FlxUINumericStepper stepperSpeed =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,70,((Float)0.1),1,((Float)0.1),25,1,null(),null(),null(),null(),null());
HXLINE( 298)		stepperSpeed->set_value(( (Float)(this->_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE( 299)		stepperSpeed->name = HX_("song_speed",5d,10,41,a4);
HXLINE( 301)		 ::flixel::addons::ui::FlxUINumericStepper stepperBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,50,1,1,1,999,2,null(),null(),null(),null(),null());
HXLINE( 302)		stepperBPM->set_value(::Conductor_obj::bpm);
HXLINE( 303)		stepperBPM->name = HX_("song_bpm",35,36,15,42);
HXLINE( 305)		::Array< ::String > characters = ::CoolUtil_obj::coolTextFile(HX_("assets/data/characterList.txt",10,12,df,7e));
HXLINE( 306)		::Array< ::String > gfs = ::CoolUtil_obj::coolTextFile(HX_("assets/data/gfList.txt",d8,11,f1,64));
HXLINE( 307)		::Array< ::String > stages = ::CoolUtil_obj::coolTextFile(HX_("assets/data/stageList.txt",a5,fe,b7,7c));
HXLINE( 309)		this->player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_5(_gthis,characters)),null(),null(),null(),null());
HXLINE( 314)		this->player1DropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 316)		this->player2DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_6(_gthis,characters)),null(),null(),null(),null());
HXLINE( 322)		this->player2DropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 324)		 ::flixel::addons::ui::FlxUIDropDownMenu diffDrop =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,160,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_18,3),true), ::Dynamic(new _hx_Closure_7(_gthis)),null(),null(),null(),null());
HXLINE( 331)		this->gfDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,130,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(gfs,true), ::Dynamic(new _hx_Closure_8(_gthis,gfs)),null(),null(),null(),null());
HXLINE( 335)		this->gfDropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("gf",1f,5a,00,00),::hx::paccDynamic)) ));
HXLINE( 337)		this->stageDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,130,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(stages,true), ::Dynamic(new _hx_Closure_9(stages,_gthis)),null(),null(),null(),null());
HXLINE( 341)		this->stageDropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE( 343)		diffDrop->set_selectedLabel(HX_("Normal",47,e6,fd,64));
HXLINE( 345)		 ::flixel::addons::ui::FlxUI tab_group_song =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 346)		tab_group_song->name = HX_("Song",f5,4f,31,37);
HXLINE( 348)		tab_group_song->add(UI_songTitle).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 349)		tab_group_song->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 350)		tab_group_song->add(saveGenericButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 351)		tab_group_song->add(reloadSong1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 352)		tab_group_song->add(reloadSongJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 353)		tab_group_song->add(loadAutosaveBtn).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 354)		tab_group_song->add(stepperBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 355)		tab_group_song->add(stepperSpeed).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 356)		tab_group_song->add(diffDrop).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 357)		tab_group_song->add(this->gfDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 358)		tab_group_song->add(this->stageDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 359)		tab_group_song->add(this->player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 360)		tab_group_song->add(this->player2DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 363)		this->UI_box->addGroup(tab_group_song);
HXLINE( 364)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 366)		::flixel::FlxG_obj::camera->follow(this->strumLine,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSongUI,(void))

void ChartingState_obj::addToolsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_375_addToolsUI)
HXLINE( 376)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 376)			_gthis1->changeSection(::Std_obj::_hx_int(_gthis->gotoSectionStepper->value),true);
HXLINE( 377)			_gthis->gotoSectionStepper->set_value(( (Float)(0) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUICheckBox,check_mute_inst) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_383_addToolsUI)
HXLINE( 384)			Float vol = ( (Float)(1) );
HXLINE( 386)			if (check_mute_inst->checked) {
HXLINE( 387)				vol = ( (Float)(0) );
            			}
HXLINE( 389)			::flixel::FlxG_obj::sound->music->set_volume(vol);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_370_addToolsUI)
HXLINE( 369)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 371)		this->gotoSectionStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,400,1,0,0,999,0,null(),null(),null(),null(),null());
HXLINE( 372)		this->gotoSectionStepper->name = HX_("gotoSection",82,5e,33,c7);
HXLINE( 374)		 ::flixel::ui::FlxButton gotoSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,this->gotoSectionStepper->x,(this->gotoSectionStepper->y + 20),HX_("Go to Section",f8,08,13,e0), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 380)		 ::flixel::addons::ui::FlxUICheckBox check_mute_inst =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,10,null(),null(),HX_("Mute Instrumental (in editor)",a2,93,a5,ab),100,null(),null());
HXLINE( 381)		check_mute_inst->set_checked(false);
HXLINE( 382)		check_mute_inst->callback =  ::Dynamic(new _hx_Closure_1(check_mute_inst));
HXLINE( 392)		this->bfClick =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,30,null(),null(),HX_("BF Note Click",76,d2,ed,18),100,null(),null());
HXLINE( 393)		this->bfClick->set_checked(false);
HXLINE( 395)		this->opClick =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,50,null(),null(),HX_("Opp Note Click",0b,16,69,7e),100,null(),null());
HXLINE( 396)		this->opClick->set_checked(false);
HXLINE( 401)		 ::flixel::addons::ui::FlxUI tab_group_tools =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 402)		tab_group_tools->name = HX_("Tools",fb,01,5c,a7);
HXLINE( 404)		tab_group_tools->add(this->gotoSectionStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 405)		tab_group_tools->add(gotoSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 406)		tab_group_tools->add(check_mute_inst).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 407)		tab_group_tools->add(this->bfClick).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 408)		tab_group_tools->add(this->opClick).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 411)		this->UI_box->addGroup(tab_group_tools);
HXLINE( 412)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 414)		::flixel::FlxG_obj::camera->follow(this->strumLine,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addToolsUI,(void))

void ChartingState_obj::addSectionUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperCopy) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_440_addSectionUI)
HXLINE( 440)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 440)			_gthis1->copySection(::Std_obj::_hx_int(stepperCopy->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_452_addSectionUI)
HXLINE( 454)			{
HXLINE( 454)				int _g = 0;
HXDLIN( 454)				int _g1 = ( (::Array< ::Dynamic>)(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 454)				while((_g < _g1)){
HXLINE( 454)					_g = (_g + 1);
HXDLIN( 454)					int x = (_g - 1);
HXLINE( 455)					 ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(x)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
            				}
            			}
HXLINE( 458)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_463_addSectionUI)
HXLINE( 464)			::Array< int > flipTable = ::Array_obj< int >::fromData( _hx_array_data_9bdde08d_28,8);
HXLINE( 467)			{
HXLINE( 467)				int _g = 0;
HXDLIN( 467)				::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 467)				while((_g < _g1->get_length())){
HXLINE( 467)					 ::Dynamic x = _g1->__get(_g);
HXDLIN( 467)					_g = (_g + 1);
HXLINE( 468)					if (( (bool)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 469)						if (::hx::IsLess( x->__GetItem(1),4 )) {
HXLINE( 470)							x->__SetItem(1,flipTable->__get(( (int)(x->__GetItem(1)) )));
            						}
            					}
            					else {
HXLINE( 473)						if (::hx::IsGreater( x->__GetItem(1),3 )) {
HXLINE( 474)							x->__SetItem(1,flipTable->__get(( (int)(x->__GetItem(1)) )));
            						}
            					}
            				}
            			}
HXLINE( 478)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_483_addSectionUI)
HXLINE( 484)			::Array< int > flipTable = ::Array_obj< int >::fromData( _hx_array_data_9bdde08d_30,8);
HXLINE( 487)			{
HXLINE( 487)				int _g = 0;
HXDLIN( 487)				::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 487)				while((_g < _g1->get_length())){
HXLINE( 487)					 ::Dynamic x = _g1->__get(_g);
HXDLIN( 487)					_g = (_g + 1);
HXLINE( 488)					if (( (bool)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 489)						if (::hx::IsGreater( x->__GetItem(1),3 )) {
HXLINE( 490)							x->__SetItem(1,flipTable->__get(( (int)(x->__GetItem(1)) )));
            						}
            					}
            					else {
HXLINE( 493)						if (::hx::IsLess( x->__GetItem(1),4 )) {
HXLINE( 494)							x->__SetItem(1,flipTable->__get(( (int)(x->__GetItem(1)) )));
            						}
            					}
            				}
            			}
HXLINE( 498)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_424_addSectionUI)
HXLINE( 423)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 425)		 ::flixel::addons::ui::FlxUI tab_group_section =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 426)		tab_group_section->name = HX_("Section",c5,2d,29,2b);
HXLINE( 428)		this->stepperLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,4,0,0,999,0,null(),null(),null(),null(),null());
HXLINE( 429)		this->stepperLength->set_value(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ));
HXLINE( 430)		this->stepperLength->name = HX_("section_length",40,57,01,c1);
HXLINE( 432)		this->stepperSectionBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,80,1,0,0,999,0,null(),null(),null(),null(),null());
HXLINE( 433)		this->stepperSectionBPM->set_value(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(0)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 434)		this->stepperSectionBPM->name = HX_("section_bpm",45,60,97,44);
HXLINE( 436)		 ::flixel::addons::ui::FlxUINumericStepper stepperCopy =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,110,130,1,1,-999,999,0,null(),null(),null(),null(),null());
HXLINE( 438)		 ::flixel::ui::FlxButton copyButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,130,HX_("Copy last section",46,61,ca,99), ::Dynamic(new _hx_Closure_0(_gthis,stepperCopy)));
HXLINE( 443)		 ::flixel::ui::FlxButton clearSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,150,HX_("Clear",6d,e1,88,db),this->clearSection_dyn());
HXLINE( 445)		 ::flixel::ui::FlxButton clearSectionOppButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,150,HX_("Clear Opp",dc,c3,1d,40),this->clearSectionOpp_dyn());
HXLINE( 447)		 ::flixel::ui::FlxButton clearSectionBFButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,210,150,HX_("Clear BF",97,82,9e,0a),this->clearSectionBF_dyn());
HXLINE( 449)		 ::flixel::ui::FlxButton swapSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,170,HX_("Swap section",78,0b,70,e2),this->swapSections_dyn());
HXLINE( 451)		 ::flixel::ui::FlxButton blankButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,300,HX_("Full Clear",3c,70,fc,4f), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 462)		 ::flixel::ui::FlxButton bSideButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,200,HX_("Flip BF Notes",78,dc,a3,45), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 482)		 ::flixel::ui::FlxButton bSideButton2 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,220,HX_("Flip Opp Notes",3d,be,14,59), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 501)		this->check_mustHitSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,30,null(),null(),HX_("Must hit section",a1,02,f0,99),100,null(),null());
HXLINE( 502)		this->check_mustHitSection->name = HX_("check_mustHit",13,36,be,48);
HXLINE( 503)		this->check_mustHitSection->set_checked(( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(0)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE( 506)		this->check_altAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,400,null(),null(),HX_("Alt Animation",0d,81,c1,cd),100,null(),null());
HXLINE( 507)		this->check_altAnim->name = HX_("check_altAnim",23,ee,53,2e);
HXLINE( 509)		this->check_changeBPM =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,60,null(),null(),HX_("Change BPM",2f,3c,7a,fb),100,null(),null());
HXLINE( 510)		this->check_changeBPM->name = HX_("check_changeBPM",d8,2d,43,fc);
HXLINE( 513)		tab_group_section->add(this->stepperSectionBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 514)		tab_group_section->add(stepperCopy).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 515)		tab_group_section->add(this->check_mustHitSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 516)		tab_group_section->add(this->check_altAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 517)		tab_group_section->add(this->check_changeBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 518)		tab_group_section->add(copyButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 519)		tab_group_section->add(clearSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 520)		tab_group_section->add(clearSectionOppButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 521)		tab_group_section->add(clearSectionBFButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 522)		tab_group_section->add(swapSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 523)		tab_group_section->add(blankButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 524)		tab_group_section->add(bSideButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 525)		tab_group_section->add(bSideButton2).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 527)		this->UI_box->addGroup(tab_group_section);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSectionUI,(void))

void ChartingState_obj::addNoteUI(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_533_addNoteUI)
HXLINE( 534)		 ::flixel::addons::ui::FlxUI tab_group_note =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 535)		tab_group_note->name = HX_("Note",12,44,e3,33);
HXLINE( 537)		this->stepperSusLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,(::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,((::Conductor_obj::stepCrochet * ( (Float)(16) )) * ( (Float)(16) )),null(),null(),null(),null(),null(),null());
HXLINE( 538)		this->stepperSusLength->set_value(( (Float)(0) ));
HXLINE( 539)		this->stepperSusLength->name = HX_("note_susLength",8a,6b,51,4b);
HXLINE( 541)		 ::flixel::ui::FlxButton applyLength =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,100,10,HX_("Apply",4e,f5,68,b7),null());
HXLINE( 543)		tab_group_note->add(this->stepperSusLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 544)		tab_group_note->add(applyLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 546)		this->UI_box->addGroup(tab_group_note);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNoteUI,(void))

void ChartingState_obj::loadSong(::String daSong){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_569_loadSong)
HXLINE( 570)			_gthis->vocals->pause();
HXLINE( 571)			_gthis->vocals->set_time(( (Float)(0) ));
HXLINE( 572)			::flixel::FlxG_obj::sound->music->pause();
HXLINE( 573)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE( 574)			_gthis->changeSection(null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_550_loadSong)
HXLINE( 549)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 551)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 553)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 553)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 557)		::flixel::FlxG_obj::sound->playMusic((((HX_("assets/music/",36,ab,d2,e0) + (daSong + HX_("_Inst",c5,8b,a5,e3))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null());
HXLINE( 560)		this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX )->loadEmbedded((((HX_("assets/music/",36,ab,d2,e0) + (daSong + HX_("_Voices",40,5c,55,00))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null());
HXLINE( 561)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 563)		::flixel::FlxG_obj::sound->music->pause();
HXLINE( 564)		this->vocals->play(null(),null(),null());
HXLINE( 565)		this->vocals->pause();
HXLINE( 566)		this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE( 568)		::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadSong,(void))

void ChartingState_obj::generateUI(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_579_generateUI)
HXLINE( 580)		while((this->bullshitUI->members->get_length() > 0)){
HXLINE( 582)			this->bullshitUI->remove(Dynamic( this->bullshitUI->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 586)		 ::flixel::text::FlxText title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->UI_box->x + 20),(this->UI_box->y + 20),0,null(),null(),null());
HXLINE( 587)		this->bullshitUI->add(title).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateUI,(void))

void ChartingState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_598_getEvent)
HXDLIN( 598)		if ((id == HX_("click_check_box",dd,c1,1e,a8))) {
HXLINE( 600)			 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(sender) );
HXLINE( 601)			::String label = check->getLabel()->text;
HXLINE( 602)			::String _hx_switch_0 = label;
            			if (  (_hx_switch_0==HX_("Alt Animation",0d,81,c1,cd)) ){
HXLINE( 614)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("altAnim",da,f3,f2,e5),check->checked,::hx::paccDynamic);
HXDLIN( 614)				goto _hx_goto_37;
            			}
            			if (  (_hx_switch_0==HX_("Change BPM",2f,3c,7a,fb)) ){
HXLINE( 611)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("changeBPM",4f,4f,f8,1d),check->checked,::hx::paccDynamic);
HXDLIN( 611)				goto _hx_goto_37;
            			}
            			if (  (_hx_switch_0==HX_("Must hit section",a1,02,f0,99)) ){
HXLINE( 606)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("mustHitSection",3b,5f,87,62),check->checked,::hx::paccDynamic);
HXLINE( 607)				this->updateHeads();
HXLINE( 608)				this->swapSections();
HXLINE( 604)				goto _hx_goto_37;
            			}
            			_hx_goto_37:;
            		}
            		else {
HXLINE( 617)			bool _hx_tmp;
HXDLIN( 617)			if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXLINE( 617)				_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            			}
            			else {
HXLINE( 617)				_hx_tmp = false;
            			}
HXDLIN( 617)			if (_hx_tmp) {
HXLINE( 619)				 ::flixel::addons::ui::FlxUINumericStepper nums = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE( 620)				::String wname = nums->name;
HXLINE( 622)				if ((wname == HX_("section_length",40,57,01,c1))) {
HXLINE( 624)					 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("lengthInSteps",3c,ed,41,db),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE( 625)					this->updateGrid();
            				}
            				else {
HXLINE( 627)					if ((wname == HX_("song_speed",5d,10,41,a4))) {
HXLINE( 629)						this->_song->__SetField(HX_("speed",87,97,69,81),nums->value,::hx::paccDynamic);
            					}
            					else {
HXLINE( 631)						if ((wname == HX_("song_bpm",35,36,15,42))) {
HXLINE( 633)							this->tempBpm = nums->value;
HXLINE( 634)							::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 635)							::Conductor_obj::changeBPM(nums->value);
            						}
            						else {
HXLINE( 637)							if ((wname == HX_("note_susLength",8a,6b,51,4b))) {
HXLINE( 639)								this->curSelectedNote->set(2,nums->value);
HXLINE( 640)								this->updateGrid();
HXLINE( 641)								this->autosaveSong();
            							}
            							else {
HXLINE( 643)								if ((wname == HX_("section_bpm",45,60,97,44))) {
HXLINE( 645)									::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 646)									 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("bpm",df,be,4a,00),nums->value,::hx::paccDynamic);
HXLINE( 647)									this->updateGrid();
HXLINE( 648)									this->autosaveSong();
            								}
            								else {
HXLINE( 650)									if ((wname == HX_("check_changeBPM",d8,2d,43,fc))) {
HXLINE( 652)										::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 653)										 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("bpm",df,be,4a,00),nums->value,::hx::paccDynamic);
HXLINE( 654)										this->updateGrid();
HXLINE( 655)										this->autosaveSong();
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


Float ChartingState_obj::sectionStartTime(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_671_sectionStartTime)
HXLINE( 672)		Float daBPM = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 673)		Float daPos = ( (Float)(0) );
HXLINE( 674)		{
HXLINE( 674)			int _g = 0;
HXDLIN( 674)			int _g1 = this->curSection;
HXDLIN( 674)			while((_g < _g1)){
HXLINE( 674)				_g = (_g + 1);
HXDLIN( 674)				int i = (_g - 1);
HXLINE( 676)				if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 678)					daBPM = ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXLINE( 680)				daPos = (daPos + (( (Float)(4) ) * (( (Float)(60000) ) / daBPM)));
            			}
            		}
HXLINE( 682)		return daPos;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,sectionStartTime,return )

void ChartingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_686_update)
HXLINE( 685)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 687)		this->curStep = this->recalculateSteps();
HXLINE( 689)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE( 690)		this->_song->__SetField(HX_("song",d5,23,58,4c),this->typingShit->text,::hx::paccDynamic);
HXLINE( 692)		 ::flixel::FlxSprite _hx_tmp = this->strumLine;
HXDLIN( 692)		Float _hx_tmp1 = ::Conductor_obj::songPosition;
HXDLIN( 692)		_hx_tmp->set_y(this->getYfromStrum((_hx_tmp1 - this->sectionStartTime())));
HXLINE( 694)		bool _hx_tmp2;
HXDLIN( 694)		if ((this->curStep >= (16 * (this->curSection + 1)))) {
HXLINE( 694)			_hx_tmp2 = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            		}
            		else {
HXLINE( 694)			_hx_tmp2 = false;
            		}
HXDLIN( 694)		if (_hx_tmp2) {
HXLINE( 696)			::haxe::Log_obj::trace(this->curStep,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),696,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
HXLINE( 697)			::haxe::Log_obj::trace((( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * (this->curSection + 1)),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),697,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
HXLINE( 698)			::haxe::Log_obj::trace(HX_("DUMBSHIT",e6,67,07,01),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),698,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
HXLINE( 700)			if (::hx::IsNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((this->curSection + 1)) )) {
HXLINE( 702)				this->addSection(null());
            			}
HXLINE( 705)			this->changeSection((this->curSection + 1),false);
            		}
HXLINE( 711)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 714)			bool _hx_tmp;
HXDLIN( 714)			bool _hx_tmp1;
HXDLIN( 714)			bool _hx_tmp2;
HXDLIN( 714)			if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE( 715)				int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN( 715)				Float _hx_tmp1 = this->gridBG->x;
HXLINE( 714)				_hx_tmp2 = (_hx_tmp < (_hx_tmp1 + this->gridBG->get_width()));
            			}
            			else {
HXLINE( 714)				_hx_tmp2 = false;
            			}
HXDLIN( 714)			if (_hx_tmp2) {
HXLINE( 714)				_hx_tmp1 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            			}
            			else {
HXLINE( 714)				_hx_tmp1 = false;
            			}
HXDLIN( 714)			if (_hx_tmp1) {
HXLINE( 714)				_hx_tmp = (::flixel::FlxG_obj::mouse->y < (this->gridBG->y + (this->GRID_SIZE * ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ))));
            			}
            			else {
HXLINE( 714)				_hx_tmp = false;
            			}
HXDLIN( 714)			if (_hx_tmp) {
HXLINE( 720)				Float _hx_tmp = this->getStrumTime(this->dummyArrow->y);
HXDLIN( 720)				Float _hx_tmp1 = (_hx_tmp + this->sectionStartTime());
HXDLIN( 720)				this->addNote(_hx_tmp1,::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) ))),null());
HXLINE( 721)				this->holding = true;
            			}
            		}
HXLINE( 727)		if ((::flixel::FlxG_obj::mouse->_rightButton->current == 2)) {
HXLINE( 730)			if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(1)
            				void _hx_run( ::Note note){
            					HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_737_update)
HXLINE( 737)					if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE( 739)						_gthis->deleteNote(note);
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 733)				::haxe::Log_obj::trace(HX_("Overlapping Notes",1a,7e,be,5c),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),733,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
HXLINE( 735)				this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            		}
HXLINE( 745)		if ((::flixel::FlxG_obj::mouse->_middleButton->current == 2)) {
HXLINE( 748)			if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis,::Array< bool >,selected) HXARGC(1)
            				void _hx_run( ::Note note){
            					HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_757_update)
HXLINE( 757)					bool _hx_tmp;
HXDLIN( 757)					if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE( 757)						_hx_tmp = !(selected->__get(0));
            					}
            					else {
HXLINE( 757)						_hx_tmp = false;
            					}
HXDLIN( 757)					if (_hx_tmp) {
HXLINE( 759)						_gthis->selectNote(note);
HXLINE( 760)						selected[0] = true;
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 751)				::haxe::Log_obj::trace(HX_("Overlapping Notes",1a,7e,be,5c),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),751,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
HXLINE( 753)				::Array< bool > selected = ::Array_obj< bool >::fromData( _hx_array_data_9bdde08d_44,1);
HXLINE( 755)				this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_1(_gthis,selected)),null());
            			}
            		}
HXLINE( 767)		bool _hx_tmp3;
HXDLIN( 767)		if (this->holding) {
HXLINE( 767)			 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 767)			if ((_this->current != 1)) {
HXLINE( 767)				_hx_tmp3 = (_this->current == 2);
            			}
            			else {
HXLINE( 767)				_hx_tmp3 = true;
            			}
            		}
            		else {
HXLINE( 767)			_hx_tmp3 = false;
            		}
HXDLIN( 767)		if (_hx_tmp3) {
HXLINE( 769)			Float _hx_tmp = this->getStrumTime(this->dummyArrow->y);
HXDLIN( 769)			Float _hx_tmp1 = (_hx_tmp + this->sectionStartTime());
HXDLIN( 769)			this->setNoteSustain((_hx_tmp1 - ( (Float)(this->curSelectedNote->__get(0)) )));
            		}
            		else {
HXLINE( 774)			this->holding = false;
            		}
HXLINE( 778)		bool _hx_tmp4;
HXDLIN( 778)		bool _hx_tmp5;
HXDLIN( 778)		if (((this->curSection * 16) != this->curStep)) {
HXLINE( 778)			_hx_tmp5 = (::hx::Mod(this->curStep,16) == 0);
            		}
            		else {
HXLINE( 778)			_hx_tmp5 = false;
            		}
HXDLIN( 778)		if (_hx_tmp5) {
HXLINE( 778)			_hx_tmp4 = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            		}
            		else {
HXLINE( 778)			_hx_tmp4 = false;
            		}
HXDLIN( 778)		if (_hx_tmp4) {
HXLINE( 780)			if (((this->curSection * 16) > this->curStep)) {
HXLINE( 781)				this->changeSection((this->curSection - 1),false);
            			}
            			else {
HXLINE( 783)				if (((this->curSection * 16) < this->curStep)) {
HXLINE( 784)					this->changeSection((this->curSection + 1),false);
            				}
            			}
            		}
HXLINE( 788)		bool _hx_tmp6;
HXDLIN( 788)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 788)		if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE( 788)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 788)			_hx_tmp6 = _this->keyManager->checkStatus(90,_this->status);
            		}
            		else {
HXLINE( 788)			_hx_tmp6 = false;
            		}
HXLINE( 792)		bool _hx_tmp7;
HXDLIN( 792)		bool _hx_tmp8;
HXDLIN( 792)		bool _hx_tmp9;
HXDLIN( 792)		if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE( 793)			int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN( 793)			Float _hx_tmp1 = this->gridBG->x;
HXLINE( 792)			_hx_tmp9 = (_hx_tmp < (_hx_tmp1 + this->gridBG->get_width()));
            		}
            		else {
HXLINE( 792)			_hx_tmp9 = false;
            		}
HXDLIN( 792)		if (_hx_tmp9) {
HXLINE( 792)			_hx_tmp8 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            		}
            		else {
HXLINE( 792)			_hx_tmp8 = false;
            		}
HXDLIN( 792)		if (_hx_tmp8) {
HXLINE( 792)			_hx_tmp7 = (::flixel::FlxG_obj::mouse->y < (this->gridBG->y + (this->GRID_SIZE * ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ))));
            		}
            		else {
HXLINE( 792)			_hx_tmp7 = false;
            		}
HXDLIN( 792)		if (_hx_tmp7) {
HXLINE( 797)			this->dummyArrow->set_x(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXLINE( 799)			bool _hx_tmp;
HXDLIN( 799)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 799)			if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE( 799)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 799)				_hx_tmp = _this->keyManager->checkStatus(16,_this->status);
            			}
            			else {
HXLINE( 799)				_hx_tmp = false;
            			}
HXDLIN( 799)			if (_hx_tmp) {
HXLINE( 800)				this->dummyArrow->set_y((( (Float)(::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->y) ) / (( (Float)(this->GRID_SIZE) ) / ( (Float)(4) ))))) ) * (( (Float)(this->GRID_SIZE) ) / ( (Float)(4) ))));
            			}
            			else {
HXLINE( 801)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 801)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 802)					this->dummyArrow->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            				}
            				else {
HXLINE( 803)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 803)					if (_this->keyManager->checkStatus(18,_this->status)) {
HXLINE( 804)						this->dummyArrow->set_y((( (Float)(::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->y) ) / (( (Float)((this->GRID_SIZE * 4)) ) / ( (Float)(3) ))))) ) * (( (Float)((this->GRID_SIZE * 4)) ) / ( (Float)(3) ))));
            					}
            					else {
HXLINE( 805)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 805)						if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE( 806)							this->dummyArrow->set_y((( (Float)(::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->y) ) / (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))))) ) * (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))));
            						}
            						else {
HXLINE( 808)							this->dummyArrow->set_y(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->y) ) / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
            						}
            					}
            				}
            			}
            		}
HXLINE( 811)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 811)		if (_this1->keyManager->checkStatus(13,_this1->status)) {
HXLINE( 813)			::PlayState_obj::SONG = this->_song;
HXLINE( 814)			{
HXLINE( 814)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 814)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE( 815)			{
HXLINE( 815)				 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN( 815)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE( 817)			::flixel::FlxG_obj::save->bind(HX_("data",2a,56,63,42),null());
HXLINE( 819)			bool _hx_tmp;
HXDLIN( 819)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 819)			if (_this2->keyManager->checkStatus(17,_this2->status)) {
HXLINE( 819)				_hx_tmp = (this->curSection > 0);
            			}
            			else {
HXLINE( 819)				_hx_tmp = false;
            			}
HXDLIN( 819)			if (_hx_tmp) {
HXLINE( 820)				::PlayState_obj::sectionStart = true;
HXLINE( 821)				this->changeSection(this->curSection,true);
HXLINE( 822)				::PlayState_obj::sectionStartPoint = this->curSection;
HXLINE( 823)				Float _hx_tmp = ::flixel::FlxG_obj::sound->music->_time;
HXDLIN( 823)				Float _hx_tmp1;
HXDLIN( 823)				if (this->sectionHasBfNotes(this->curSection)) {
HXLINE( 823)					_hx_tmp1 = ::Conductor_obj::crochet;
            				}
            				else {
HXLINE( 823)					_hx_tmp1 = ( (Float)(0) );
            				}
HXDLIN( 823)				::PlayState_obj::sectionStartTime = (_hx_tmp - _hx_tmp1);
            			}
HXLINE( 826)			{
HXLINE( 826)				 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 826)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 826)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 829)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 829)		if (_this2->keyManager->checkStatus(69,_this2->status)) {
HXLINE( 831)			this->changeNoteSustain(::Conductor_obj::stepCrochet);
            		}
HXLINE( 833)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 833)		if (_this3->keyManager->checkStatus(81,_this3->status)) {
HXLINE( 835)			this->changeNoteSustain(-(::Conductor_obj::stepCrochet));
            		}
HXLINE( 854)		if (!(this->typingShit->hasFocus)) {
HXLINE( 856)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 856)			if (_this->keyManager->checkStatus(32,_this->status)) {
HXLINE( 858)				if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 860)					::flixel::FlxG_obj::sound->music->pause();
HXLINE( 861)					this->vocals->pause();
            				}
            				else {
HXLINE( 865)					this->vocals->play(null(),null(),null());
HXLINE( 866)					::flixel::FlxG_obj::sound->music->play(null(),null(),null());
            				}
            			}
HXLINE( 870)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 870)			if (_this1->keyManager->checkStatus(82,_this1->status)) {
HXLINE( 872)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 872)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 873)					this->resetSection(true);
            				}
            				else {
HXLINE( 875)					this->resetSection(null());
            				}
            			}
HXLINE( 878)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 881)				int wheelSpin = ::flixel::FlxG_obj::mouse->wheel;
HXLINE( 883)				::flixel::FlxG_obj::sound->music->pause();
HXLINE( 884)				this->vocals->pause();
HXLINE( 886)				bool _hx_tmp;
HXDLIN( 886)				if ((wheelSpin > 0)) {
HXLINE( 886)					_hx_tmp = (this->strumLine->y < this->gridBG->y);
            				}
            				else {
HXLINE( 886)					_hx_tmp = false;
            				}
HXDLIN( 886)				if (_hx_tmp) {
HXLINE( 887)					wheelSpin = 0;
            				}
HXLINE( 889)				bool _hx_tmp1;
HXDLIN( 889)				if ((wheelSpin < 0)) {
HXLINE( 889)					Float _hx_tmp = this->strumLine->y;
HXDLIN( 889)					Float _hx_tmp2 = this->gridBG2->y;
HXDLIN( 889)					_hx_tmp1 = (_hx_tmp > (_hx_tmp2 + this->gridBG2->get_height()));
            				}
            				else {
HXLINE( 889)					_hx_tmp1 = false;
            				}
HXDLIN( 889)				if (_hx_tmp1) {
HXLINE( 890)					wheelSpin = 0;
            				}
HXLINE( 893)				{
HXLINE( 893)					 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 893)					_g->set_time((_g->_time - ((( (Float)(wheelSpin) ) * ::Conductor_obj::stepCrochet) * ((Float)0.4))));
            				}
HXLINE( 906)				this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            			}
HXLINE( 910)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 910)			if (!(_this2->keyManager->checkStatus(16,_this2->status))) {
HXLINE( 912)				bool _hx_tmp;
HXDLIN( 912)				bool _hx_tmp1;
HXDLIN( 912)				bool _hx_tmp2;
HXDLIN( 912)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 912)				if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE( 912)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 912)					_hx_tmp2 = _this->keyManager->checkStatus(83,_this->status);
            				}
            				else {
HXLINE( 912)					_hx_tmp2 = true;
            				}
HXDLIN( 912)				if (!(_hx_tmp2)) {
HXLINE( 912)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 912)					_hx_tmp1 = _this->keyManager->checkStatus(38,_this->status);
            				}
            				else {
HXLINE( 912)					_hx_tmp1 = true;
            				}
HXDLIN( 912)				if (!(_hx_tmp1)) {
HXLINE( 912)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 912)					_hx_tmp = _this->keyManager->checkStatus(40,_this->status);
            				}
            				else {
HXLINE( 912)					_hx_tmp = true;
            				}
HXDLIN( 912)				if (_hx_tmp) {
HXLINE( 914)					::flixel::FlxG_obj::sound->music->pause();
HXLINE( 915)					this->vocals->pause();
HXLINE( 917)					Float daTime = (( (Float)(1000) ) * ::flixel::FlxG_obj::elapsed);
HXLINE( 919)					bool _hx_tmp;
HXDLIN( 919)					bool _hx_tmp1;
HXDLIN( 919)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 919)					if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE( 919)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 919)						_hx_tmp1 = _this->keyManager->checkStatus(38,_this->status);
            					}
            					else {
HXLINE( 919)						_hx_tmp1 = true;
            					}
HXDLIN( 919)					if (_hx_tmp1) {
HXLINE( 919)						_hx_tmp = (this->strumLine->y > this->gridBG->y);
            					}
            					else {
HXLINE( 919)						_hx_tmp = false;
            					}
HXDLIN( 919)					if (_hx_tmp) {
HXLINE( 921)						 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 921)						_g->set_time((_g->_time - daTime));
            					}
            					else {
HXLINE( 923)						Float _hx_tmp = this->strumLine->y;
HXDLIN( 923)						Float _hx_tmp1 = this->gridBG2->y;
HXDLIN( 923)						if ((_hx_tmp < (_hx_tmp1 + this->gridBG2->get_height()))) {
HXLINE( 924)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 924)							_g->set_time((_g->_time + daTime));
            						}
            					}
HXLINE( 926)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
            			}
            			else {
HXLINE( 931)				bool _hx_tmp;
HXDLIN( 931)				bool _hx_tmp1;
HXDLIN( 931)				bool _hx_tmp2;
HXDLIN( 931)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 931)				if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE( 931)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 931)					_hx_tmp2 = _this->keyManager->checkStatus(83,_this->status);
            				}
            				else {
HXLINE( 931)					_hx_tmp2 = true;
            				}
HXDLIN( 931)				if (!(_hx_tmp2)) {
HXLINE( 931)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 931)					_hx_tmp1 = _this->keyManager->checkStatus(38,_this->status);
            				}
            				else {
HXLINE( 931)					_hx_tmp1 = true;
            				}
HXDLIN( 931)				if (!(_hx_tmp1)) {
HXLINE( 931)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 931)					_hx_tmp = _this->keyManager->checkStatus(40,_this->status);
            				}
            				else {
HXLINE( 931)					_hx_tmp = true;
            				}
HXDLIN( 931)				if (_hx_tmp) {
HXLINE( 933)					::flixel::FlxG_obj::sound->music->pause();
HXLINE( 934)					this->vocals->pause();
HXLINE( 936)					Float daTime = (( (Float)(2500) ) * ::flixel::FlxG_obj::elapsed);
HXLINE( 938)					bool _hx_tmp;
HXDLIN( 938)					bool _hx_tmp1;
HXDLIN( 938)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 938)					if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE( 938)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 938)						_hx_tmp1 = _this->keyManager->checkStatus(38,_this->status);
            					}
            					else {
HXLINE( 938)						_hx_tmp1 = true;
            					}
HXDLIN( 938)					if (_hx_tmp1) {
HXLINE( 938)						_hx_tmp = (this->strumLine->y > this->gridBG->y);
            					}
            					else {
HXLINE( 938)						_hx_tmp = false;
            					}
HXDLIN( 938)					if (_hx_tmp) {
HXLINE( 940)						 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 940)						_g->set_time((_g->_time - daTime));
            					}
            					else {
HXLINE( 942)						Float _hx_tmp = this->strumLine->y;
HXDLIN( 942)						Float _hx_tmp1 = this->gridBG2->y;
HXDLIN( 942)						if ((_hx_tmp < (_hx_tmp1 + this->gridBG2->get_height()))) {
HXLINE( 943)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 943)							_g->set_time((_g->_time + daTime));
            						}
            					}
HXLINE( 945)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
            			}
            		}
HXLINE( 950)		this->_song->__SetField(HX_("bpm",df,be,4a,00),this->tempBpm,::hx::paccDynamic);
HXLINE( 952)		int shiftThing = 1;
HXLINE( 953)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 953)		if (_this4->keyManager->checkStatus(16,_this4->status)) {
HXLINE( 954)			shiftThing = 4;
            		}
HXLINE( 955)		bool _hx_tmp10;
HXDLIN( 955)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 955)		if (!(_this5->keyManager->checkStatus(39,_this5->status))) {
HXLINE( 955)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 955)			_hx_tmp10 = _this->keyManager->checkStatus(68,_this->status);
            		}
            		else {
HXLINE( 955)			_hx_tmp10 = true;
            		}
HXDLIN( 955)		if (_hx_tmp10) {
HXLINE( 956)			this->changeSection((this->curSection + shiftThing),null());
            		}
HXLINE( 957)		bool _hx_tmp11;
HXDLIN( 957)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 957)		if (!(_this6->keyManager->checkStatus(37,_this6->status))) {
HXLINE( 957)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 957)			_hx_tmp11 = _this->keyManager->checkStatus(65,_this->status);
            		}
            		else {
HXLINE( 957)			_hx_tmp11 = true;
            		}
HXDLIN( 957)		if (_hx_tmp11) {
HXLINE( 958)			this->changeSection((this->curSection - shiftThing),null());
            		}
HXLINE( 960)		 ::flixel::text::FlxText _hx_tmp12 = this->bpmTxt;
HXDLIN( 960)		 ::flixel::text::FlxText _hx_tmp13 = this->bpmTxt;
HXDLIN( 960)		::String _hx_tmp14 = (::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(::Conductor_obj::songPosition,0)) + HX_("\t/ ",5a,fd,06,00));
HXDLIN( 960)		::String _hx_tmp15 = ((_hx_tmp14 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(::flixel::FlxG_obj::sound->music->_length,0))) + HX_("\n",0a,00,00,00));
HXDLIN( 960)		::String _hx_tmp16 = ((_hx_tmp15 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::Conductor_obj::songPosition / ( (Float)(1000) )),2))) + HX_("\t/ ",5a,fd,06,00));
HXDLIN( 960)		::String _hx_tmp17 = ((_hx_tmp16 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),2))) + HX_("\nSection: ",61,ca,0c,ad));
HXDLIN( 960)		_hx_tmp12->set_text(_hx_tmp13->set_text((((((_hx_tmp17 + this->curSection) + HX_("\ncurBeat: ",f2,a5,5d,8a)) + this->curBeat) + HX_("\ncurStep: ",48,4d,13,fc)) + this->curStep)));
HXLINE( 969)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 971)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 971)			if (_this->keyManager->checkStatus(72,_this->status)) {
HXLINE( 972)				Float _hx_tmp = this->strumLine->y;
HXDLIN( 972)				Float _hx_tmp1 = (_hx_tmp + this->strumLine->get_height());
HXDLIN( 972)				Float _hx_tmp2 = this->getStrumTime(( (Float)((::Math_obj::floor((_hx_tmp1 / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXDLIN( 972)				Float _hx_tmp3 = (_hx_tmp2 + this->sectionStartTime());
HXDLIN( 972)				int _hx_tmp4;
HXDLIN( 972)				if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 972)					_hx_tmp4 = 4;
            				}
            				else {
HXLINE( 972)					_hx_tmp4 = 0;
            				}
HXDLIN( 972)				this->addNote(_hx_tmp3,_hx_tmp4,null());
            			}
HXLINE( 974)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 974)			if (_this1->keyManager->checkStatus(74,_this1->status)) {
HXLINE( 975)				Float _hx_tmp = this->strumLine->y;
HXDLIN( 975)				Float _hx_tmp1 = (_hx_tmp + this->strumLine->get_height());
HXDLIN( 975)				Float _hx_tmp2 = this->getStrumTime(( (Float)((::Math_obj::floor((_hx_tmp1 / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXDLIN( 975)				Float _hx_tmp3 = (_hx_tmp2 + this->sectionStartTime());
HXDLIN( 975)				int _hx_tmp4;
HXDLIN( 975)				if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 975)					_hx_tmp4 = 4;
            				}
            				else {
HXLINE( 975)					_hx_tmp4 = 0;
            				}
HXDLIN( 975)				this->addNote(_hx_tmp3,(1 + _hx_tmp4),null());
            			}
HXLINE( 977)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 977)			if (_this2->keyManager->checkStatus(75,_this2->status)) {
HXLINE( 978)				Float _hx_tmp = this->strumLine->y;
HXDLIN( 978)				Float _hx_tmp1 = (_hx_tmp + this->strumLine->get_height());
HXDLIN( 978)				Float _hx_tmp2 = this->getStrumTime(( (Float)((::Math_obj::floor((_hx_tmp1 / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXDLIN( 978)				Float _hx_tmp3 = (_hx_tmp2 + this->sectionStartTime());
HXDLIN( 978)				int _hx_tmp4;
HXDLIN( 978)				if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 978)					_hx_tmp4 = 4;
            				}
            				else {
HXLINE( 978)					_hx_tmp4 = 0;
            				}
HXDLIN( 978)				this->addNote(_hx_tmp3,(2 + _hx_tmp4),null());
            			}
HXLINE( 980)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 980)			if (_this3->keyManager->checkStatus(76,_this3->status)) {
HXLINE( 981)				Float _hx_tmp = this->strumLine->y;
HXDLIN( 981)				Float _hx_tmp1 = (_hx_tmp + this->strumLine->get_height());
HXDLIN( 981)				Float _hx_tmp2 = this->getStrumTime(( (Float)((::Math_obj::floor((_hx_tmp1 / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXDLIN( 981)				Float _hx_tmp3 = (_hx_tmp2 + this->sectionStartTime());
HXDLIN( 981)				int _hx_tmp4;
HXDLIN( 981)				if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 981)					_hx_tmp4 = 4;
            				}
            				else {
HXLINE( 981)					_hx_tmp4 = 0;
            				}
HXDLIN( 981)				this->addNote(_hx_tmp3,(3 + _hx_tmp4),null());
            			}
            		}
HXLINE( 985)		bool _hx_tmp18;
HXDLIN( 985)		bool _hx_tmp19;
HXDLIN( 985)		if (!(this->bfClick->checked)) {
HXLINE( 985)			_hx_tmp19 = this->opClick->checked;
            		}
            		else {
HXLINE( 985)			_hx_tmp19 = true;
            		}
HXDLIN( 985)		if (_hx_tmp19) {
HXLINE( 985)			_hx_tmp18 = !(this->justChanged);
            		}
            		else {
HXLINE( 985)			_hx_tmp18 = false;
            		}
HXDLIN( 985)		if (_hx_tmp18) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::Note x){
            				HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_986_update)
HXLINE( 988)				bool _hx_tmp;
HXDLIN( 988)				if ((x->absoluteNumber < 4)) {
HXLINE( 988)					_hx_tmp = ( (bool)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
            				}
            				else {
HXLINE( 988)					_hx_tmp = false;
            				}
HXDLIN( 988)				if (_hx_tmp) {
HXLINE( 989)					x->editorBFNote = true;
            				}
            				else {
HXLINE( 991)					bool _hx_tmp;
HXDLIN( 991)					if ((x->absoluteNumber > 3)) {
HXLINE( 991)						_hx_tmp = !(( (bool)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            					}
            					else {
HXLINE( 991)						_hx_tmp = false;
            					}
HXDLIN( 991)					if (_hx_tmp) {
HXLINE( 992)						x->editorBFNote = true;
            					}
            				}
HXLINE( 995)				bool _hx_tmp1;
HXDLIN( 995)				bool _hx_tmp2;
HXDLIN( 995)				if ((x->y < _gthis->strumLine->y)) {
HXLINE( 995)					_hx_tmp2 = !(x->playedEditorClick);
            				}
            				else {
HXLINE( 995)					_hx_tmp2 = false;
            				}
HXDLIN( 995)				if (_hx_tmp2) {
HXLINE( 995)					_hx_tmp1 = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            				}
            				else {
HXLINE( 995)					_hx_tmp1 = false;
            				}
HXDLIN( 995)				if (_hx_tmp1) {
HXLINE( 996)					bool _hx_tmp;
HXDLIN( 996)					if (x->editorBFNote) {
HXLINE( 996)						_hx_tmp = _gthis->bfClick->checked;
            					}
            					else {
HXLINE( 996)						_hx_tmp = false;
            					}
HXDLIN( 996)					if (_hx_tmp) {
HXLINE( 997)						::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("tick",5d,c3,fc,4c)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
            					}
            					else {
HXLINE( 998)						bool _hx_tmp;
HXDLIN( 998)						if (!(x->editorBFNote)) {
HXLINE( 998)							_hx_tmp = _gthis->opClick->checked;
            						}
            						else {
HXLINE( 998)							_hx_tmp = false;
            						}
HXDLIN( 998)						if (_hx_tmp) {
HXLINE( 999)							::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("tick",5d,c3,fc,4c)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
            						}
            					}
            				}
HXLINE(1002)				bool _hx_tmp3;
HXDLIN(1002)				if ((x->y > _gthis->strumLine->y)) {
HXLINE(1002)					_hx_tmp3 = (x->alpha != ((Float)0.4));
            				}
            				else {
HXLINE(1002)					_hx_tmp3 = false;
            				}
HXDLIN(1002)				if (_hx_tmp3) {
HXLINE(1003)					x->playedEditorClick = false;
            				}
HXLINE(1006)				bool _hx_tmp4;
HXDLIN(1006)				if ((x->y < _gthis->strumLine->y)) {
HXLINE(1006)					_hx_tmp4 = (x->alpha != ((Float)0.4));
            				}
            				else {
HXLINE(1006)					_hx_tmp4 = false;
            				}
HXDLIN(1006)				if (_hx_tmp4) {
HXLINE(1007)					x->playedEditorClick = true;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 986)			this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_2(_gthis)),null());
            		}
HXLINE(1013)		this->justChanged = false;
HXLINE(1015)		this->super::update(elapsed);
            	}


void ChartingState_obj::changeNoteSustain(Float value){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1030_changeNoteSustain)
HXLINE(1031)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1033)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE(1035)				::cpp::VirtualArray _hx_tmp = this->curSelectedNote;
HXDLIN(1035)				int _hx_tmp1 = 2;
HXDLIN(1035)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + value));
HXLINE(1036)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
            			}
            		}
HXLINE(1040)		this->updateNoteUI();
HXLINE(1041)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,changeNoteSustain,(void))

void ChartingState_obj::setNoteSustain(Float value){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1045_setNoteSustain)
HXLINE(1046)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1048)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE(1050)				this->curSelectedNote->set(2,value);
HXLINE(1051)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
            			}
            		}
HXLINE(1055)		this->updateNoteUI();
HXLINE(1056)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,setNoteSustain,(void))

int ChartingState_obj::recalculateSteps(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1060_recalculateSteps)
HXLINE(1061)		 ::Dynamic lastChange =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("stepTime",79,75,25,a0),0)
            			->setFixed(1,HX_("bpm",df,be,4a,00),( (Float)(0) ))
            			->setFixed(2,HX_("songTime",82,2a,d5,3a),( (Float)(0) )));
HXLINE(1067)		{
HXLINE(1067)			int _g = 0;
HXDLIN(1067)			int _g1 = ::Conductor_obj::bpmChangeMap->length;
HXDLIN(1067)			while((_g < _g1)){
HXLINE(1067)				_g = (_g + 1);
HXDLIN(1067)				int i = (_g - 1);
HXLINE(1069)				if (::hx::IsGreater( ::flixel::FlxG_obj::sound->music->_time,::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic) )) {
HXLINE(1070)					lastChange = ::Conductor_obj::bpmChangeMap->__get(i);
            				}
            			}
            		}
HXLINE(1073)		this->curStep = ( (int)((lastChange->__Field(HX_("stepTime",79,75,25,a0),::hx::paccDynamic) + ::Math_obj::floor(((::flixel::FlxG_obj::sound->music->_time - ( (Float)(lastChange->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic)) )) / ::Conductor_obj::stepCrochet)))) );
HXLINE(1074)		this->updateBeat();
HXLINE(1076)		return this->curStep;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,recalculateSteps,return )

void ChartingState_obj::resetSection(::hx::Null< bool >  __o_songBeginning){
            		bool songBeginning = __o_songBeginning.Default(false);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1080_resetSection)
HXLINE(1081)		this->updateGrid();
HXLINE(1083)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1084)		this->vocals->pause();
HXLINE(1087)		 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(1087)		_hx_tmp->set_time(this->sectionStartTime());
HXLINE(1089)		if (songBeginning) {
HXLINE(1091)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(1092)			this->curSection = 0;
            		}
HXLINE(1095)		this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(1096)		this->updateCurStep();
HXLINE(1098)		this->updateGrid();
HXLINE(1099)		this->updateSectionUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,resetSection,(void))

void ChartingState_obj::changeSection(::hx::Null< int >  __o_sec, ::Dynamic __o_updateMusic){
            		int sec = __o_sec.Default(0);
            		 ::Dynamic updateMusic = __o_updateMusic;
            		if (::hx::IsNull(__o_updateMusic)) updateMusic = true;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1103_changeSection)
HXLINE(1104)		this->justChanged = true;
HXLINE(1106)		::haxe::Log_obj::trace((HX_("changing section",72,75,c1,9c) + sec),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1106,HX_("ChartingState",8d,e0,dd,9b),HX_("changeSection",55,aa,ac,be)));
HXLINE(1108)		if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE(1110)			this->curSection = sec;
HXLINE(1112)			this->updateGrid();
HXLINE(1114)			if (( (bool)(updateMusic) )) {
HXLINE(1116)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1117)				this->vocals->pause();
HXLINE(1127)				 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(1127)				_hx_tmp->set_time(this->sectionStartTime());
HXLINE(1128)				this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(1129)				this->updateCurStep();
            			}
HXLINE(1134)			this->updateGrid();
HXLINE(1135)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,changeSection,(void))

void ChartingState_obj::copySection( ::Dynamic __o_sectionNum){
            		 ::Dynamic sectionNum = __o_sectionNum;
            		if (::hx::IsNull(__o_sectionNum)) sectionNum = 1;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1140_copySection)
HXLINE(1141)		int a = this->curSection;
HXDLIN(1141)		int b = ( (int)(sectionNum) );
HXDLIN(1141)		int daSec;
HXDLIN(1141)		if ((a > b)) {
HXLINE(1141)			daSec = a;
            		}
            		else {
HXLINE(1141)			daSec = b;
            		}
HXLINE(1143)		{
HXLINE(1143)			int _g = 0;
HXDLIN(1143)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((daSec - ( (int)(sectionNum) )))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1143)			while((_g < _g1->get_length())){
HXLINE(1143)				 ::Dynamic note = _g1->__get(_g);
HXDLIN(1143)				_g = (_g + 1);
HXLINE(1145)				Float strum = (note->__GetItem(0) + (::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * ( (int)(sectionNum) ))) )));
HXLINE(1147)				::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(3)->init(0,strum)->init(1,note->__GetItem(1))->init(2,note->__GetItem(2));
HXLINE(1148)				( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            			}
            		}
HXLINE(1151)		this->swapSections();
HXLINE(1152)		this->swapSections();
HXLINE(1154)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,copySection,(void))

void ChartingState_obj::updateSectionUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1158_updateSectionUI)
HXLINE(1159)		 ::Dynamic sec =  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection);
HXLINE(1161)		this->stepperLength->set_value(( (Float)(sec->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ));
HXLINE(1162)		this->check_mustHitSection->set_checked(( (bool)(sec->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(1163)		this->check_altAnim->set_checked(( (bool)(sec->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
HXLINE(1164)		this->check_changeBPM->set_checked(( (bool)(sec->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) ));
HXLINE(1165)		this->stepperSectionBPM->set_value(( (Float)(sec->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1167)		this->updateHeads();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSectionUI,(void))

void ChartingState_obj::updateHeads(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1171_updateHeads)
HXLINE(1172)		 ::flixel::animation::FlxAnimationController _hx_tmp = this->leftIcon->animation;
HXDLIN(1172)		_hx_tmp->play(this->player2DropDown->get_selectedLabel(),null(),null(),null());
HXLINE(1173)		 ::flixel::animation::FlxAnimationController _hx_tmp1 = this->rightIcon->animation;
HXDLIN(1173)		_hx_tmp1->play(this->player1DropDown->get_selectedLabel(),null(),null(),null());
HXLINE(1175)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(1177)			this->leftIconBack->set_alpha(( (Float)(0) ));
HXLINE(1178)			this->rightIconBack->set_alpha(( (Float)(1) ));
            		}
            		else {
HXLINE(1182)			this->leftIconBack->set_alpha(( (Float)(1) ));
HXLINE(1183)			this->rightIconBack->set_alpha(( (Float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateHeads,(void))

void ChartingState_obj::updateNoteUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1189_updateNoteUI)
HXDLIN(1189)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1190)			this->stepperSusLength->set_value(( (Float)(this->curSelectedNote->__get(2)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateNoteUI,(void))

void ChartingState_obj::updateGrid(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1194_updateGrid)
HXLINE(1195)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(1197)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(1200)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(1202)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(1205)		bool _hx_tmp;
HXDLIN(1205)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(1205)			_hx_tmp = ::hx::IsGreater(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE(1205)			_hx_tmp = false;
            		}
HXDLIN(1205)		if (_hx_tmp) {
HXLINE(1207)			::Conductor_obj::changeBPM(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE(1213)			Float daBPM = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(1214)			{
HXLINE(1214)				int _g = 0;
HXDLIN(1214)				int _g1 = this->curSection;
HXDLIN(1214)				while((_g < _g1)){
HXLINE(1214)					_g = (_g + 1);
HXDLIN(1214)					int i = (_g - 1);
HXLINE(1215)					if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(1216)						daBPM = ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
            				}
            			}
HXLINE(1217)			::Conductor_obj::changeBPM(daBPM);
            		}
HXLINE(1234)		{
HXLINE(1238)			if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE(1239)				this->addNotesToRender(this->curSection,0);
            			}
HXLINE(1238)			if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((this->curSection + 1)) )) {
HXLINE(1239)				this->addNotesToRender(this->curSection,1);
            			}
HXLINE(1238)			if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((this->curSection + 2)) )) {
HXLINE(1239)				this->addNotesToRender(this->curSection,2);
            			}
HXLINE(1238)			if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((this->curSection + 3)) )) {
HXLINE(1239)				this->addNotesToRender(this->curSection,3);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateGrid,(void))

void ChartingState_obj::addNotesToRender(int curSec, ::Dynamic __o_secOffset){
            		 ::Dynamic secOffset = __o_secOffset;
            		if (::hx::IsNull(__o_secOffset)) secOffset = 0;
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1244_addNotesToRender)
HXLINE(1246)		::cpp::VirtualArray section = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((curSec + secOffset))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXLINE(1247)		::Array< int > noteAdjust = ::Array_obj< int >::fromData( _hx_array_data_9bdde08d_63,8);
HXLINE(1249)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((curSec + secOffset))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(1250)			noteAdjust = ::Array_obj< int >::fromData( _hx_array_data_9bdde08d_64,8);
            		}
HXLINE(1253)		{
HXLINE(1253)			int _g = 0;
HXDLIN(1253)			while((_g < section->get_length())){
HXLINE(1253)				 ::Dynamic i = section->__get(_g);
HXDLIN(1253)				_g = (_g + 1);
HXLINE(1255)				int daNoteInfo = ( (int)(i->__GetItem(1)) );
HXLINE(1256)				Float daStrumTime = ( (Float)(i->__GetItem(0)) );
HXLINE(1257)				Float daSus = ( (Float)(i->__GetItem(2)) );
HXLINE(1259)				 ::Note note =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,::hx::Mod(daNoteInfo,4),true,null(),null());
HXLINE(1260)				note->absoluteNumber = daNoteInfo;
HXLINE(1261)				note->sustainLength = daSus;
HXLINE(1262)				note->setGraphicSize(this->GRID_SIZE,this->GRID_SIZE);
HXLINE(1263)				note->updateHitbox();
HXLINE(1265)				note->set_x(( (Float)(::Math_obj::floor(( (Float)((noteAdjust->__get(daNoteInfo) * this->GRID_SIZE)) ))) ));
HXLINE(1267)				Float _hx_tmp = (daStrumTime - this->sectionStartTime());
HXDLIN(1267)				note->set_y(this->getYfromStrum(::hx::Mod(_hx_tmp,(::Conductor_obj::stepCrochet * ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) )))));
HXLINE(1268)				{
HXLINE(1268)					 ::Note _g1 = note;
HXDLIN(1268)					_g1->set_y((_g1->y + ((this->GRID_SIZE * 16) * ( (int)(secOffset) ))));
            				}
HXLINE(1270)				if (::hx::IsNotEq( secOffset,0 )) {
HXLINE(1271)					note->set_alpha(((Float)0.4));
            				}
HXLINE(1273)				if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1274)					bool _hx_tmp;
HXDLIN(1274)					bool _hx_tmp1;
HXDLIN(1274)					if (::hx::IsEq( daStrumTime,this->curSelectedNote->__get(0) )) {
HXLINE(1274)						_hx_tmp1 = ::hx::IsEq( daNoteInfo,this->curSelectedNote->__get(1) );
            					}
            					else {
HXLINE(1274)						_hx_tmp1 = false;
            					}
HXDLIN(1274)					if (_hx_tmp1) {
HXLINE(1274)						_hx_tmp = ::hx::IsEq( daSus,this->curSelectedNote->__get(2) );
            					}
            					else {
HXLINE(1274)						_hx_tmp = false;
            					}
HXDLIN(1274)					if (_hx_tmp) {
HXLINE(1277)						note->glow();
            					}
            				}
HXLINE(1281)				this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(1283)				if ((daSus > 1)) {
HXLINE(1285)					 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))) - ( (Float)(4) )),(note->y + this->GRID_SIZE),null());
HXLINE(1286)					Float sustainVis1 = (::Conductor_obj::stepCrochet * ( (Float)(16) ));
HXDLIN(1286)					int sustainVis2 = ::Math_obj::floor(::flixel::math::FlxMath_obj::remapToRange(daSus,( (Float)(0) ),sustainVis1,( (Float)(0) ),this->gridBG->get_height()));
HXLINE(1285)					 ::flixel::FlxSprite sustainVis3 = sustainVis->makeGraphic(8,sustainVis2,this->strumColors->__get(::hx::Mod(daNoteInfo,4)),null(),null());
HXLINE(1287)					if (::hx::IsNotEq( secOffset,0 )) {
HXLINE(1288)						sustainVis3->set_alpha(((Float)0.4));
            					}
HXLINE(1289)					this->curRenderedSustains->add(sustainVis3).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,addNotesToRender,(void))

void ChartingState_obj::addSection(::hx::Null< int >  __o_lengthInSteps){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1296_addSection)
HXLINE(1297)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(3,HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0))
            			->setFixed(4,HX_("bpm",df,be,4a,00), ::Dynamic(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(5,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(6,HX_("mustHitSection",3b,5f,87,62),true));
HXLINE(1307)		( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(sec);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addSection,(void))

void ChartingState_obj::selectNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1311_selectNote)
HXLINE(1313)		{
HXLINE(1313)			int _g = 0;
HXDLIN(1313)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1313)			while((_g < _g1->get_length())){
HXLINE(1313)				 ::Dynamic x = _g1->__get(_g);
HXDLIN(1313)				_g = (_g + 1);
HXLINE(1315)				bool _hx_tmp;
HXDLIN(1315)				bool _hx_tmp1;
HXDLIN(1315)				if (this->approxEqual(x->__GetItem(0),note->strumTime,( (Float)(3) ))) {
HXLINE(1315)					_hx_tmp1 = ::hx::IsEq( x->__GetItem(1),note->absoluteNumber );
            				}
            				else {
HXLINE(1315)					_hx_tmp1 = false;
            				}
HXDLIN(1315)				if (_hx_tmp1) {
HXLINE(1315)					_hx_tmp = this->approxEqual(x->__GetItem(2),note->sustainLength,( (Float)(3) ));
            				}
            				else {
HXLINE(1315)					_hx_tmp = false;
            				}
HXDLIN(1315)				if (_hx_tmp) {
HXLINE(1317)					this->curSelectedNote = ( (::cpp::VirtualArray)(x) );
HXLINE(1318)					goto _hx_goto_66;
            				}
            			}
            			_hx_goto_66:;
            		}
HXLINE(1326)		this->updateGrid();
HXLINE(1327)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,selectNote,(void))

void ChartingState_obj::deleteNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1330_deleteNote)
HXLINE(1334)		{
HXLINE(1334)			int _g = 0;
HXDLIN(1334)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1334)			while((_g < _g1->get_length())){
HXLINE(1334)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(1334)				_g = (_g + 1);
HXLINE(1337)				bool _hx_tmp;
HXDLIN(1337)				if (this->approxEqual(i->__GetItem(0),note->strumTime,( (Float)(3) ))) {
HXLINE(1337)					_hx_tmp = ::hx::IsEq( i->__GetItem(1),note->absoluteNumber );
            				}
            				else {
HXLINE(1337)					_hx_tmp = false;
            				}
HXDLIN(1337)				if (_hx_tmp) {
HXLINE(1340)					( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            				}
            			}
            		}
HXLINE(1345)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,deleteNote,(void))

void ChartingState_obj::clearSection(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1349_clearSection)
HXLINE(1350)		 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
HXLINE(1352)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSection,(void))

void ChartingState_obj::clearSectionBF(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1356_clearSectionBF)
HXLINE(1358)		::cpp::VirtualArray newSectionNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1360)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(1361)			int _g = 0;
HXDLIN(1361)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1361)			while((_g < _g1->get_length())){
HXLINE(1361)				 ::Dynamic x = _g1->__get(_g);
HXDLIN(1361)				_g = (_g + 1);
HXLINE(1362)				if (::hx::IsGreater( x->__GetItem(1),3 )) {
HXLINE(1363)					newSectionNotes->push(x);
            				}
            			}
            		}
            		else {
HXLINE(1367)			int _g = 0;
HXDLIN(1367)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1367)			while((_g < _g1->get_length())){
HXLINE(1367)				 ::Dynamic x = _g1->__get(_g);
HXDLIN(1367)				_g = (_g + 1);
HXLINE(1368)				if (::hx::IsLess( x->__GetItem(1),4 )) {
HXLINE(1369)					newSectionNotes->push(x);
            				}
            			}
            		}
HXLINE(1374)		 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),newSectionNotes,::hx::paccDynamic);
HXLINE(1376)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSectionBF,(void))

void ChartingState_obj::clearSectionOpp(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1380_clearSectionOpp)
HXLINE(1382)		::cpp::VirtualArray newSectionNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1384)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(1385)			int _g = 0;
HXDLIN(1385)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1385)			while((_g < _g1->get_length())){
HXLINE(1385)				 ::Dynamic x = _g1->__get(_g);
HXDLIN(1385)				_g = (_g + 1);
HXLINE(1386)				if (::hx::IsLess( x->__GetItem(1),4 )) {
HXLINE(1387)					newSectionNotes->push(x);
            				}
            			}
            		}
            		else {
HXLINE(1391)			int _g = 0;
HXDLIN(1391)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1391)			while((_g < _g1->get_length())){
HXLINE(1391)				 ::Dynamic x = _g1->__get(_g);
HXDLIN(1391)				_g = (_g + 1);
HXLINE(1392)				if (::hx::IsGreater( x->__GetItem(1),3 )) {
HXLINE(1393)					newSectionNotes->push(x);
            				}
            			}
            		}
HXLINE(1398)		 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),newSectionNotes,::hx::paccDynamic);
HXLINE(1400)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSectionOpp,(void))

void ChartingState_obj::clearSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1404_clearSong)
HXLINE(1405)		{
HXLINE(1405)			int _g = 0;
HXDLIN(1405)			int _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(1405)			while((_g < _g1)){
HXLINE(1405)				_g = (_g + 1);
HXDLIN(1405)				int daSection = (_g - 1);
HXLINE(1407)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE(1410)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSong,(void))

void ChartingState_obj::addNote(Float _noteStrum,int _noteData, ::Dynamic __o_skipSectionCheck){
            		 ::Dynamic skipSectionCheck = __o_skipSectionCheck;
            		if (::hx::IsNull(__o_skipSectionCheck)) skipSectionCheck = false;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1414_addNote)
HXLINE(1415)		::Array< int > noteAdjust = ::Array_obj< int >::fromData( _hx_array_data_9bdde08d_81,8);
HXLINE(1417)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(1418)			noteAdjust = ::Array_obj< int >::fromData( _hx_array_data_9bdde08d_82,8);
            		}
HXLINE(1421)		int noteData = noteAdjust->__get(_noteData);
HXLINE(1422)		Float noteStrum = _noteStrum;
HXLINE(1423)		int noteSus = 0;
HXLINE(1425)		if (!(( (bool)(skipSectionCheck) ))) {
HXLINE(1426)			while((noteStrum < this->sectionStartTime())){
HXLINE(1427)				noteStrum = (noteStrum + 1);
            			}
            		}
HXLINE(1432)		( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(3)->init(0,noteStrum)->init(1,noteData)->init(2,noteSus));
HXLINE(1434)		this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length() - 1))) );
HXLINE(1436)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1436)		if (_this->keyManager->checkStatus(9,_this->status)) {
HXLINE(1438)			( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(3)->init(0,noteStrum)->init(1,::hx::Mod((noteData + 4),8))->init(2,noteSus));
            		}
HXLINE(1441)		this->removeDuplicates(this->curSection,this->curSelectedNote);
HXLINE(1443)		::haxe::Log_obj::trace(noteStrum,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1443,HX_("ChartingState",8d,e0,dd,9b),HX_("addNote",b3,5a,47,85)));
HXLINE(1444)		::haxe::Log_obj::trace(this->curSection,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1444,HX_("ChartingState",8d,e0,dd,9b),HX_("addNote",b3,5a,47,85)));
HXLINE(1446)		this->updateGrid();
HXLINE(1447)		this->updateNoteUI();
HXLINE(1449)		this->autosaveSong();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,addNote,(void))

Float ChartingState_obj::getStrumTime(Float yPos){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1454_getStrumTime)
HXDLIN(1454)		Float _hx_tmp = this->gridBG->y;
HXDLIN(1454)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(1454)		Float _hx_tmp2 = (_hx_tmp1 + this->gridBG->get_height());
HXDLIN(1454)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,_hx_tmp,_hx_tmp2,( (Float)(0) ),(( (Float)(16) ) * ::Conductor_obj::stepCrochet));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getStrumTime,return )

Float ChartingState_obj::getYfromStrum(Float strumTime){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1459_getYfromStrum)
HXDLIN(1459)		Float _hx_tmp = (( (Float)(16) ) * ::Conductor_obj::stepCrochet);
HXDLIN(1459)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(1459)		Float _hx_tmp2 = this->gridBG->y;
HXDLIN(1459)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),_hx_tmp,_hx_tmp1,(_hx_tmp2 + this->gridBG->get_height()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getYfromStrum,return )

void ChartingState_obj::loadLevel(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1484_loadLevel)
HXDLIN(1484)		::haxe::Log_obj::trace( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1484,HX_("ChartingState",8d,e0,dd,9b),HX_("loadLevel",7e,61,9a,8d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadLevel,(void))

::cpp::VirtualArray ChartingState_obj::getNotes(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1488_getNotes)
HXLINE(1489)		::cpp::VirtualArray noteData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1491)		{
HXLINE(1491)			int _g = 0;
HXDLIN(1491)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1491)			while((_g < _g1->length)){
HXLINE(1491)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(1491)				_g = (_g + 1);
HXLINE(1493)				noteData->push( ::Dynamic(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)));
            			}
            		}
HXLINE(1496)		return noteData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,getNotes,return )

void ChartingState_obj::loadJson(::String song){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1500_loadJson)
HXLINE(1501)		::String _hx_tmp = song.toLowerCase();
HXDLIN(1501)		::String _hx_tmp1 = (_hx_tmp + this->diffDropFinal);
HXDLIN(1501)		::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp1,song.toLowerCase());
HXLINE(1502)		{
HXLINE(1502)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN(1502)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1502)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadJson,(void))

void ChartingState_obj::loadAutosave(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1506_loadAutosave)
HXLINE(1507)		::PlayState_obj::SONG = ::Song_obj::parseJSONshit(( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("autosave",2c,4e,9a,44),::hx::paccDynamic)) ));
HXLINE(1508)		{
HXLINE(1508)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN(1508)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1508)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadAutosave,(void))

void ChartingState_obj::autosaveSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1512_autosaveSong)
HXLINE(1513)		 ::Dynamic replacer = null();
HXDLIN(1513)		::String space = null();
HXDLIN(1513)		::String _hx_tmp = ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song)),replacer,space);
HXDLIN(1513)		::flixel::FlxG_obj::save->data->__SetField(HX_("autosave",2c,4e,9a,44),_hx_tmp,::hx::paccDynamic);
HXLINE(1516)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,autosaveSong,(void))

void ChartingState_obj::saveLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1520_saveLevel)
HXLINE(1521)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song));
HXLINE(1525)		 ::Dynamic replacer = null();
HXDLIN(1525)		::String space = null();
HXDLIN(1525)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,space);
HXLINE(1527)		bool _hx_tmp;
HXDLIN(1527)		if (::hx::IsNotNull( data )) {
HXLINE(1527)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(1527)			_hx_tmp = false;
            		}
HXDLIN(1527)		if (_hx_tmp) {
HXLINE(1529)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(1530)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(1531)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(1532)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(1533)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(1533)			::String _hx_tmp1 = ::StringTools_obj::trim(data);
HXDLIN(1533)			::String _hx_tmp2 = ( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
HXDLIN(1533)			_hx_tmp->save(_hx_tmp1,((_hx_tmp2 + this->diffDropFinal) + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveLevel,(void))

void ChartingState_obj::saveGenericLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1538_saveGenericLevel)
HXLINE(1539)		 ::Dynamic genericSong =  ::Dynamic(::hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("speed",87,97,69,81), ::Dynamic(this->_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)))
            			->setFixed(1,HX_("player1",b0,09,15,8a), ::Dynamic(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)))
            			->setFixed(2,HX_("player2",b1,09,15,8a), ::Dynamic(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)))
            			->setFixed(3,HX_("notes",41,dc,ca,9f), ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)))
            			->setFixed(4,HX_("validScore",b6,dc,18,c7), ::Dynamic(this->_song->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)))
            			->setFixed(5,HX_("bpm",df,be,4a,00), ::Dynamic(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(6,HX_("needsVoices",be,05,e9,0d), ::Dynamic(this->_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)))
            			->setFixed(7,HX_("song",d5,23,58,4c), ::Dynamic(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))));
HXLINE(1551)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),genericSong));
HXLINE(1555)		 ::Dynamic replacer = null();
HXDLIN(1555)		::String space = null();
HXDLIN(1555)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,space);
HXLINE(1557)		bool _hx_tmp;
HXDLIN(1557)		if (::hx::IsNotNull( data )) {
HXLINE(1557)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(1557)			_hx_tmp = false;
            		}
HXDLIN(1557)		if (_hx_tmp) {
HXLINE(1559)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(1560)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(1561)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(1562)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(1563)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(1563)			::String _hx_tmp1 = ::StringTools_obj::trim(data);
HXDLIN(1563)			::String _hx_tmp2 = ( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
HXDLIN(1563)			_hx_tmp->save(_hx_tmp1,((_hx_tmp2 + this->diffDropFinal) + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveGenericLevel,(void))

void ChartingState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1568_onSaveComplete)
HXLINE(1569)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1570)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1571)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1572)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveComplete,(void))

void ChartingState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1580_onSaveCancel)
HXLINE(1581)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1582)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1583)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1584)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveCancel,(void))

void ChartingState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1591_onSaveError)
HXLINE(1592)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1593)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1594)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1595)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveError,(void))

void ChartingState_obj::swapSections(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1601_swapSections)
HXDLIN(1601)		int _g = 0;
HXDLIN(1601)		int _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN(1601)		while((_g < _g1)){
HXDLIN(1601)			_g = (_g + 1);
HXDLIN(1601)			int i = (_g - 1);
HXLINE(1603)			::Array< int > note = ( (::Array< int >)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE(1604)			note[1] = ::hx::Mod((note->__get(1) + 4),8);
HXLINE(1605)			 ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__SetItem(i,note);
HXLINE(1606)			this->updateGrid();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,swapSections,(void))

bool ChartingState_obj::sectionHasBfNotes(int section){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1610_sectionHasBfNotes)
HXLINE(1611)		::cpp::VirtualArray notes = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXLINE(1612)		bool mustHit = ( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1614)		{
HXLINE(1614)			int _g = 0;
HXDLIN(1614)			while((_g < notes->get_length())){
HXLINE(1614)				 ::Dynamic x = notes->__get(_g);
HXDLIN(1614)				_g = (_g + 1);
HXLINE(1615)				if (mustHit) {
HXLINE(1615)					if (::hx::IsLess( x->__GetItem(1),4 )) {
HXLINE(1615)						return true;
            					}
            				}
            				else {
HXLINE(1616)					if (::hx::IsGreater( x->__GetItem(1),3 )) {
HXLINE(1616)						return true;
            					}
            				}
            			}
            		}
HXLINE(1619)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,sectionHasBfNotes,return )

void ChartingState_obj::removeDuplicates(int section,::cpp::VirtualArray forceNote){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1623_removeDuplicates)
HXLINE(1625)		::cpp::VirtualArray newNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1627)		if (::hx::IsNotNull( forceNote )) {
HXLINE(1628)			newNotes->push(forceNote);
            		}
HXLINE(1631)		{
HXLINE(1631)			int _g = 0;
HXDLIN(1631)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1631)			while((_g < _g1->get_length())){
HXLINE(1631)				 ::Dynamic x = _g1->__get(_g);
HXDLIN(1631)				_g = (_g + 1);
HXLINE(1633)				bool add = true;
HXLINE(1635)				{
HXLINE(1635)					int _g2 = 0;
HXDLIN(1635)					while((_g2 < newNotes->get_length())){
HXLINE(1635)						 ::Dynamic y = newNotes->__get(_g2);
HXDLIN(1635)						_g2 = (_g2 + 1);
HXLINE(1637)						if ((newNotes->get_length() > 0)) {
HXLINE(1638)							bool _hx_tmp;
HXDLIN(1638)							if (this->approxEqual(x->__GetItem(0),y->__GetItem(0),( (Float)(6) ))) {
HXLINE(1638)								_hx_tmp = ::hx::IsEq( x->__GetItem(1),y->__GetItem(1) );
            							}
            							else {
HXLINE(1638)								_hx_tmp = false;
            							}
HXDLIN(1638)							if (_hx_tmp) {
HXLINE(1639)								add = false;
            							}
            						}
            					}
            				}
HXLINE(1645)				if (add) {
HXLINE(1646)					newNotes->push(x);
            				}
            			}
            		}
HXLINE(1650)		 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),newNotes,::hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,removeDuplicates,(void))

bool ChartingState_obj::approxEqual( ::Dynamic x, ::Dynamic y,Float tolerance){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1656_approxEqual)
HXDLIN(1656)		if (::hx::IsLessEq( x,(y + tolerance) )) {
HXDLIN(1656)			return ::hx::IsGreaterEq( x,(( (Float)(y) ) - tolerance) );
            		}
            		else {
HXDLIN(1656)			return false;
            		}
HXDLIN(1656)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,approxEqual,return )

void ChartingState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1662_beatHit)
HXDLIN(1662)		this->super::beatHit();
            	}


int ChartingState_obj::lastSection;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(timeOld,"timeOld");
	HX_MARK_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_MARK_MEMBER_NAME(player1DropDown,"player1DropDown");
	HX_MARK_MEMBER_NAME(player2DropDown,"player2DropDown");
	HX_MARK_MEMBER_NAME(gfDropDown,"gfDropDown");
	HX_MARK_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_MARK_MEMBER_NAME(diffList,"diffList");
	HX_MARK_MEMBER_NAME(diffDropFinal,"diffDropFinal");
	HX_MARK_MEMBER_NAME(bfClick,"bfClick");
	HX_MARK_MEMBER_NAME(opClick,"opClick");
	HX_MARK_MEMBER_NAME(gotoSectionStepper,"gotoSectionStepper");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(amountSteps,"amountSteps");
	HX_MARK_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_MARK_MEMBER_NAME(strumColors,"strumColors");
	HX_MARK_MEMBER_NAME(highlight,"highlight");
	HX_MARK_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(holding,"holding");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(gridBG2,"gridBG2");
	HX_MARK_MEMBER_NAME(gridBGTriple,"gridBGTriple");
	HX_MARK_MEMBER_NAME(gridBGOverlay,"gridBGOverlay");
	HX_MARK_MEMBER_NAME(_song,"_song");
	HX_MARK_MEMBER_NAME(typingShit,"typingShit");
	HX_MARK_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_MARK_MEMBER_NAME(tempBpm,"tempBpm");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(leftIcon,"leftIcon");
	HX_MARK_MEMBER_NAME(rightIcon,"rightIcon");
	HX_MARK_MEMBER_NAME(leftIconBack,"leftIconBack");
	HX_MARK_MEMBER_NAME(rightIconBack,"rightIconBack");
	HX_MARK_MEMBER_NAME(justChanged,"justChanged");
	HX_MARK_MEMBER_NAME(stepperLength,"stepperLength");
	HX_MARK_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_MARK_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_MARK_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_MARK_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_MARK_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_MARK_MEMBER_NAME(updatedSection,"updatedSection");
	HX_MARK_MEMBER_NAME(daSpacing,"daSpacing");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(timeOld,"timeOld");
	HX_VISIT_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_VISIT_MEMBER_NAME(player1DropDown,"player1DropDown");
	HX_VISIT_MEMBER_NAME(player2DropDown,"player2DropDown");
	HX_VISIT_MEMBER_NAME(gfDropDown,"gfDropDown");
	HX_VISIT_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_VISIT_MEMBER_NAME(diffList,"diffList");
	HX_VISIT_MEMBER_NAME(diffDropFinal,"diffDropFinal");
	HX_VISIT_MEMBER_NAME(bfClick,"bfClick");
	HX_VISIT_MEMBER_NAME(opClick,"opClick");
	HX_VISIT_MEMBER_NAME(gotoSectionStepper,"gotoSectionStepper");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(amountSteps,"amountSteps");
	HX_VISIT_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_VISIT_MEMBER_NAME(strumColors,"strumColors");
	HX_VISIT_MEMBER_NAME(highlight,"highlight");
	HX_VISIT_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(holding,"holding");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(gridBG2,"gridBG2");
	HX_VISIT_MEMBER_NAME(gridBGTriple,"gridBGTriple");
	HX_VISIT_MEMBER_NAME(gridBGOverlay,"gridBGOverlay");
	HX_VISIT_MEMBER_NAME(_song,"_song");
	HX_VISIT_MEMBER_NAME(typingShit,"typingShit");
	HX_VISIT_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_VISIT_MEMBER_NAME(tempBpm,"tempBpm");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(leftIcon,"leftIcon");
	HX_VISIT_MEMBER_NAME(rightIcon,"rightIcon");
	HX_VISIT_MEMBER_NAME(leftIconBack,"leftIconBack");
	HX_VISIT_MEMBER_NAME(rightIconBack,"rightIconBack");
	HX_VISIT_MEMBER_NAME(justChanged,"justChanged");
	HX_VISIT_MEMBER_NAME(stepperLength,"stepperLength");
	HX_VISIT_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_VISIT_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_VISIT_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_VISIT_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_VISIT_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_VISIT_MEMBER_NAME(updatedSection,"updatedSection");
	HX_VISIT_MEMBER_NAME(daSpacing,"daSpacing");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"_song") ) { return ::hx::Val( _song ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { return ::hx::Val( bpmTxt ); }
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeOld") ) { return ::hx::Val( timeOld ); }
		if (HX_FIELD_EQ(inName,"bfClick") ) { return ::hx::Val( bfClick ); }
		if (HX_FIELD_EQ(inName,"opClick") ) { return ::hx::Val( opClick ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"holding") ) { return ::hx::Val( holding ); }
		if (HX_FIELD_EQ(inName,"gridBG2") ) { return ::hx::Val( gridBG2 ); }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { return ::hx::Val( tempBpm ); }
		if (HX_FIELD_EQ(inName,"addNote") ) { return ::hx::Val( addNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diffList") ) { return ::hx::Val( diffList ); }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { return ::hx::Val( leftIcon ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNotes") ) { return ::hx::Val( getNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight ); }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { return ::hx::Val( GRID_SIZE ); }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { return ::hx::Val( rightIcon ); }
		if (HX_FIELD_EQ(inName,"addSongUI") ) { return ::hx::Val( addSongUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNoteUI") ) { return ::hx::Val( addNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSong") ) { return ::hx::Val( clearSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { return ::hx::Val( daSpacing ); }
		if (HX_FIELD_EQ(inName,"loadLevel") ) { return ::hx::Val( loadLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return ::hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"gfDropDown") ) { return ::hx::Val( gfDropDown ); }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { return ::hx::Val( bullshitUI ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"typingShit") ) { return ::hx::Val( typingShit ); }
		if (HX_FIELD_EQ(inName,"addToolsUI") ) { return ::hx::Val( addToolsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateUI") ) { return ::hx::Val( generateUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateGrid") ) { return ::hx::Val( updateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSection") ) { return ::hx::Val( addSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNote") ) { return ::hx::Val( selectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteNote") ) { return ::hx::Val( deleteNote_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { return ::hx::Val( amountSteps ); }
		if (HX_FIELD_EQ(inName,"strumColors") ) { return ::hx::Val( strumColors ); }
		if (HX_FIELD_EQ(inName,"justChanged") ) { return ::hx::Val( justChanged ); }
		if (HX_FIELD_EQ(inName,"copySection") ) { return ::hx::Val( copySection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		if (HX_FIELD_EQ(inName,"approxEqual") ) { return ::hx::Val( approxEqual_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gridBGTriple") ) { return ::hx::Val( gridBGTriple ); }
		if (HX_FIELD_EQ(inName,"leftIconBack") ) { return ::hx::Val( leftIconBack ); }
		if (HX_FIELD_EQ(inName,"addSectionUI") ) { return ::hx::Val( addSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetSection") ) { return ::hx::Val( resetSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNoteUI") ) { return ::hx::Val( updateNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSection") ) { return ::hx::Val( clearSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadAutosave") ) { return ::hx::Val( loadAutosave_dyn() ); }
		if (HX_FIELD_EQ(inName,"autosaveSong") ) { return ::hx::Val( autosaveSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapSections") ) { return ::hx::Val( swapSections_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { return ::hx::Val( stageDropDown ); }
		if (HX_FIELD_EQ(inName,"diffDropFinal") ) { return ::hx::Val( diffDropFinal ); }
		if (HX_FIELD_EQ(inName,"gridBGOverlay") ) { return ::hx::Val( gridBGOverlay ); }
		if (HX_FIELD_EQ(inName,"rightIconBack") ) { return ::hx::Val( rightIconBack ); }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { return ::hx::Val( stepperLength ); }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { return ::hx::Val( check_altAnim ); }
		if (HX_FIELD_EQ(inName,"changeSection") ) { return ::hx::Val( changeSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updatedSection") ) { return ::hx::Val( updatedSection ); }
		if (HX_FIELD_EQ(inName,"setNoteSustain") ) { return ::hx::Val( setNoteSustain_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSectionBF") ) { return ::hx::Val( clearSectionBF_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"player1DropDown") ) { return ::hx::Val( player1DropDown ); }
		if (HX_FIELD_EQ(inName,"player2DropDown") ) { return ::hx::Val( player2DropDown ); }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { return ::hx::Val( curSelectedNote ); }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { return ::hx::Val( check_changeBPM ); }
		if (HX_FIELD_EQ(inName,"updateSectionUI") ) { return ::hx::Val( updateSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSectionOpp") ) { return ::hx::Val( clearSectionOpp_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { return ::hx::Val( stepperSusLength ); }
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { return ::hx::Val( sectionStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"recalculateSteps") ) { return ::hx::Val( recalculateSteps_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNotesToRender") ) { return ::hx::Val( addNotesToRender_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveGenericLevel") ) { return ::hx::Val( saveGenericLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeDuplicates") ) { return ::hx::Val( removeDuplicates_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { return ::hx::Val( stepperSectionBPM ); }
		if (HX_FIELD_EQ(inName,"changeNoteSustain") ) { return ::hx::Val( changeNoteSustain_dyn() ); }
		if (HX_FIELD_EQ(inName,"sectionHasBfNotes") ) { return ::hx::Val( sectionHasBfNotes_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gotoSectionStepper") ) { return ::hx::Val( gotoSectionStepper ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { return ::hx::Val( check_mustHitSection ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { outValue = ( lastSection ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_song") ) { _song=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { bpmTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeOld") ) { timeOld=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bfClick") ) { bfClick=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opClick") ) { opClick=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holding") ) { holding=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG2") ) { gridBG2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { tempBpm=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diffList") ) { diffList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { leftIcon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlight") ) { highlight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { rightIcon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { daSpacing=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfDropDown") ) { gfDropDown=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { bullshitUI=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typingShit") ) { typingShit=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { amountSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumColors") ) { strumColors=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"justChanged") ) { justChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gridBGTriple") ) { gridBGTriple=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftIconBack") ) { leftIconBack=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { stageDropDown=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffDropFinal") ) { diffDropFinal=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBGOverlay") ) { gridBGOverlay=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightIconBack") ) { rightIconBack=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { stepperLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { check_altAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updatedSection") ) { updatedSection=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"player1DropDown") ) { player1DropDown=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player2DropDown") ) { player2DropDown=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { curSelectedNote=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { check_changeBPM=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { stepperSusLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { stepperSectionBPM=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gotoSectionStepper") ) { gotoSectionStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { check_mustHitSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { lastSection=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("timeOld",9a,ca,de,d8));
	outFields->push(HX_("bpmTxt",d1,bc,26,f4));
	outFields->push(HX_("player1DropDown",01,96,78,6b));
	outFields->push(HX_("player2DropDown",02,ff,69,3e));
	outFields->push(HX_("gfDropDown",70,6d,e0,2b));
	outFields->push(HX_("stageDropDown",0f,b5,6b,4d));
	outFields->push(HX_("diffList",03,8b,d4,1b));
	outFields->push(HX_("diffDropFinal",02,e8,24,11));
	outFields->push(HX_("bfClick",e4,2f,2a,8f));
	outFields->push(HX_("opClick",67,d3,52,ab));
	outFields->push(HX_("gotoSectionStepper",af,82,63,b5));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("amountSteps",af,2a,91,a5));
	outFields->push(HX_("bullshitUI",67,a9,a3,d3));
	outFields->push(HX_("strumColors",d9,33,f6,c8));
	outFields->push(HX_("highlight",34,56,00,ed));
	outFields->push(HX_("GRID_SIZE",1a,98,25,c9));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("holding",03,55,05,b8));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("gridBG2",c7,7b,30,07));
	outFields->push(HX_("gridBGTriple",09,9b,c3,e2));
	outFields->push(HX_("gridBGOverlay",c5,44,9e,05));
	outFields->push(HX_("_song",b4,3f,69,ff));
	outFields->push(HX_("typingShit",d7,01,ec,6a));
	outFields->push(HX_("curSelectedNote",8d,49,f4,47));
	outFields->push(HX_("tempBpm",2b,d8,ac,46));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("leftIcon",20,2b,ae,4c));
	outFields->push(HX_("rightIcon",75,3d,79,b0));
	outFields->push(HX_("leftIconBack",67,41,5c,0f));
	outFields->push(HX_("rightIconBack",3c,a2,27,dc));
	outFields->push(HX_("justChanged",28,ec,8c,85));
	outFields->push(HX_("stepperLength",d7,b0,3a,4b));
	outFields->push(HX_("check_mustHitSection",12,30,fc,78));
	outFields->push(HX_("check_changeBPM",d8,2d,43,fc));
	outFields->push(HX_("stepperSectionBPM",6b,ba,b7,95));
	outFields->push(HX_("check_altAnim",23,ee,53,2e));
	outFields->push(HX_("stepperSusLength",06,e6,fc,95));
	outFields->push(HX_("updatedSection",ea,f8,55,de));
	outFields->push(HX_("daSpacing",86,9d,76,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(ChartingState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,timeOld),HX_("timeOld",9a,ca,de,d8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,bpmTxt),HX_("bpmTxt",d1,bc,26,f4)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,player1DropDown),HX_("player1DropDown",01,96,78,6b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,player2DropDown),HX_("player2DropDown",02,ff,69,3e)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,gfDropDown),HX_("gfDropDown",70,6d,e0,2b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,stageDropDown),HX_("stageDropDown",0f,b5,6b,4d)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ChartingState_obj,diffList),HX_("diffList",03,8b,d4,1b)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,diffDropFinal),HX_("diffDropFinal",02,e8,24,11)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,bfClick),HX_("bfClick",e4,2f,2a,8f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,opClick),HX_("opClick",67,d3,52,ab)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,gotoSectionStepper),HX_("gotoSectionStepper",af,82,63,b5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,amountSteps),HX_("amountSteps",af,2a,91,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,bullshitUI),HX_("bullshitUI",67,a9,a3,d3)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ChartingState_obj,strumColors),HX_("strumColors",d9,33,f6,c8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,highlight),HX_("highlight",34,56,00,ed)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,GRID_SIZE),HX_("GRID_SIZE",1a,98,25,c9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,holding),HX_("holding",03,55,05,b8)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBG2),HX_("gridBG2",c7,7b,30,07)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBGTriple),HX_("gridBGTriple",09,9b,c3,e2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBGOverlay),HX_("gridBGOverlay",c5,44,9e,05)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,_song),HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(int)offsetof(ChartingState_obj,typingShit),HX_("typingShit",d7,01,ec,6a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,curSelectedNote),HX_("curSelectedNote",8d,49,f4,47)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,tempBpm),HX_("tempBpm",2b,d8,ac,46)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(ChartingState_obj,leftIcon),HX_("leftIcon",20,2b,ae,4c)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(ChartingState_obj,rightIcon),HX_("rightIcon",75,3d,79,b0)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,leftIconBack),HX_("leftIconBack",67,41,5c,0f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,rightIconBack),HX_("rightIconBack",3c,a2,27,dc)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,justChanged),HX_("justChanged",28,ec,8c,85)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperLength),HX_("stepperLength",d7,b0,3a,4b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mustHitSection),HX_("check_mustHitSection",12,30,fc,78)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_changeBPM),HX_("check_changeBPM",d8,2d,43,fc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSectionBPM),HX_("stepperSectionBPM",6b,ba,b7,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_altAnim),HX_("check_altAnim",23,ee,53,2e)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSusLength),HX_("stepperSusLength",06,e6,fc,95)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,updatedSection),HX_("updatedSection",ea,f8,55,de)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,daSpacing),HX_("daSpacing",86,9d,76,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &ChartingState_obj::lastSection,HX_("lastSection",2f,ba,83,12)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("_file",5b,ea,cc,f6),
	HX_("UI_box",60,07,ac,43),
	HX_("curSection",45,58,c1,68),
	HX_("timeOld",9a,ca,de,d8),
	HX_("bpmTxt",d1,bc,26,f4),
	HX_("player1DropDown",01,96,78,6b),
	HX_("player2DropDown",02,ff,69,3e),
	HX_("gfDropDown",70,6d,e0,2b),
	HX_("stageDropDown",0f,b5,6b,4d),
	HX_("diffList",03,8b,d4,1b),
	HX_("diffDropFinal",02,e8,24,11),
	HX_("bfClick",e4,2f,2a,8f),
	HX_("opClick",67,d3,52,ab),
	HX_("gotoSectionStepper",af,82,63,b5),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSong",75,95,6d,b7),
	HX_("amountSteps",af,2a,91,a5),
	HX_("bullshitUI",67,a9,a3,d3),
	HX_("strumColors",d9,33,f6,c8),
	HX_("highlight",34,56,00,ed),
	HX_("GRID_SIZE",1a,98,25,c9),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("holding",03,55,05,b8),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("gridBG",0b,ce,23,18),
	HX_("gridBG2",c7,7b,30,07),
	HX_("gridBGTriple",09,9b,c3,e2),
	HX_("gridBGOverlay",c5,44,9e,05),
	HX_("_song",b4,3f,69,ff),
	HX_("typingShit",d7,01,ec,6a),
	HX_("curSelectedNote",8d,49,f4,47),
	HX_("tempBpm",2b,d8,ac,46),
	HX_("vocals",5e,10,51,59),
	HX_("leftIcon",20,2b,ae,4c),
	HX_("rightIcon",75,3d,79,b0),
	HX_("leftIconBack",67,41,5c,0f),
	HX_("rightIconBack",3c,a2,27,dc),
	HX_("justChanged",28,ec,8c,85),
	HX_("create",fc,66,0f,7c),
	HX_("addSongUI",6a,02,ad,e5),
	HX_("addToolsUI",0e,05,16,d2),
	HX_("stepperLength",d7,b0,3a,4b),
	HX_("check_mustHitSection",12,30,fc,78),
	HX_("check_changeBPM",d8,2d,43,fc),
	HX_("stepperSectionBPM",6b,ba,b7,95),
	HX_("check_altAnim",23,ee,53,2e),
	HX_("addSectionUI",18,75,a5,87),
	HX_("stepperSusLength",06,e6,fc,95),
	HX_("addNoteUI",c7,f7,d9,e9),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("generateUI",c9,a0,60,4e),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("updatedSection",ea,f8,55,de),
	HX_("sectionStartTime",ea,ba,df,45),
	HX_("update",09,86,05,87),
	HX_("changeNoteSustain",41,6b,40,3c),
	HX_("setNoteSustain",4f,0a,27,55),
	HX_("recalculateSteps",54,5b,74,a1),
	HX_("resetSection",d6,4b,b6,cf),
	HX_("changeSection",55,aa,ac,be),
	HX_("copySection",b0,82,ec,b3),
	HX_("updateSectionUI",30,24,dc,d7),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("updateNoteUI",af,69,79,31),
	HX_("updateGrid",6f,c1,20,fd),
	HX_("addNotesToRender",b1,31,9b,84),
	HX_("addSection",c4,31,62,c5),
	HX_("selectNote",0e,8d,a5,b7),
	HX_("deleteNote",bd,f5,56,9c),
	HX_("clearSection",d8,b7,56,39),
	HX_("clearSectionBF",9c,97,56,46),
	HX_("clearSectionOpp",37,13,78,45),
	HX_("clearSong",02,0c,19,c0),
	HX_("addNote",b3,5a,47,85),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("daSpacing",86,9d,76,71),
	HX_("loadLevel",7e,61,9a,8d),
	HX_("getNotes",cb,eb,a1,ff),
	HX_("loadJson",6e,13,08,b7),
	HX_("loadAutosave",72,3a,03,fe),
	HX_("autosaveSong",21,24,ac,67),
	HX_("saveLevel",07,1d,10,01),
	HX_("saveGenericLevel",ca,5e,8f,3d),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	HX_("swapSections",a1,54,16,2f),
	HX_("sectionHasBfNotes",e8,b1,e1,22),
	HX_("removeDuplicates",ec,55,cf,0c),
	HX_("approxEqual",3a,e1,41,bf),
	HX_("beatHit",7d,ea,04,74),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("lastSection",2f,ba,83,12),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ChartingState",8d,e0,dd,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_52_boot)
HXDLIN(  52)		lastSection = 0;
            	}
}

