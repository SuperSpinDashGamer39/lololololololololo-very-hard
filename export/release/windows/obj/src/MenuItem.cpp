// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_ImageCache
#include <ImageCache.h>
#endif
#ifndef INCLUDED_MenuItem
#include <MenuItem.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a2a86a23843e0eb5_8_new,"MenuItem","new",0x11397064,"MenuItem.new","MenuItem.hx",8,0x14bda78c)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a86a23843e0eb5_45_update,"MenuItem","update",0x1808c085,"MenuItem.update","MenuItem.hx",45,0x14bda78c)

void MenuItem_obj::__construct(Float x,Float y,::hx::Null< int >  __o_weekNum){
            		int weekNum = __o_weekNum.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_a2a86a23843e0eb5_8_new)
HXLINE(  10)		this->targetY = ((Float)0);
HXLINE(  15)		super::__construct(x,y,null());
HXLINE(  17)		::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("campaign_menu_UI_assets",fd,f3,ba,6a)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  17)		 ::Dynamic tex;
HXDLIN(  17)		if (::ImageCache_obj::exists(data)) {
HXLINE(  17)			tex = ::ImageCache_obj::get(data);
            		}
            		else {
HXLINE(  17)			tex = data;
            		}
HXDLIN(  17)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,((HX_("assets/images/",ab,47,cb,9f) + HX_("campaign_menu_UI_assets",fd,f3,ba,6a)) + HX_(".xml",69,3e,c3,1e)));
HXLINE(  19)		this->week =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  20)		this->week->set_frames(tex1);
HXLINE(  23)		this->week->animation->addByPrefix(HX_("week0",bc,95,be,c7),HX_("tutorial selected",1d,d7,30,55),24,null(),null(),null());
HXLINE(  24)		this->week->animation->addByPrefix(HX_("week1",bd,95,be,c7),HX_("WEEK1 select",ff,06,57,44),24,null(),null(),null());
HXLINE(  25)		this->week->animation->addByPrefix(HX_("week2",be,95,be,c7),HX_("week2 select",1e,b1,c0,38),24,null(),null(),null());
HXLINE(  26)		this->week->animation->addByPrefix(HX_("week3",bf,95,be,c7),HX_("Week 3 press",ca,8b,1f,3b),24,null(),null(),null());
HXLINE(  27)		this->week->animation->addByPrefix(HX_("week4",c0,95,be,c7),HX_("Week 4 press",8b,02,b5,64),24,null(),null(),null());
HXLINE(  28)		this->week->animation->addByPrefix(HX_("week5",c1,95,be,c7),HX_("week 5",09,61,04,ff),24,null(),null(),null());
HXLINE(  29)		this->week->animation->addByPrefix(HX_("week6",c2,95,be,c7),HX_("Week 6",2a,d5,98,33),24,null(),null(),null());
HXLINE(  30)		this->week->animation->addByPrefix(HX_("week7",c3,95,be,c7),HX_("tutorial selected",1d,d7,30,55),24,null(),null(),null());
HXLINE(  31)		this->week->animation->addByPrefix(HX_("week8",c4,95,be,c7),HX_("WEEK1 select",ff,06,57,44),24,null(),null(),null());
HXLINE(  32)		this->week->animation->addByPrefix(HX_("week9",c5,95,be,c7),HX_("week2 select",1e,b1,c0,38),24,null(),null(),null());
HXLINE(  33)		this->week->animation->addByPrefix(HX_("week10",d3,6f,04,ff),HX_("Week 3 press",ca,8b,1f,3b),24,null(),null(),null());
HXLINE(  34)		this->week->animation->addByPrefix(HX_("week11",d4,6f,04,ff),HX_("Week 4 press",8b,02,b5,64),24,null(),null(),null());
HXLINE(  35)		this->week->animation->addByPrefix(HX_("week12",d5,6f,04,ff),HX_("week 5",09,61,04,ff),24,null(),null(),null());
HXLINE(  36)		this->week->animation->addByPrefix(HX_("week13",d6,6f,04,ff),HX_("Week 6",2a,d5,98,33),24,null(),null(),null());
HXLINE(  37)		this->add(this->week);
HXLINE(  39)		this->week->animation->play((HX_("week",f4,5f,f5,4e) + weekNum),null(),null(),null());
HXLINE(  40)		{
HXLINE(  40)			 ::flixel::animation::FlxAnimationController _this = this->week->animation;
HXDLIN(  40)			if (::hx::IsNotNull( _this->_curAnim )) {
HXLINE(  40)				_this->_curAnim->pause();
            			}
            		}
HXLINE(  41)		this->week->updateHitbox();
            	}

Dynamic MenuItem_obj::__CreateEmpty() { return new MenuItem_obj; }

void *MenuItem_obj::_hx_vtable = 0;

Dynamic MenuItem_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuItem_obj > _hx_result = new MenuItem_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MenuItem_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f356bfa) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x2f356bfa;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void MenuItem_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_a2a86a23843e0eb5_45_update)
HXLINE(  46)		this->super::update(elapsed);
HXLINE(  47)		Float a = this->y;
HXDLIN(  47)		this->set_y((a + (((Float)0.17) * (((this->targetY * ( (Float)(120) )) + 480) - a))));
            	}



::hx::ObjectPtr< MenuItem_obj > MenuItem_obj::__new(Float x,Float y,::hx::Null< int >  __o_weekNum) {
	::hx::ObjectPtr< MenuItem_obj > __this = new MenuItem_obj();
	__this->__construct(x,y,__o_weekNum);
	return __this;
}

::hx::ObjectPtr< MenuItem_obj > MenuItem_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,::hx::Null< int >  __o_weekNum) {
	MenuItem_obj *__this = (MenuItem_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuItem_obj), true, "MenuItem"));
	*(void **)__this = MenuItem_obj::_hx_vtable;
	__this->__construct(x,y,__o_weekNum);
	return __this;
}

MenuItem_obj::MenuItem_obj()
{
}

void MenuItem_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuItem);
	HX_MARK_MEMBER_NAME(targetY,"targetY");
	HX_MARK_MEMBER_NAME(week,"week");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuItem_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(targetY,"targetY");
	HX_VISIT_MEMBER_NAME(week,"week");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuItem_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"week") ) { return ::hx::Val( week ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"targetY") ) { return ::hx::Val( targetY ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MenuItem_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"week") ) { week=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"targetY") ) { targetY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuItem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("targetY",e8,f3,67,88));
	outFields->push(HX_("week",f4,5f,f5,4e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuItem_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(MenuItem_obj,targetY),HX_("targetY",e8,f3,67,88)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuItem_obj,week),HX_("week",f4,5f,f5,4e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MenuItem_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuItem_obj_sMemberFields[] = {
	HX_("targetY",e8,f3,67,88),
	HX_("week",f4,5f,f5,4e),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class MenuItem_obj::__mClass;

void MenuItem_obj::__register()
{
	MenuItem_obj _hx_dummy;
	MenuItem_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuItem",72,ae,e0,25);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuItem_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuItem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuItem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuItem_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

