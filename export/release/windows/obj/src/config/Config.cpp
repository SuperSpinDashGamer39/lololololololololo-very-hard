// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_config_Config
#include <config/Config.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0213d07a36364b69_21_resetSettings,"config.Config","resetSettings",0x44236872,"config.Config.resetSettings","config/Config.hx",21,0x928c104f)
HX_LOCAL_STACK_FRAME(_hx_pos_0213d07a36364b69_38_reload,"config.Config","reload",0x427ac0b9,"config.Config.reload","config/Config.hx",38,0x928c104f)
HX_LOCAL_STACK_FRAME(_hx_pos_0213d07a36364b69_65_write,"config.Config","write",0xae30cb7f,"config.Config.write","config/Config.hx",65,0x928c104f)
HX_LOCAL_STACK_FRAME(_hx_pos_0213d07a36364b69_86_configCheck,"config.Config","configCheck",0xf2320946,"config.Config.configCheck","config/Config.hx",86,0x928c104f)
namespace config{

void Config_obj::__construct() { }

Dynamic Config_obj::__CreateEmpty() { return new Config_obj; }

void *Config_obj::_hx_vtable = 0;

Dynamic Config_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Config_obj > _hx_result = new Config_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Config_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1da6f924;
}

Float Config_obj::offset;

::String Config_obj::accuracy;

Float Config_obj::healthMultiplier;

Float Config_obj::healthDrainMultiplier;

int Config_obj::comboType;

bool Config_obj::downscroll;

bool Config_obj::noteGlow;

int Config_obj::ghostTapType;

bool Config_obj::noFpsCap;

int Config_obj::controllerScheme;

int Config_obj::bgDim;

void Config_obj::resetSettings(){
            	HX_STACKFRAME(&_hx_pos_0213d07a36364b69_21_resetSettings)
HXLINE(  23)		::flixel::FlxG_obj::save->data->__SetField(HX_("offset",93,97,3f,60),((Float)0.0),::hx::paccDynamic);
HXLINE(  24)		::flixel::FlxG_obj::save->data->__SetField(HX_("accuracy",39,06,c5,ff),HX_("simple",32,04,7f,b8),::hx::paccDynamic);
HXLINE(  25)		::flixel::FlxG_obj::save->data->__SetField(HX_("healthMultiplier",3d,6f,9b,00),((Float)1.0),::hx::paccDynamic);
HXLINE(  26)		::flixel::FlxG_obj::save->data->__SetField(HX_("healthDrainMultiplier",1d,fc,54,82),((Float)1.0),::hx::paccDynamic);
HXLINE(  27)		::flixel::FlxG_obj::save->data->__SetField(HX_("comboType",28,86,34,65),0,::hx::paccDynamic);
HXLINE(  28)		::flixel::FlxG_obj::save->data->__SetField(HX_("downscroll",ef,45,d4,4f),false,::hx::paccDynamic);
HXLINE(  29)		::flixel::FlxG_obj::save->data->__SetField(HX_("noteGlow",9f,73,9a,53),false,::hx::paccDynamic);
HXLINE(  30)		::flixel::FlxG_obj::save->data->__SetField(HX_("ghostTapType",2e,97,64,fe),0,::hx::paccDynamic);
HXLINE(  31)		::flixel::FlxG_obj::save->data->__SetField(HX_("noFpsCap",ca,76,8e,61),true,::hx::paccDynamic);
HXLINE(  32)		::flixel::FlxG_obj::save->data->__SetField(HX_("controllerScheme",e1,89,2a,b2),0,::hx::paccDynamic);
HXLINE(  33)		::config::Config_obj::reload();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Config_obj,resetSettings,(void))

void Config_obj::reload(){
            	HX_STACKFRAME(&_hx_pos_0213d07a36364b69_38_reload)
HXLINE(  39)		::config::Config_obj::offset = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) );
HXLINE(  40)		::config::Config_obj::accuracy = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("accuracy",39,06,c5,ff),::hx::paccDynamic)) );
HXLINE(  41)		::config::Config_obj::healthMultiplier = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("healthMultiplier",3d,6f,9b,00),::hx::paccDynamic)) );
HXLINE(  42)		::config::Config_obj::healthDrainMultiplier = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("healthDrainMultiplier",1d,fc,54,82),::hx::paccDynamic)) );
HXLINE(  43)		::config::Config_obj::comboType = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("comboType",28,86,34,65),::hx::paccDynamic)) );
HXLINE(  44)		::config::Config_obj::downscroll = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) );
HXLINE(  45)		::config::Config_obj::noteGlow = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("noteGlow",9f,73,9a,53),::hx::paccDynamic)) );
HXLINE(  46)		::config::Config_obj::ghostTapType = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("ghostTapType",2e,97,64,fe),::hx::paccDynamic)) );
HXLINE(  47)		::config::Config_obj::noFpsCap = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("noFpsCap",ca,76,8e,61),::hx::paccDynamic)) );
HXLINE(  48)		::config::Config_obj::controllerScheme = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("controllerScheme",e1,89,2a,b2),::hx::paccDynamic)) );
HXLINE(  49)		::config::Config_obj::bgDim = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("bgDim",83,c8,8d,b1),::hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Config_obj,reload,(void))

void Config_obj::write(Float offsetW,::String accuracyW,Float healthMultiplierW,Float healthDrainMultiplierW,int comboTypeW,bool downscrollW,bool noteGlowW,int ghostTapTypeW,bool noFpsCapW,int controllerSchemeW,int bgDimW){
            	HX_STACKFRAME(&_hx_pos_0213d07a36364b69_65_write)
HXLINE(  67)		::flixel::FlxG_obj::save->data->__SetField(HX_("offset",93,97,3f,60),offsetW,::hx::paccDynamic);
HXLINE(  68)		::flixel::FlxG_obj::save->data->__SetField(HX_("accuracy",39,06,c5,ff),accuracyW,::hx::paccDynamic);
HXLINE(  69)		::flixel::FlxG_obj::save->data->__SetField(HX_("healthMultiplier",3d,6f,9b,00),healthMultiplierW,::hx::paccDynamic);
HXLINE(  70)		::flixel::FlxG_obj::save->data->__SetField(HX_("healthDrainMultiplier",1d,fc,54,82),healthDrainMultiplierW,::hx::paccDynamic);
HXLINE(  71)		::flixel::FlxG_obj::save->data->__SetField(HX_("comboType",28,86,34,65),comboTypeW,::hx::paccDynamic);
HXLINE(  72)		::flixel::FlxG_obj::save->data->__SetField(HX_("downscroll",ef,45,d4,4f),downscrollW,::hx::paccDynamic);
HXLINE(  73)		::flixel::FlxG_obj::save->data->__SetField(HX_("noteGlow",9f,73,9a,53),noteGlowW,::hx::paccDynamic);
HXLINE(  74)		::flixel::FlxG_obj::save->data->__SetField(HX_("ghostTapType",2e,97,64,fe),ghostTapTypeW,::hx::paccDynamic);
HXLINE(  75)		::flixel::FlxG_obj::save->data->__SetField(HX_("noFpsCap",ca,76,8e,61),noFpsCapW,::hx::paccDynamic);
HXLINE(  76)		::flixel::FlxG_obj::save->data->__SetField(HX_("controllerScheme",e1,89,2a,b2),controllerSchemeW,::hx::paccDynamic);
HXLINE(  77)		::flixel::FlxG_obj::save->data->__SetField(HX_("bgDim",83,c8,8d,b1),bgDimW,::hx::paccDynamic);
HXLINE(  79)		::flixel::FlxG_obj::save->flush(null(),null());
HXLINE(  81)		::config::Config_obj::reload();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(Config_obj,write,(void))

void Config_obj::configCheck(){
            	HX_STACKFRAME(&_hx_pos_0213d07a36364b69_86_configCheck)
HXLINE(  87)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic) )) {
HXLINE(  88)			::flixel::FlxG_obj::save->data->__SetField(HX_("offset",93,97,3f,60),((Float)0.0),::hx::paccDynamic);
            		}
HXLINE(  89)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracy",39,06,c5,ff),::hx::paccDynamic) )) {
HXLINE(  90)			::flixel::FlxG_obj::save->data->__SetField(HX_("accuracy",39,06,c5,ff),HX_("simple",32,04,7f,b8),::hx::paccDynamic);
            		}
HXLINE(  91)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("healthMultiplier",3d,6f,9b,00),::hx::paccDynamic) )) {
HXLINE(  92)			::flixel::FlxG_obj::save->data->__SetField(HX_("healthMultiplier",3d,6f,9b,00),((Float)1.0),::hx::paccDynamic);
            		}
HXLINE(  93)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("healthDrainMultiplier",1d,fc,54,82),::hx::paccDynamic) )) {
HXLINE(  94)			::flixel::FlxG_obj::save->data->__SetField(HX_("healthDrainMultiplier",1d,fc,54,82),((Float)1.0),::hx::paccDynamic);
            		}
HXLINE(  95)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("comboType",28,86,34,65),::hx::paccDynamic) )) {
HXLINE(  96)			::flixel::FlxG_obj::save->data->__SetField(HX_("comboType",28,86,34,65),0,::hx::paccDynamic);
            		}
HXLINE(  97)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic) )) {
HXLINE(  98)			::flixel::FlxG_obj::save->data->__SetField(HX_("downscroll",ef,45,d4,4f),false,::hx::paccDynamic);
            		}
HXLINE(  99)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("noteGlow",9f,73,9a,53),::hx::paccDynamic) )) {
HXLINE( 100)			::flixel::FlxG_obj::save->data->__SetField(HX_("noteGlow",9f,73,9a,53),false,::hx::paccDynamic);
            		}
HXLINE( 101)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("ghostTapType",2e,97,64,fe),::hx::paccDynamic) )) {
HXLINE( 102)			::flixel::FlxG_obj::save->data->__SetField(HX_("ghostTapType",2e,97,64,fe),0,::hx::paccDynamic);
            		}
HXLINE( 103)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("noFpsCap",ca,76,8e,61),::hx::paccDynamic) )) {
HXLINE( 104)			::flixel::FlxG_obj::save->data->__SetField(HX_("noFpsCap",ca,76,8e,61),true,::hx::paccDynamic);
            		}
HXLINE( 105)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("controllerScheme",e1,89,2a,b2),::hx::paccDynamic) )) {
HXLINE( 106)			::flixel::FlxG_obj::save->data->__SetField(HX_("controllerScheme",e1,89,2a,b2),0,::hx::paccDynamic);
            		}
HXLINE( 107)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("bgDim",83,c8,8d,b1),::hx::paccDynamic) )) {
HXLINE( 108)			::flixel::FlxG_obj::save->data->__SetField(HX_("bgDim",83,c8,8d,b1),0,::hx::paccDynamic);
            		}
HXLINE( 110)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("ee1",d1,fb,4c,00),::hx::paccDynamic) )) {
HXLINE( 111)			::flixel::FlxG_obj::save->data->__SetField(HX_("ee1",d1,fb,4c,00),false,::hx::paccDynamic);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Config_obj,configCheck,(void))


Config_obj::Config_obj()
{
}

bool Config_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bgDim") ) { outValue = ( bgDim ); return true; }
		if (HX_FIELD_EQ(inName,"write") ) { outValue = write_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { outValue = ( offset ); return true; }
		if (HX_FIELD_EQ(inName,"reload") ) { outValue = reload_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { outValue = ( accuracy ); return true; }
		if (HX_FIELD_EQ(inName,"noteGlow") ) { outValue = ( noteGlow ); return true; }
		if (HX_FIELD_EQ(inName,"noFpsCap") ) { outValue = ( noFpsCap ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"comboType") ) { outValue = ( comboType ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"downscroll") ) { outValue = ( downscroll ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"configCheck") ) { outValue = configCheck_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ghostTapType") ) { outValue = ( ghostTapType ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resetSettings") ) { outValue = resetSettings_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"healthMultiplier") ) { outValue = ( healthMultiplier ); return true; }
		if (HX_FIELD_EQ(inName,"controllerScheme") ) { outValue = ( controllerScheme ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"healthDrainMultiplier") ) { outValue = ( healthDrainMultiplier ); return true; }
	}
	return false;
}

bool Config_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bgDim") ) { bgDim=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=ioValue.Cast< Float >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"noteGlow") ) { noteGlow=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"noFpsCap") ) { noFpsCap=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"comboType") ) { comboType=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"downscroll") ) { downscroll=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ghostTapType") ) { ghostTapType=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"healthMultiplier") ) { healthMultiplier=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"controllerScheme") ) { controllerScheme=ioValue.Cast< int >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"healthDrainMultiplier") ) { healthDrainMultiplier=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Config_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Config_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Config_obj::offset,HX_("offset",93,97,3f,60)},
	{::hx::fsString,(void *) &Config_obj::accuracy,HX_("accuracy",39,06,c5,ff)},
	{::hx::fsFloat,(void *) &Config_obj::healthMultiplier,HX_("healthMultiplier",3d,6f,9b,00)},
	{::hx::fsFloat,(void *) &Config_obj::healthDrainMultiplier,HX_("healthDrainMultiplier",1d,fc,54,82)},
	{::hx::fsInt,(void *) &Config_obj::comboType,HX_("comboType",28,86,34,65)},
	{::hx::fsBool,(void *) &Config_obj::downscroll,HX_("downscroll",ef,45,d4,4f)},
	{::hx::fsBool,(void *) &Config_obj::noteGlow,HX_("noteGlow",9f,73,9a,53)},
	{::hx::fsInt,(void *) &Config_obj::ghostTapType,HX_("ghostTapType",2e,97,64,fe)},
	{::hx::fsBool,(void *) &Config_obj::noFpsCap,HX_("noFpsCap",ca,76,8e,61)},
	{::hx::fsInt,(void *) &Config_obj::controllerScheme,HX_("controllerScheme",e1,89,2a,b2)},
	{::hx::fsInt,(void *) &Config_obj::bgDim,HX_("bgDim",83,c8,8d,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Config_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Config_obj::offset,"offset");
	HX_MARK_MEMBER_NAME(Config_obj::accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(Config_obj::healthMultiplier,"healthMultiplier");
	HX_MARK_MEMBER_NAME(Config_obj::healthDrainMultiplier,"healthDrainMultiplier");
	HX_MARK_MEMBER_NAME(Config_obj::comboType,"comboType");
	HX_MARK_MEMBER_NAME(Config_obj::downscroll,"downscroll");
	HX_MARK_MEMBER_NAME(Config_obj::noteGlow,"noteGlow");
	HX_MARK_MEMBER_NAME(Config_obj::ghostTapType,"ghostTapType");
	HX_MARK_MEMBER_NAME(Config_obj::noFpsCap,"noFpsCap");
	HX_MARK_MEMBER_NAME(Config_obj::controllerScheme,"controllerScheme");
	HX_MARK_MEMBER_NAME(Config_obj::bgDim,"bgDim");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Config_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Config_obj::offset,"offset");
	HX_VISIT_MEMBER_NAME(Config_obj::accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(Config_obj::healthMultiplier,"healthMultiplier");
	HX_VISIT_MEMBER_NAME(Config_obj::healthDrainMultiplier,"healthDrainMultiplier");
	HX_VISIT_MEMBER_NAME(Config_obj::comboType,"comboType");
	HX_VISIT_MEMBER_NAME(Config_obj::downscroll,"downscroll");
	HX_VISIT_MEMBER_NAME(Config_obj::noteGlow,"noteGlow");
	HX_VISIT_MEMBER_NAME(Config_obj::ghostTapType,"ghostTapType");
	HX_VISIT_MEMBER_NAME(Config_obj::noFpsCap,"noFpsCap");
	HX_VISIT_MEMBER_NAME(Config_obj::controllerScheme,"controllerScheme");
	HX_VISIT_MEMBER_NAME(Config_obj::bgDim,"bgDim");
};

#endif

::hx::Class Config_obj::__mClass;

static ::String Config_obj_sStaticFields[] = {
	HX_("offset",93,97,3f,60),
	HX_("accuracy",39,06,c5,ff),
	HX_("healthMultiplier",3d,6f,9b,00),
	HX_("healthDrainMultiplier",1d,fc,54,82),
	HX_("comboType",28,86,34,65),
	HX_("downscroll",ef,45,d4,4f),
	HX_("noteGlow",9f,73,9a,53),
	HX_("ghostTapType",2e,97,64,fe),
	HX_("noFpsCap",ca,76,8e,61),
	HX_("controllerScheme",e1,89,2a,b2),
	HX_("bgDim",83,c8,8d,b1),
	HX_("resetSettings",d2,69,dc,bb),
	HX_("reload",59,53,df,03),
	HX_("write",df,6c,59,d0),
	HX_("configCheck",a6,f2,15,ba),
	::String(null())
};

void Config_obj::__register()
{
	Config_obj _hx_dummy;
	Config_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("config.Config",0e,07,41,76);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Config_obj::__GetStatic;
	__mClass->mSetStaticField = &Config_obj::__SetStatic;
	__mClass->mMarkFunc = Config_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Config_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Config_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Config_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Config_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Config_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace config
