// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_ImageCache
#include <ImageCache.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_config_AutoOffsetState
#include <config/AutoOffsetState.h>
#endif
#ifndef INCLUDED_config_Config
#include <config/Config.h>
#endif
#ifndef INCLUDED_config_ConfigMenu
#include <config/ConfigMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_74681cd5c78491d4_14_new,"config.AutoOffsetState","new",0xefd71ef5,"config.AutoOffsetState.new","config/AutoOffsetState.hx",14,0xf859ca5c)
static const ::String _hx_array_data_e6dd8083_1[] = {
	HX_("assets/fonts/Funkin-Bold.otf",bd,87,d9,8a),HX_("assets/fonts/vcr.ttf",46,38,26,7e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_135_create,"config.AutoOffsetState","create",0xd18da387,"config.AutoOffsetState.create","config/AutoOffsetState.hx",135,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_37_create,"config.AutoOffsetState","create",0xd18da387,"config.AutoOffsetState.create","config/AutoOffsetState.hx",37,0xf859ca5c)
static const int _hx_array_data_e6dd8083_4[] = {
	(int)0,
};
static const int _hx_array_data_e6dd8083_5[] = {
	(int)2,(int)2,(int)1,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_157_update,"config.AutoOffsetState","update",0xdc83c294,"config.AutoOffsetState.update","config/AutoOffsetState.hx",157,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_185_update,"config.AutoOffsetState","update",0xdc83c294,"config.AutoOffsetState.update","config/AutoOffsetState.hx",185,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_201_countdown,"config.AutoOffsetState","countdown",0x1ba53d06,"config.AutoOffsetState.countdown","config/AutoOffsetState.hx",201,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_207_countdown,"config.AutoOffsetState","countdown",0x1ba53d06,"config.AutoOffsetState.countdown","config/AutoOffsetState.hx",207,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_213_countdown,"config.AutoOffsetState","countdown",0x1ba53d06,"config.AutoOffsetState.countdown","config/AutoOffsetState.hx",213,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_195_countdown,"config.AutoOffsetState","countdown",0x1ba53d06,"config.AutoOffsetState.countdown","config/AutoOffsetState.hx",195,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_220_hitBeat,"config.AutoOffsetState","hitBeat",0x4f90367e,"config.AutoOffsetState.hitBeat","config/AutoOffsetState.hx",220,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_240_updateOverrideText,"config.AutoOffsetState","updateOverrideText",0xa6a1cdcd,"config.AutoOffsetState.updateOverrideText","config/AutoOffsetState.hx",240,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_250_endSong,"config.AutoOffsetState","endSong",0xa7739a65,"config.AutoOffsetState.endSong","config/AutoOffsetState.hx",250,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_244_endSong,"config.AutoOffsetState","endSong",0xa7739a65,"config.AutoOffsetState.endSong","config/AutoOffsetState.hx",244,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_254_exit,"config.AutoOffsetState","exit",0xe67f6ae9,"config.AutoOffsetState.exit","config/AutoOffsetState.hx",254,0xf859ca5c)
HX_LOCAL_STACK_FRAME(_hx_pos_74681cd5c78491d4_18_boot,"config.AutoOffsetState","boot",0xe47cf7fd,"config.AutoOffsetState.boot","config/AutoOffsetState.hx",18,0xf859ca5c)
namespace config{

void AutoOffsetState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_14_new)
HXLINE(  35)		this->speakers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  32)		this->canExit = false;
HXLINE(  31)		this->ending = false;
HXLINE(  30)		this->endOfSong = false;
HXLINE(  29)		this->started = false;
HXLINE(  23)		this->offsetTotal = 0;
HXLINE(  22)		this->offsetCalc = 0;
HXLINE(  21)		this->hitBeats = 0;
HXLINE(  19)		this->font = ::Array_obj< ::String >::fromData( _hx_array_data_e6dd8083_1,2);
HXLINE(  17)		this->easterEgg = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 1);
HXLINE(  14)		super::__construct(TransIn,TransOut);
            	}

Dynamic AutoOffsetState_obj::__CreateEmpty() { return new AutoOffsetState_obj; }

void *AutoOffsetState_obj::_hx_vtable = 0;

Dynamic AutoOffsetState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AutoOffsetState_obj > _hx_result = new AutoOffsetState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AutoOffsetState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x086766c9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x086766c9;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void AutoOffsetState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::config::AutoOffsetState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_135_create)
HXLINE( 136)			::flixel::FlxG_obj::sound->music->set_volume(( (Float)(1) ));
HXLINE( 137)			::String _hx_tmp;
HXDLIN( 137)			if (_gthis->easterEgg) {
HXLINE( 137)				_hx_tmp = HX_("-pixel",39,03,b3,c0);
            			}
            			else {
HXLINE( 137)				_hx_tmp = HX_("",00,00,00,00);
            			}
HXDLIN( 137)			::flixel::FlxG_obj::sound->playMusic((((HX_("assets/music/",36,ab,d2,e0) + (HX_("offsetSong",08,ad,6f,48) + _hx_tmp)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),1,false,null());
HXLINE( 138)			::flixel::FlxG_obj::sound->music->onComplete = _gthis->exit_dyn();
HXLINE( 140)			_gthis->started = true;
HXLINE( 142)			{
HXLINE( 142)				 ::flixel::text::FlxText _g = _gthis->offsetText;
HXDLIN( 142)				_g->set_y((_g->y - ( (Float)(10) )));
            			}
HXLINE( 143)			_gthis->offsetText->set_alpha(( (Float)(0) ));
HXLINE( 144)			::flixel::tweens::FlxTween_obj::tween(_gthis->offsetText, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),(_gthis->offsetText->y + 10))
            				->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),0)
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE( 146)			{
HXLINE( 146)				 ::flixel::text::FlxText _g1 = _gthis->previousText;
HXDLIN( 146)				_g1->set_y((_g1->y - ( (Float)(10) )));
            			}
HXLINE( 147)			_gthis->previousText->set_alpha(( (Float)(0) ));
HXLINE( 148)			::flixel::tweens::FlxTween_obj::tween(_gthis->previousText, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),(_gthis->previousText->y + 10))
            				->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.6))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE( 150)			{
HXLINE( 150)				 ::flixel::text::FlxText _g2 = _gthis->descText;
HXDLIN( 150)				_g2->set_y((_g2->y - ( (Float)(10) )));
            			}
HXLINE( 151)			_gthis->descText->set_alpha(( (Float)(0) ));
HXLINE( 152)			::flixel::tweens::FlxTween_obj::tween(_gthis->descText, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),(_gthis->descText->y + 10))
            				->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)1.2))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_37_create)
HXDLIN(  37)		 ::config::AutoOffsetState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  40)		::Conductor_obj::changeBPM(( (Float)(100) ));
HXLINE(  41)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(  43)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(  46)		{
HXLINE(  46)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(  46)			::String EmbeddedSound;
HXDLIN(  46)			if (this->easterEgg) {
HXLINE(  46)				EmbeddedSound = HX_("-pixel",39,03,b3,c0);
            			}
            			else {
HXLINE(  46)				EmbeddedSound = HX_("",00,00,00,00);
            			}
HXDLIN(  46)			::String EmbeddedSound1 = (((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("intro3",47,54,90,9e) + EmbeddedSound)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension);
HXDLIN(  46)			bool _hx_tmp;
HXDLIN(  46)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound1,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(  46)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound1,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(  46)				_hx_tmp = true;
            			}
HXDLIN(  46)			if (_hx_tmp) {
HXLINE(  46)				::openfl::utils::Assets_obj::getSound(EmbeddedSound1,true);
            			}
            		}
HXLINE(  47)		{
HXLINE(  47)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this1 = ::flixel::FlxG_obj::sound;
HXDLIN(  47)			::String EmbeddedSound2;
HXDLIN(  47)			if (this->easterEgg) {
HXLINE(  47)				EmbeddedSound2 = HX_("-pixel",39,03,b3,c0);
            			}
            			else {
HXLINE(  47)				EmbeddedSound2 = HX_("",00,00,00,00);
            			}
HXDLIN(  47)			::String EmbeddedSound3 = (((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("intro2",46,54,90,9e) + EmbeddedSound2)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension);
HXDLIN(  47)			bool _hx_tmp1;
HXDLIN(  47)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound3,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(  47)				_hx_tmp1 = ::openfl::utils::Assets_obj::exists(EmbeddedSound3,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(  47)				_hx_tmp1 = true;
            			}
HXDLIN(  47)			if (_hx_tmp1) {
HXLINE(  47)				::openfl::utils::Assets_obj::getSound(EmbeddedSound3,true);
            			}
            		}
HXLINE(  48)		{
HXLINE(  48)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this2 = ::flixel::FlxG_obj::sound;
HXDLIN(  48)			::String EmbeddedSound4;
HXDLIN(  48)			if (this->easterEgg) {
HXLINE(  48)				EmbeddedSound4 = HX_("-pixel",39,03,b3,c0);
            			}
            			else {
HXLINE(  48)				EmbeddedSound4 = HX_("",00,00,00,00);
            			}
HXDLIN(  48)			::String EmbeddedSound5 = (((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("intro1",45,54,90,9e) + EmbeddedSound4)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension);
HXDLIN(  48)			bool _hx_tmp2;
HXDLIN(  48)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound5,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(  48)				_hx_tmp2 = ::openfl::utils::Assets_obj::exists(EmbeddedSound5,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(  48)				_hx_tmp2 = true;
            			}
HXDLIN(  48)			if (_hx_tmp2) {
HXLINE(  48)				::openfl::utils::Assets_obj::getSound(EmbeddedSound5,true);
            			}
            		}
HXLINE(  49)		{
HXLINE(  49)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this3 = ::flixel::FlxG_obj::sound;
HXDLIN(  49)			::String EmbeddedSound6;
HXDLIN(  49)			if (this->easterEgg) {
HXLINE(  49)				EmbeddedSound6 = HX_("-pixel",39,03,b3,c0);
            			}
            			else {
HXLINE(  49)				EmbeddedSound6 = HX_("",00,00,00,00);
            			}
HXDLIN(  49)			::String EmbeddedSound7 = (((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("introGo",b4,7b,b9,1f) + EmbeddedSound6)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension);
HXDLIN(  49)			bool _hx_tmp3;
HXDLIN(  49)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound7,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(  49)				_hx_tmp3 = ::openfl::utils::Assets_obj::exists(EmbeddedSound7,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(  49)				_hx_tmp3 = true;
            			}
HXDLIN(  49)			if (_hx_tmp3) {
HXLINE(  49)				::openfl::utils::Assets_obj::getSound(EmbeddedSound7,true);
            			}
            		}
HXLINE(  52)		switch((int)(::config::AutoOffsetState_obj::forceEasterEgg)){
            			case (int)-1: {
HXLINE(  56)				this->easterEgg = false;
            			}
            			break;
            			case (int)1: {
HXLINE(  54)				this->easterEgg = true;
            			}
            			break;
            		}
HXLINE(  59)		if (!(this->easterEgg)) {
HXLINE(  61)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  61)			::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("fpsPlus/offsetBG",04,73,7c,2a)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  61)			 ::Dynamic _hx_tmp1;
HXDLIN(  61)			if (::ImageCache_obj::exists(data)) {
HXLINE(  61)				_hx_tmp1 = ::ImageCache_obj::get(data);
            			}
            			else {
HXLINE(  61)				_hx_tmp1 = data;
            			}
HXDLIN(  61)			this->bg = _hx_tmp->loadGraphic(_hx_tmp1,null(),null(),null(),null(),null());
HXLINE(  62)			this->bg->set_antialiasing(true);
HXLINE(  63)			this->bg->set_active(true);
HXLINE(  64)			this->bg->screenCenter(null());
HXLINE(  65)			this->add(this->bg);
HXLINE(  68)			 ::flixel::FlxSprite _hx_tmp2 = this->speakers;
HXDLIN(  68)			::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("fpsPlus/speaker",93,7f,f8,c9)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  68)			 ::Dynamic _hx_tmp3;
HXDLIN(  68)			if (::ImageCache_obj::exists(data1)) {
HXLINE(  68)				_hx_tmp3 = ::ImageCache_obj::get(data1);
            			}
            			else {
HXLINE(  68)				_hx_tmp3 = data1;
            			}
HXDLIN(  68)			_hx_tmp2->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp3,((HX_("assets/images/",ab,47,cb,9f) + HX_("fpsPlus/speaker",93,7f,f8,c9)) + HX_(".xml",69,3e,c3,1e))));
HXLINE(  69)			this->speakers->set_antialiasing(true);
HXLINE(  70)			this->speakers->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("IDLE",14,6f,74,30),24,false,null(),null());
HXLINE(  71)			this->speakers->animation->addByPrefix(HX_("bump",f6,0f,20,41),HX_("BUMP",f6,d7,e0,2b),24,false,null(),null());
HXLINE(  72)			this->speakers->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  73)			this->speakers->screenCenter(null());
HXLINE(  76)			this->add(this->speakers);
            		}
            		else {
HXLINE(  80)			::flixel::FlxG_obj::save->data->__SetField(HX_("ee1",d1,fb,4c,00),true,::hx::paccDynamic);
HXLINE(  83)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  83)			::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("fpsPlus/offsetBG-pixel",3d,91,dd,ba)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  83)			 ::Dynamic _hx_tmp1;
HXDLIN(  83)			if (::ImageCache_obj::exists(data)) {
HXLINE(  83)				_hx_tmp1 = ::ImageCache_obj::get(data);
            			}
            			else {
HXLINE(  83)				_hx_tmp1 = data;
            			}
HXDLIN(  83)			this->bg = _hx_tmp->loadGraphic(_hx_tmp1,null(),null(),null(),null(),null());
HXLINE(  84)			this->bg->set_antialiasing(false);
HXLINE(  85)			this->bg->set_active(true);
HXLINE(  86)			 ::flixel::FlxSprite _hx_tmp2 = this->bg;
HXDLIN(  86)			_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ( (Float)(6) ))),null());
HXLINE(  87)			this->bg->updateHitbox();
HXLINE(  88)			this->bg->screenCenter(null());
HXLINE(  89)			this->add(this->bg);
HXLINE(  92)			 ::flixel::FlxSprite _hx_tmp3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  92)			::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("fpsPlus/speaker-pixel",0c,f3,67,5b)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  92)			 ::Dynamic _hx_tmp4;
HXDLIN(  92)			if (::ImageCache_obj::exists(data1)) {
HXLINE(  92)				_hx_tmp4 = ::ImageCache_obj::get(data1);
            			}
            			else {
HXLINE(  92)				_hx_tmp4 = data1;
            			}
HXDLIN(  92)			this->speakers = _hx_tmp3->loadGraphic(_hx_tmp4,true,102,52,null(),null());
HXLINE(  93)			this->speakers->set_antialiasing(false);
HXLINE(  94)			this->speakers->animation->add(HX_("idle",14,a7,b3,45),::Array_obj< int >::fromData( _hx_array_data_e6dd8083_4,1),0,false,null(),null());
HXLINE(  95)			this->speakers->animation->add(HX_("bump",f6,0f,20,41),::Array_obj< int >::fromData( _hx_array_data_e6dd8083_5,4),24,false,null(),null());
HXLINE(  96)			this->speakers->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  97)			 ::flixel::FlxSprite _hx_tmp5 = this->speakers;
HXDLIN(  97)			_hx_tmp5->setGraphicSize(::Std_obj::_hx_int((this->speakers->get_width() * ( (Float)(7) ))),null());
HXLINE(  98)			this->speakers->updateHitbox();
HXLINE(  99)			this->speakers->screenCenter(null());
HXLINE( 102)			this->add(this->speakers);
            		}
HXLINE( 107)		this->offsetText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,235,1280,HX_("",00,00,00,00),58,null());
HXLINE( 108)		this->offsetText->scrollFactor->set(0,0);
HXLINE( 109)		int _hx_tmp4;
HXDLIN( 109)		if (this->easterEgg) {
HXLINE( 109)			_hx_tmp4 = 1;
            		}
            		else {
HXLINE( 109)			_hx_tmp4 = 0;
            		}
HXDLIN( 109)		this->offsetText->setFormat(this->font->__get(_hx_tmp4),58,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 110)		this->offsetText->set_borderSize(( (Float)(3) ));
HXLINE( 111)		this->offsetText->set_borderQuality(( (Float)(1) ));
HXLINE( 112)		this->offsetText->set_alpha(( (Float)(0) ));
HXLINE( 114)		this->previousText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,400,1280,HX_("",00,00,00,00),58,null());
HXLINE( 115)		this->previousText->scrollFactor->set(0,0);
HXLINE( 116)		int _hx_tmp5;
HXDLIN( 116)		if (this->easterEgg) {
HXLINE( 116)			_hx_tmp5 = 1;
            		}
            		else {
HXLINE( 116)			_hx_tmp5 = 0;
            		}
HXDLIN( 116)		this->previousText->setFormat(this->font->__get(_hx_tmp5),58,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 117)		this->previousText->set_borderSize(( (Float)(3) ));
HXLINE( 118)		this->previousText->set_borderQuality(( (Float)(1) ));
HXLINE( 119)		this->previousText->set_alpha(( (Float)(0) ));
HXLINE( 121)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,320,540,640,HX_("Tap any key to the beat of the music!\n",5e,e5,ab,a1),40,null());
HXLINE( 122)		this->descText->scrollFactor->set(0,0);
HXLINE( 123)		this->descText->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),40,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 124)		this->descText->set_borderSize(( (Float)(2) ));
HXLINE( 125)		this->descText->set_borderQuality(( (Float)(1) ));
HXLINE( 126)		this->descText->set_alpha(( (Float)(0) ));
HXLINE( 128)		this->add(this->offsetText);
HXLINE( 129)		this->add(this->previousText);
HXLINE( 130)		this->add(this->descText);
HXLINE( 132)		this->offsetText->set_text(((HX_("OFFSET\n",17,dd,38,57) + this->offsetCalc) + HX_("ms\n",e4,19,53,00)));
HXLINE( 133)		this->previousText->set_text(HX_("PREVIOUS\n0ms\n",27,31,26,de));
HXLINE( 135)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.5),true, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


void AutoOffsetState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_157_update)
HXDLIN( 157)		 ::config::AutoOffsetState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 159)		this->super::update(elapsed);
HXLINE( 161)		if (this->started) {
HXLINE( 163)			::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE( 166)			bool _hx_tmp;
HXDLIN( 166)			bool _hx_tmp1;
HXDLIN( 166)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 166)			if (!(_this->keyManager->checkStatus(27,_this->status))) {
HXLINE( 166)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 166)				_hx_tmp1 = _this->keyManager->checkStatus(13,_this->status);
            			}
            			else {
HXLINE( 166)				_hx_tmp1 = true;
            			}
HXDLIN( 166)			if (_hx_tmp1) {
HXLINE( 166)				_hx_tmp = this->canExit;
            			}
            			else {
HXLINE( 166)				_hx_tmp = false;
            			}
HXDLIN( 166)			if (_hx_tmp) {
HXLINE( 167)				this->endOfSong = true;
HXLINE( 168)				this->endSong();
            			}
HXLINE( 171)			bool _hx_tmp2;
HXDLIN( 171)			bool _hx_tmp3;
HXDLIN( 171)			if (( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY()) {
HXLINE( 171)				if ((::Conductor_obj::songPosition >= 4500)) {
HXLINE( 171)					_hx_tmp3 = (::Conductor_obj::songPosition <= 43500);
            				}
            				else {
HXLINE( 171)					_hx_tmp3 = false;
            				}
            			}
            			else {
HXLINE( 171)				_hx_tmp3 = false;
            			}
HXDLIN( 171)			if (_hx_tmp3) {
HXLINE( 171)				bool _hx_tmp;
HXDLIN( 171)				if (!(this->ending)) {
HXLINE( 171)					_hx_tmp = this->endOfSong;
            				}
            				else {
HXLINE( 171)					_hx_tmp = true;
            				}
HXDLIN( 171)				_hx_tmp2 = !(_hx_tmp);
            			}
            			else {
HXLINE( 171)				_hx_tmp2 = false;
            			}
HXDLIN( 171)			if (_hx_tmp2) {
HXLINE( 172)				this->hitBeat();
            			}
HXLINE( 175)			bool _hx_tmp4;
HXDLIN( 175)			if (!(this->canExit)) {
HXLINE( 175)				_hx_tmp4 = (::Conductor_obj::songPosition >= 2400);
            			}
            			else {
HXLINE( 175)				_hx_tmp4 = false;
            			}
HXDLIN( 175)			if (_hx_tmp4) {
HXLINE( 176)				this->canExit = true;
HXLINE( 177)				this->countdown();
            			}
            		}
HXLINE( 182)		bool _hx_tmp;
HXDLIN( 182)		if ((::Conductor_obj::songPosition >= 43200)) {
HXLINE( 182)			_hx_tmp = !(this->endOfSong);
            		}
            		else {
HXLINE( 182)			_hx_tmp = false;
            		}
HXDLIN( 182)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::config::AutoOffsetState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_185_update)
HXLINE( 186)				_gthis->endOfSong = true;
HXLINE( 187)				_gthis->endSong();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 184)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)2.4), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


void AutoOffsetState_obj::countdown(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::config::AutoOffsetState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_201_countdown)
HXLINE( 202)			::String _hx_tmp;
HXDLIN( 202)			if (_gthis->easterEgg) {
HXLINE( 202)				_hx_tmp = HX_("-pixel",39,03,b3,c0);
            			}
            			else {
HXLINE( 202)				_hx_tmp = HX_("",00,00,00,00);
            			}
HXDLIN( 202)			::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("intro2",46,54,90,9e) + _hx_tmp)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
HXLINE( 203)			_gthis->speakers->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::config::AutoOffsetState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_207_countdown)
HXLINE( 208)			::String _hx_tmp;
HXDLIN( 208)			if (_gthis->easterEgg) {
HXLINE( 208)				_hx_tmp = HX_("-pixel",39,03,b3,c0);
            			}
            			else {
HXLINE( 208)				_hx_tmp = HX_("",00,00,00,00);
            			}
HXDLIN( 208)			::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("intro1",45,54,90,9e) + _hx_tmp)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
HXLINE( 209)			_gthis->speakers->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::config::AutoOffsetState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_213_countdown)
HXLINE( 214)			::String _hx_tmp;
HXDLIN( 214)			if (_gthis->easterEgg) {
HXLINE( 214)				_hx_tmp = HX_("-pixel",39,03,b3,c0);
            			}
            			else {
HXLINE( 214)				_hx_tmp = HX_("",00,00,00,00);
            			}
HXDLIN( 214)			::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("introGo",b4,7b,b9,1f) + _hx_tmp)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
HXLINE( 215)			_gthis->speakers->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_195_countdown)
HXDLIN( 195)		 ::config::AutoOffsetState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 197)		::String _hx_tmp;
HXDLIN( 197)		if (this->easterEgg) {
HXLINE( 197)			_hx_tmp = HX_("-pixel",39,03,b3,c0);
            		}
            		else {
HXLINE( 197)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 197)		::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("intro3",47,54,90,9e) + _hx_tmp)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
HXLINE( 198)		this->speakers->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
HXLINE( 200)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 206)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.2), ::Dynamic(new _hx_Closure_1(_gthis)),null());
HXLINE( 212)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.8), ::Dynamic(new _hx_Closure_2(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AutoOffsetState_obj,countdown,(void))

void AutoOffsetState_obj::hitBeat(){
            	HX_STACKFRAME(&_hx_pos_74681cd5c78491d4_220_hitBeat)
HXLINE( 222)		this->hitBeats++;
HXLINE( 223)		int offsetAdd = ::Std_obj::_hx_int(::hx::Mod(::Conductor_obj::songPosition,600));
HXLINE( 224)		if ((offsetAdd >= 300)) {
HXLINE( 224)			offsetAdd = (offsetAdd - 600);
            		}
HXLINE( 225)		 ::config::AutoOffsetState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 225)		_hx_tmp->offsetTotal = (_hx_tmp->offsetTotal + offsetAdd);
HXLINE( 227)		this->offsetCalc = ::Std_obj::_hx_int((( (Float)(this->offsetTotal) ) / ( (Float)(this->hitBeats) )));
HXLINE( 229)		this->offsetText->set_text(((HX_("OFFSET\n",17,dd,38,57) + this->offsetCalc) + HX_("ms\n",e4,19,53,00)));
HXLINE( 230)		this->previousText->set_text(((HX_("PREVIOUS\n",f3,63,4c,12) + offsetAdd) + HX_("ms\n",e4,19,53,00)));
HXLINE( 232)		this->speakers->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
HXLINE( 234)		::haxe::Log_obj::trace((((((HX_("Add: ",e7,1e,71,af) + offsetAdd) + HX_("\nTotal: ",80,9c,8b,4d)) + this->offsetTotal) + HX_("\noffsetCalc: ",78,bd,58,48)) + this->offsetCalc),::hx::SourceInfo(HX_("source/config/AutoOffsetState.hx",e8,14,54,46),234,HX_("config.AutoOffsetState",83,80,dd,e6),HX_("hitBeat",69,79,99,d6)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AutoOffsetState_obj,hitBeat,(void))

void AutoOffsetState_obj::updateOverrideText(){
            	HX_STACKFRAME(&_hx_pos_74681cd5c78491d4_240_updateOverrideText)
HXDLIN( 240)		this->offsetText->set_text((HX_("OFFSET\n",17,dd,38,57) + this->offsetCalc));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AutoOffsetState_obj,updateOverrideText,(void))

void AutoOffsetState_obj::endSong(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::config::AutoOffsetState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_250_endSong)
HXLINE( 250)			_gthis->exit();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_244_endSong)
HXDLIN( 244)		 ::config::AutoOffsetState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 245)		::flixel::tweens::FlxTween_obj::tween(this->offsetText, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(this->offsetText->y - ( (Float)(10) )))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.6))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE( 246)		::flixel::tweens::FlxTween_obj::tween(this->previousText, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(this->previousText->y - ( (Float)(10) )))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE( 247)		::flixel::tweens::FlxTween_obj::tween(this->descText, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(this->descText->y - ( (Float)(10) )))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),0)
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE( 248)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.9), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AutoOffsetState_obj,endSong,(void))

void AutoOffsetState_obj::exit(){
            	HX_GC_STACKFRAME(&_hx_pos_74681cd5c78491d4_254_exit)
HXLINE( 255)		{
HXLINE( 255)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 255)			 ::Dynamic onComplete = null();
HXDLIN( 255)			if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 255)				_this->fadeTween->cancel();
            			}
HXDLIN( 255)			_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(0) ),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            		}
HXLINE( 256)		this->ending = true;
HXLINE( 257)		::config::Config_obj::write(( (Float)(this->offsetCalc) ),::config::Config_obj::accuracy,::config::Config_obj::healthMultiplier,::config::Config_obj::healthDrainMultiplier,::config::Config_obj::comboType,::config::Config_obj::downscroll,::config::Config_obj::noteGlow,::config::Config_obj::ghostTapType,::config::Config_obj::noFpsCap,::config::Config_obj::controllerScheme,::config::Config_obj::bgDim);
HXLINE( 258)		{
HXLINE( 258)			 ::flixel::FlxState nextState =  ::config::ConfigMenu_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 258)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 258)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AutoOffsetState_obj,exit,(void))

int AutoOffsetState_obj::forceEasterEgg;


::hx::ObjectPtr< AutoOffsetState_obj > AutoOffsetState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< AutoOffsetState_obj > __this = new AutoOffsetState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< AutoOffsetState_obj > AutoOffsetState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	AutoOffsetState_obj *__this = (AutoOffsetState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AutoOffsetState_obj), true, "config.AutoOffsetState"));
	*(void **)__this = AutoOffsetState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

AutoOffsetState_obj::AutoOffsetState_obj()
{
}

void AutoOffsetState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AutoOffsetState);
	HX_MARK_MEMBER_NAME(easterEgg,"easterEgg");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(hitBeats,"hitBeats");
	HX_MARK_MEMBER_NAME(offsetCalc,"offsetCalc");
	HX_MARK_MEMBER_NAME(offsetTotal,"offsetTotal");
	HX_MARK_MEMBER_NAME(offsetText,"offsetText");
	HX_MARK_MEMBER_NAME(previousText,"previousText");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(started,"started");
	HX_MARK_MEMBER_NAME(endOfSong,"endOfSong");
	HX_MARK_MEMBER_NAME(ending,"ending");
	HX_MARK_MEMBER_NAME(canExit,"canExit");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(speakers,"speakers");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AutoOffsetState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(easterEgg,"easterEgg");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(hitBeats,"hitBeats");
	HX_VISIT_MEMBER_NAME(offsetCalc,"offsetCalc");
	HX_VISIT_MEMBER_NAME(offsetTotal,"offsetTotal");
	HX_VISIT_MEMBER_NAME(offsetText,"offsetText");
	HX_VISIT_MEMBER_NAME(previousText,"previousText");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(started,"started");
	HX_VISIT_MEMBER_NAME(endOfSong,"endOfSong");
	HX_VISIT_MEMBER_NAME(ending,"ending");
	HX_VISIT_MEMBER_NAME(canExit,"canExit");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(speakers,"speakers");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AutoOffsetState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return ::hx::Val( font ); }
		if (HX_FIELD_EQ(inName,"exit") ) { return ::hx::Val( exit_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ending") ) { return ::hx::Val( ending ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { return ::hx::Val( started ); }
		if (HX_FIELD_EQ(inName,"canExit") ) { return ::hx::Val( canExit ); }
		if (HX_FIELD_EQ(inName,"hitBeat") ) { return ::hx::Val( hitBeat_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hitBeats") ) { return ::hx::Val( hitBeats ); }
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		if (HX_FIELD_EQ(inName,"speakers") ) { return ::hx::Val( speakers ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"easterEgg") ) { return ::hx::Val( easterEgg ); }
		if (HX_FIELD_EQ(inName,"endOfSong") ) { return ::hx::Val( endOfSong ); }
		if (HX_FIELD_EQ(inName,"countdown") ) { return ::hx::Val( countdown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"offsetCalc") ) { return ::hx::Val( offsetCalc ); }
		if (HX_FIELD_EQ(inName,"offsetText") ) { return ::hx::Val( offsetText ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"offsetTotal") ) { return ::hx::Val( offsetTotal ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"previousText") ) { return ::hx::Val( previousText ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"updateOverrideText") ) { return ::hx::Val( updateOverrideText_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AutoOffsetState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"forceEasterEgg") ) { outValue = ( forceEasterEgg ); return true; }
	}
	return false;
}

::hx::Val AutoOffsetState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ending") ) { ending=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { started=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canExit") ) { canExit=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hitBeats") ) { hitBeats=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speakers") ) { speakers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"easterEgg") ) { easterEgg=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endOfSong") ) { endOfSong=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"offsetCalc") ) { offsetCalc=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetText") ) { offsetText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"offsetTotal") ) { offsetTotal=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"previousText") ) { previousText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool AutoOffsetState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"forceEasterEgg") ) { forceEasterEgg=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void AutoOffsetState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("easterEgg",3b,7e,ed,67));
	outFields->push(HX_("font",cf,5d,c0,43));
	outFields->push(HX_("hitBeats",ea,c2,b0,ef));
	outFields->push(HX_("offsetCalc",c8,a1,d1,3d));
	outFields->push(HX_("offsetTotal",31,d7,b2,ac));
	outFields->push(HX_("offsetText",e0,55,11,49));
	outFields->push(HX_("previousText",84,9c,9b,f3));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("started",41,29,1b,35));
	outFields->push(HX_("endOfSong",c7,d6,8f,93));
	outFields->push(HX_("ending",e7,a3,88,fa));
	outFields->push(HX_("canExit",4e,df,75,61));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("speakers",94,ca,fd,65));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AutoOffsetState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(AutoOffsetState_obj,easterEgg),HX_("easterEgg",3b,7e,ed,67)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(AutoOffsetState_obj,font),HX_("font",cf,5d,c0,43)},
	{::hx::fsInt,(int)offsetof(AutoOffsetState_obj,hitBeats),HX_("hitBeats",ea,c2,b0,ef)},
	{::hx::fsInt,(int)offsetof(AutoOffsetState_obj,offsetCalc),HX_("offsetCalc",c8,a1,d1,3d)},
	{::hx::fsInt,(int)offsetof(AutoOffsetState_obj,offsetTotal),HX_("offsetTotal",31,d7,b2,ac)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AutoOffsetState_obj,offsetText),HX_("offsetText",e0,55,11,49)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AutoOffsetState_obj,previousText),HX_("previousText",84,9c,9b,f3)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AutoOffsetState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsBool,(int)offsetof(AutoOffsetState_obj,started),HX_("started",41,29,1b,35)},
	{::hx::fsBool,(int)offsetof(AutoOffsetState_obj,endOfSong),HX_("endOfSong",c7,d6,8f,93)},
	{::hx::fsBool,(int)offsetof(AutoOffsetState_obj,ending),HX_("ending",e7,a3,88,fa)},
	{::hx::fsBool,(int)offsetof(AutoOffsetState_obj,canExit),HX_("canExit",4e,df,75,61)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(AutoOffsetState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(AutoOffsetState_obj,speakers),HX_("speakers",94,ca,fd,65)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo AutoOffsetState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &AutoOffsetState_obj::forceEasterEgg,HX_("forceEasterEgg",d0,96,e9,d3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String AutoOffsetState_obj_sMemberFields[] = {
	HX_("easterEgg",3b,7e,ed,67),
	HX_("font",cf,5d,c0,43),
	HX_("hitBeats",ea,c2,b0,ef),
	HX_("offsetCalc",c8,a1,d1,3d),
	HX_("offsetTotal",31,d7,b2,ac),
	HX_("offsetText",e0,55,11,49),
	HX_("previousText",84,9c,9b,f3),
	HX_("descText",9e,53,35,f3),
	HX_("started",41,29,1b,35),
	HX_("endOfSong",c7,d6,8f,93),
	HX_("ending",e7,a3,88,fa),
	HX_("canExit",4e,df,75,61),
	HX_("bg",c5,55,00,00),
	HX_("speakers",94,ca,fd,65),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("countdown",b1,50,b5,69),
	HX_("hitBeat",69,79,99,d6),
	HX_("updateOverrideText",c2,6c,35,0f),
	HX_("endSong",50,dd,7c,2e),
	HX_("exit",1e,f7,1d,43),
	::String(null()) };

static void AutoOffsetState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AutoOffsetState_obj::forceEasterEgg,"forceEasterEgg");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AutoOffsetState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AutoOffsetState_obj::forceEasterEgg,"forceEasterEgg");
};

#endif

::hx::Class AutoOffsetState_obj::__mClass;

static ::String AutoOffsetState_obj_sStaticFields[] = {
	HX_("forceEasterEgg",d0,96,e9,d3),
	::String(null())
};

void AutoOffsetState_obj::__register()
{
	AutoOffsetState_obj _hx_dummy;
	AutoOffsetState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("config.AutoOffsetState",83,80,dd,e6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AutoOffsetState_obj::__GetStatic;
	__mClass->mSetStaticField = &AutoOffsetState_obj::__SetStatic;
	__mClass->mMarkFunc = AutoOffsetState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AutoOffsetState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AutoOffsetState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AutoOffsetState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AutoOffsetState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AutoOffsetState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AutoOffsetState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AutoOffsetState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_74681cd5c78491d4_18_boot)
HXDLIN(  18)		forceEasterEgg = 0;
            	}
}

} // end namespace config
