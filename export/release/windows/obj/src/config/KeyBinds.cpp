// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_config_KeyBinds
#include <config/KeyBinds.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_086c45fa607a50ab_17_resetBinds,"config.KeyBinds","resetBinds",0x4496cd12,"config.KeyBinds.resetBinds","config/KeyBinds.hx",17,0xce6e8afa)
HX_LOCAL_STACK_FRAME(_hx_pos_086c45fa607a50ab_35_keyCheck,"config.KeyBinds","keyCheck",0x40164b34,"config.KeyBinds.keyCheck","config/KeyBinds.hx",35,0xce6e8afa)
namespace config{

void KeyBinds_obj::__construct() { }

Dynamic KeyBinds_obj::__CreateEmpty() { return new KeyBinds_obj; }

void *KeyBinds_obj::_hx_vtable = 0;

Dynamic KeyBinds_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyBinds_obj > _hx_result = new KeyBinds_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyBinds_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e17e1b5;
}

void KeyBinds_obj::resetBinds(){
            	HX_STACKFRAME(&_hx_pos_086c45fa607a50ab_17_resetBinds)
HXLINE(  19)		::flixel::FlxG_obj::save->data->__SetField(HX_("upBind",b8,51,92,70),HX_("W",57,00,00,00),::hx::paccDynamic);
HXLINE(  20)		::flixel::FlxG_obj::save->data->__SetField(HX_("downBind",3f,f3,fe,75),HX_("S",53,00,00,00),::hx::paccDynamic);
HXLINE(  21)		::flixel::FlxG_obj::save->data->__SetField(HX_("leftBind",64,39,12,48),HX_("A",41,00,00,00),::hx::paccDynamic);
HXLINE(  22)		::flixel::FlxG_obj::save->data->__SetField(HX_("rightBind",b9,4b,dd,ab),HX_("D",44,00,00,00),::hx::paccDynamic);
HXLINE(  23)		::flixel::FlxG_obj::save->data->__SetField(HX_("killBind",7b,28,25,80),HX_("R",52,00,00,00),::hx::paccDynamic);
HXLINE(  25)		::flixel::FlxG_obj::save->data->__SetField(HX_("upBindController",74,44,4e,96),HX_("Y",59,00,00,00),::hx::paccDynamic);
HXLINE(  26)		::flixel::FlxG_obj::save->data->__SetField(HX_("downBindController",bb,b4,78,f1),HX_("A",41,00,00,00),::hx::paccDynamic);
HXLINE(  27)		::flixel::FlxG_obj::save->data->__SetField(HX_("leftBindController",20,fb,c4,aa),HX_("X",58,00,00,00),::hx::paccDynamic);
HXLINE(  28)		::flixel::FlxG_obj::save->data->__SetField(HX_("rightBindController",b5,29,b4,47),HX_("B",42,00,00,00),::hx::paccDynamic);
HXLINE(  30)		::PlayerSettings_obj::player1->controls->loadKeyBinds();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(KeyBinds_obj,resetBinds,(void))

void KeyBinds_obj::keyCheck(){
            	HX_STACKFRAME(&_hx_pos_086c45fa607a50ab_35_keyCheck)
HXLINE(  37)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic) )) {
HXLINE(  38)			::flixel::FlxG_obj::save->data->__SetField(HX_("upBind",b8,51,92,70),HX_("W",57,00,00,00),::hx::paccDynamic);
HXLINE(  39)			::haxe::Log_obj::trace(HX_("No UP",ba,80,b8,32),::hx::SourceInfo(HX_("source/config/KeyBinds.hx",ee,66,8a,15),39,HX_("config.KeyBinds",43,11,1e,23),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  41)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic) )) {
HXLINE(  42)			::flixel::FlxG_obj::save->data->__SetField(HX_("downBind",3f,f3,fe,75),HX_("S",53,00,00,00),::hx::paccDynamic);
HXLINE(  43)			::haxe::Log_obj::trace(HX_("No DOWN",81,8c,28,a7),::hx::SourceInfo(HX_("source/config/KeyBinds.hx",ee,66,8a,15),43,HX_("config.KeyBinds",43,11,1e,23),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  45)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic) )) {
HXLINE(  46)			::flixel::FlxG_obj::save->data->__SetField(HX_("leftBind",64,39,12,48),HX_("A",41,00,00,00),::hx::paccDynamic);
HXLINE(  47)			::haxe::Log_obj::trace(HX_("No LEFT",26,9c,6a,ac),::hx::SourceInfo(HX_("source/config/KeyBinds.hx",ee,66,8a,15),47,HX_("config.KeyBinds",43,11,1e,23),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  49)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic) )) {
HXLINE(  50)			::flixel::FlxG_obj::save->data->__SetField(HX_("rightBind",b9,4b,dd,ab),HX_("D",44,00,00,00),::hx::paccDynamic);
HXLINE(  51)			::haxe::Log_obj::trace(HX_("No RIGHT",bd,12,eb,a7),::hx::SourceInfo(HX_("source/config/KeyBinds.hx",ee,66,8a,15),51,HX_("config.KeyBinds",43,11,1e,23),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  53)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("killBind",7b,28,25,80),::hx::paccDynamic) )) {
HXLINE(  54)			::flixel::FlxG_obj::save->data->__SetField(HX_("killBind",7b,28,25,80),HX_("R",52,00,00,00),::hx::paccDynamic);
HXLINE(  55)			::haxe::Log_obj::trace(HX_("No KILL",bd,73,c4,ab),::hx::SourceInfo(HX_("source/config/KeyBinds.hx",ee,66,8a,15),55,HX_("config.KeyBinds",43,11,1e,23),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  59)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("upBindController",74,44,4e,96),::hx::paccDynamic) )) {
HXLINE(  60)			::flixel::FlxG_obj::save->data->__SetField(HX_("upBindController",74,44,4e,96),HX_("Y",59,00,00,00),::hx::paccDynamic);
HXLINE(  61)			::haxe::Log_obj::trace(HX_("No Controller UP",40,cb,07,cd),::hx::SourceInfo(HX_("source/config/KeyBinds.hx",ee,66,8a,15),61,HX_("config.KeyBinds",43,11,1e,23),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  63)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("downBindController",bb,b4,78,f1),::hx::paccDynamic) )) {
HXLINE(  64)			::flixel::FlxG_obj::save->data->__SetField(HX_("downBindController",bb,b4,78,f1),HX_("A",41,00,00,00),::hx::paccDynamic);
HXLINE(  65)			::haxe::Log_obj::trace(HX_("No Controller DOWN",87,04,c4,eb),::hx::SourceInfo(HX_("source/config/KeyBinds.hx",ee,66,8a,15),65,HX_("config.KeyBinds",43,11,1e,23),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  67)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("leftBindController",20,fb,c4,aa),::hx::paccDynamic) )) {
HXLINE(  68)			::flixel::FlxG_obj::save->data->__SetField(HX_("leftBindController",20,fb,c4,aa),HX_("X",58,00,00,00),::hx::paccDynamic);
HXLINE(  69)			::haxe::Log_obj::trace(HX_("No Controller LEFT",2c,14,06,f1),::hx::SourceInfo(HX_("source/config/KeyBinds.hx",ee,66,8a,15),69,HX_("config.KeyBinds",43,11,1e,23),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  71)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("rightBindController",b5,29,b4,47),::hx::paccDynamic) )) {
HXLINE(  72)			::flixel::FlxG_obj::save->data->__SetField(HX_("rightBindController",b5,29,b4,47),HX_("B",42,00,00,00),::hx::paccDynamic);
HXLINE(  73)			::haxe::Log_obj::trace(HX_("No Controller RIGHT",f7,9f,58,6b),::hx::SourceInfo(HX_("source/config/KeyBinds.hx",ee,66,8a,15),73,HX_("config.KeyBinds",43,11,1e,23),HX_("keyCheck",a9,3e,20,8a)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(KeyBinds_obj,keyCheck,(void))


KeyBinds_obj::KeyBinds_obj()
{
}

bool KeyBinds_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"keyCheck") ) { outValue = keyCheck_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"resetBinds") ) { outValue = resetBinds_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *KeyBinds_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *KeyBinds_obj_sStaticStorageInfo = 0;
#endif

::hx::Class KeyBinds_obj::__mClass;

static ::String KeyBinds_obj_sStaticFields[] = {
	HX_("resetBinds",c7,47,9c,9b),
	HX_("keyCheck",a9,3e,20,8a),
	::String(null())
};

void KeyBinds_obj::__register()
{
	KeyBinds_obj _hx_dummy;
	KeyBinds_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("config.KeyBinds",43,11,1e,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KeyBinds_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(KeyBinds_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< KeyBinds_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyBinds_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyBinds_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace config
