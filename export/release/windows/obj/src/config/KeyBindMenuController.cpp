// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_ImageCache
#include <ImageCache.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_config_ConfigMenu
#include <config/ConfigMenu.h>
#endif
#ifndef INCLUDED_config_KeyBindMenuController
#include <config/KeyBindMenuController.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextFormat
#include <flixel/text/FlxTextFormat.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_814ae67f45575c24_27_new,"config.KeyBindMenuController","new",0x4ab2b2dd,"config.KeyBindMenuController.new","config/KeyBindMenuController.hx",27,0x8fad5234)
static const ::String _hx_array_data_f897006b_1[] = {
	HX_("START",42,ac,f9,01),HX_("BACK",27,a2,d1,2b),
};
static const ::String _hx_array_data_f897006b_2[] = {
	HX_("X",58,00,00,00),HX_("A",41,00,00,00),HX_("Y",59,00,00,00),HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_f897006b_3[] = {
	HX_("LEFT",07,d0,70,32),HX_("DOWN",62,c0,2e,2d),HX_("UP",5b,4a,00,00),HX_("RIGHT",bc,43,52,67),
};
HX_LOCAL_STACK_FRAME(_hx_pos_814ae67f45575c24_49_create,"config.KeyBindMenuController","create",0x3549709f,"config.KeyBindMenuController.create","config/KeyBindMenuController.hx",49,0x8fad5234)
HX_LOCAL_STACK_FRAME(_hx_pos_814ae67f45575c24_100_update,"config.KeyBindMenuController","update",0x403f8fac,"config.KeyBindMenuController.update","config/KeyBindMenuController.hx",100,0x8fad5234)
HX_LOCAL_STACK_FRAME(_hx_pos_814ae67f45575c24_179_textUpdate,"config.KeyBindMenuController","textUpdate",0x11b91db9,"config.KeyBindMenuController.textUpdate","config/KeyBindMenuController.hx",179,0x8fad5234)
HX_LOCAL_STACK_FRAME(_hx_pos_814ae67f45575c24_217_save,"config.KeyBindMenuController","save",0x14f4d620,"config.KeyBindMenuController.save","config/KeyBindMenuController.hx",217,0x8fad5234)
HX_LOCAL_STACK_FRAME(_hx_pos_814ae67f45575c24_228_reset,"config.KeyBindMenuController","reset",0xb082858c,"config.KeyBindMenuController.reset","config/KeyBindMenuController.hx",228,0x8fad5234)
HX_LOCAL_STACK_FRAME(_hx_pos_814ae67f45575c24_237_quit,"config.KeyBindMenuController","quit",0x13b18ab2,"config.KeyBindMenuController.quit","config/KeyBindMenuController.hx",237,0x8fad5234)
HX_LOCAL_STACK_FRAME(_hx_pos_814ae67f45575c24_248_addKey,"config.KeyBindMenuController","addKey",0x583ca3a1,"config.KeyBindMenuController.addKey","config/KeyBindMenuController.hx",248,0x8fad5234)
HX_LOCAL_STACK_FRAME(_hx_pos_814ae67f45575c24_311_changeItem,"config.KeyBindMenuController","changeItem",0x73cc11c6,"config.KeyBindMenuController.changeItem","config/KeyBindMenuController.hx",311,0x8fad5234)
namespace config{

void KeyBindMenuController_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_814ae67f45575c24_27_new)
HXLINE(  46)		this->state = HX_("select",fc,1a,33,6a);
HXLINE(  44)		this->blacklist = ::Array_obj< ::String >::fromData( _hx_array_data_f897006b_1,2);
HXLINE(  43)		this->tempKey = HX_("",00,00,00,00);
HXLINE(  38)		this->keys = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBindController",20,fb,c4,aa),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBindController",bb,b4,78,f1),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBindController",74,44,4e,96),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBindController",b5,29,b4,47),::hx::paccDynamic)));
HXLINE(  36)		this->curSelected = 0;
HXLINE(  35)		this->allowedKeys = ::Array_obj< int >::__new(0);
HXLINE(  34)		this->defaultKeys = ::Array_obj< ::String >::fromData( _hx_array_data_f897006b_2,4);
HXLINE(  33)		this->keyText = ::Array_obj< ::String >::fromData( _hx_array_data_f897006b_3,4);
HXLINE(  27)		super::__construct(TransIn,TransOut);
            	}

Dynamic KeyBindMenuController_obj::__CreateEmpty() { return new KeyBindMenuController_obj; }

void *KeyBindMenuController_obj::_hx_vtable = 0;

Dynamic KeyBindMenuController_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyBindMenuController_obj > _hx_result = new KeyBindMenuController_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool KeyBindMenuController_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0fd4d715) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0fd4d715;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void KeyBindMenuController_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_814ae67f45575c24_49_create)
HXLINE(  51)		{
HXLINE(  51)			int _g = 0;
HXDLIN(  51)			while((_g < 42)){
HXLINE(  51)				_g = (_g + 1);
HXDLIN(  51)				int i = (_g - 1);
HXLINE(  52)				this->allowedKeys[i] = i;
            			}
            		}
HXLINE(  55)		{
HXLINE(  56)			this->allowedKeys->remove(19);
HXDLIN(  56)			this->allowedKeys->remove(20);
HXDLIN(  56)			this->allowedKeys->remove(21);
HXDLIN(  56)			this->allowedKeys->remove(22);
HXDLIN(  56)			this->allowedKeys->remove(23);
HXDLIN(  56)			this->allowedKeys->remove(24);
HXDLIN(  56)			this->allowedKeys->remove(25);
HXDLIN(  56)			this->allowedKeys->remove(26);
HXDLIN(  56)			this->allowedKeys->remove(27);
HXDLIN(  56)			this->allowedKeys->remove(28);
HXDLIN(  56)			this->allowedKeys->remove(29);
            		}
HXLINE(  59)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  61)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,null(),null());
HXDLIN(  61)		::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  61)		 ::Dynamic bg1;
HXDLIN(  61)		if (::ImageCache_obj::exists(data)) {
HXLINE(  61)			bg1 = ::ImageCache_obj::get(data);
            		}
            		else {
HXLINE(  61)			bg1 = data;
            		}
HXDLIN(  61)		 ::flixel::FlxSprite bg2 = bg->loadGraphic(bg1,null(),null(),null(),null(),null());
HXLINE(  62)		bg2->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  63)		bg2->scrollFactor->set_y(( (Float)(0) ));
HXLINE(  64)		bg2->setGraphicSize(::Std_obj::_hx_int((bg2->get_width() * ((Float)1.18))),null());
HXLINE(  65)		bg2->updateHitbox();
HXLINE(  66)		bg2->screenCenter(null());
HXLINE(  67)		bg2->set_antialiasing(true);
HXLINE(  68)		bg2->set_color(-6854978);
HXLINE(  69)		this->add(bg2);
HXLINE(  71)		this->keyTextDisplay =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,1280,HX_("",00,00,00,00),72,null());
HXLINE(  72)		this->keyTextDisplay->scrollFactor->set(0,0);
HXLINE(  73)		this->keyTextDisplay->setFormat(HX_("assets/fonts/Funkin-Bold.otf",bd,87,d9,8a),72,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  74)		this->keyTextDisplay->set_borderSize(( (Float)(3) ));
HXLINE(  75)		this->keyTextDisplay->set_borderQuality(( (Float)(1) ));
HXLINE(  76)		this->add(this->keyTextDisplay);
HXLINE(  78)		this->keyWarning =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,580,1280,HX_("WARNING: BIND NOT SET, TRY ANOTHER KEY",35,75,ea,cc),42,null());
HXLINE(  79)		this->keyWarning->scrollFactor->set(0,0);
HXLINE(  80)		this->keyWarning->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),42,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  81)		this->keyWarning->set_borderSize(( (Float)(3) ));
HXLINE(  82)		this->keyWarning->set_borderQuality(( (Float)(1) ));
HXLINE(  83)		this->keyWarning->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  84)		this->keyWarning->set_alpha(( (Float)(0) ));
HXLINE(  85)		this->add(this->keyWarning);
HXLINE(  87)		 ::flixel::text::FlxText backText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 37),0,HX_("ESCAPE - Back to Menu\nBACKSPACE - Reset to Defaults\n",e5,94,ab,e0),16,null());
HXLINE(  88)		backText->scrollFactor->set(null(),null());
HXLINE(  89)		backText->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  90)		this->add(backText);
HXLINE(  92)		this->warningTween = ::flixel::tweens::FlxTween_obj::tween(this->keyWarning, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),0,null());
HXLINE(  94)		this->textUpdate();
HXLINE(  96)		this->super::create();
            	}


void KeyBindMenuController_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_814ae67f45575c24_100_update)
HXLINE( 102)		 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 104)		bool pressedAny = false;
HXLINE( 106)		{
HXLINE( 106)			int _g = 0;
HXDLIN( 106)			::Array< int > _g1 = this->allowedKeys;
HXDLIN( 106)			while((_g < _g1->length)){
HXLINE( 106)				int x = _g1->__get(_g);
HXDLIN( 106)				_g = (_g + 1);
HXLINE( 108)				if (!(pressedAny)) {
HXLINE( 108)					pressedAny = ::flixel::FlxG_obj::gamepads->anyHasState(x,2);
            				}
            				else {
HXLINE( 108)					pressedAny = true;
            				}
            			}
            		}
HXLINE( 112)		::String _hx_switch_0 = this->state;
            		if (  (_hx_switch_0==HX_("exiting",84,dc,da,24)) ){
HXLINE( 164)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("input",0a,c4,1d,be)) ){
HXLINE( 141)			this->tempKey = this->keys->__get(this->curSelected);
HXLINE( 142)			this->keys[this->curSelected] = HX_("?",3f,00,00,00);
HXLINE( 143)			this->textUpdate();
HXLINE( 144)			this->state = HX_("waiting",8d,e9,27,df);
HXLINE( 140)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("select",fc,1a,33,6a)) ){
HXLINE( 115)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE( 117)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("scrollMenu",4c,d4,18,06)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 118)				this->changeItem(-1);
            			}
HXLINE( 121)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE( 123)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("scrollMenu",4c,d4,18,06)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 124)				this->changeItem(1);
            			}
HXLINE( 127)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 128)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("scrollMenu",4c,d4,18,06)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 129)				this->state = HX_("input",0a,c4,1d,be);
            			}
            			else {
HXLINE( 131)				if (::PlayerSettings_obj::player1->controls->_pause->check()) {
HXLINE( 132)					::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("cancelMenu",39,a4,43,b7)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 133)					this->quit();
            				}
            				else {
HXLINE( 135)					if (::PlayerSettings_obj::player1->controls->_reset->check()) {
HXLINE( 136)						::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("cancelMenu",39,a4,43,b7)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 137)						this->reset();
            					}
            				}
            			}
HXLINE( 114)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("waiting",8d,e9,27,df)) ){
HXLINE( 147)			if (::PlayerSettings_obj::player1->controls->_pause->check()) {
HXLINE( 148)				this->keys[this->curSelected] = this->tempKey;
HXLINE( 149)				this->state = HX_("select",fc,1a,33,6a);
HXLINE( 150)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("cancelMenu",39,a4,43,b7)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
            			}
            			else {
HXLINE( 152)				if (::PlayerSettings_obj::player1->controls->_reset->check()) {
HXLINE( 153)					this->addKey(this->defaultKeys->__get(this->curSelected));
HXLINE( 154)					this->save();
HXLINE( 155)					this->state = HX_("select",fc,1a,33,6a);
            				}
            				else {
HXLINE( 157)					if (pressedAny) {
HXLINE( 158)						 ::flixel::input::gamepad::mappings::FlxGamepadMapping controller1 = controller->mapping;
HXDLIN( 158)						int this1 = controller1->getID(controller->firstJustPressedRawID());
HXDLIN( 158)						this->addKey(::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get_string(this1));
HXLINE( 159)						this->save();
HXLINE( 160)						this->state = HX_("select",fc,1a,33,6a);
            					}
            				}
            			}
HXLINE( 147)			goto _hx_goto_7;
            		}
            		/* default */{
HXLINE( 168)			this->state = HX_("select",fc,1a,33,6a);
            		}
            		_hx_goto_7:;
HXLINE( 172)		if (::flixel::FlxG_obj::gamepads->anyHasState(-2,2)) {
HXLINE( 173)			this->textUpdate();
            		}
HXLINE( 175)		this->super::update(elapsed);
            	}


void KeyBindMenuController_obj::textUpdate(){
            	HX_GC_STACKFRAME(&_hx_pos_814ae67f45575c24_179_textUpdate)
HXLINE( 181)		this->keyTextDisplay->clearFormats();
HXLINE( 182)		this->keyTextDisplay->set_text(HX_("\n\n",c0,08,00,00));
HXLINE( 184)		{
HXLINE( 184)			int _g = 0;
HXDLIN( 184)			while((_g < 4)){
HXLINE( 184)				_g = (_g + 1);
HXDLIN( 184)				int i = (_g - 1);
HXLINE( 186)				::String keyDisplay = this->keys->__get(i);
HXLINE( 188)				::String _hx_switch_0 = keyDisplay;
            				if (  (_hx_switch_0==HX_("A",41,00,00,00)) ){
HXLINE( 191)					keyDisplay = HX_("A (CROSS)",12,58,30,6a);
HXDLIN( 191)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("B",42,00,00,00)) ){
HXLINE( 193)					keyDisplay = HX_("B (CIRCLE)",8f,0c,cc,56);
HXDLIN( 193)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("X",58,00,00,00)) ){
HXLINE( 195)					keyDisplay = HX_("X (SQUARE)",8c,86,4a,62);
HXDLIN( 195)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("Y",59,00,00,00)) ){
HXLINE( 197)					keyDisplay = HX_("Y (TRIANGLE)",a0,df,96,7d);
HXDLIN( 197)					goto _hx_goto_10;
            				}
            				/* default */{
HXLINE( 199)					keyDisplay = ::StringTools_obj::replace(::StringTools_obj::replace(keyDisplay,HX_("STICK_DIGITAL",69,56,49,97),HX_("STICK",30,b1,ff,01)),HX_("_",5f,00,00,00),HX_(" ",20,00,00,00));
            				}
            				_hx_goto_10:;
HXLINE( 203)				int sectionStart = this->keyTextDisplay->text.length;
HXLINE( 204)				{
HXLINE( 204)					 ::flixel::text::FlxText _g1 = this->keyTextDisplay;
HXDLIN( 204)					::String _hx_tmp;
HXDLIN( 204)					if ((this->keys->__get(i) != this->keyText->__get(i))) {
HXLINE( 204)						_hx_tmp = (this->keys->__get(i) + HX_(" + ",b5,6d,18,00));
            					}
            					else {
HXLINE( 204)						_hx_tmp = HX_("",00,00,00,00);
            					}
HXDLIN( 204)					_g1->set_text((_g1->text + ((((this->keyText->__get(i) + HX_(": ",a6,32,00,00)) + _hx_tmp) + this->keyText->__get(i)) + HX_(" ARROW\n",61,9a,2c,9d))));
            				}
HXLINE( 205)				int sectionEnd = (this->keyTextDisplay->text.length - 1);
HXLINE( 207)				if ((i == this->curSelected)) {
HXLINE( 208)					 ::flixel::text::FlxText _hx_tmp = this->keyTextDisplay;
HXDLIN( 208)					_hx_tmp->addFormat( ::flixel::text::FlxTextFormat_obj::__alloc( HX_CTX ,-256,null(),null(),null()),sectionStart,sectionEnd);
            				}
            			}
            		}
HXLINE( 213)		this->keyTextDisplay->screenCenter(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyBindMenuController_obj,textUpdate,(void))

void KeyBindMenuController_obj::save(){
            	HX_STACKFRAME(&_hx_pos_814ae67f45575c24_217_save)
HXLINE( 219)		::flixel::FlxG_obj::save->data->__SetField(HX_("upBindController",74,44,4e,96),this->keys->__get(2),::hx::paccDynamic);
HXLINE( 220)		::flixel::FlxG_obj::save->data->__SetField(HX_("downBindController",bb,b4,78,f1),this->keys->__get(1),::hx::paccDynamic);
HXLINE( 221)		::flixel::FlxG_obj::save->data->__SetField(HX_("leftBindController",20,fb,c4,aa),this->keys->__get(0),::hx::paccDynamic);
HXLINE( 222)		::flixel::FlxG_obj::save->data->__SetField(HX_("rightBindController",b5,29,b4,47),this->keys->__get(3),::hx::paccDynamic);
HXLINE( 224)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyBindMenuController_obj,save,(void))

void KeyBindMenuController_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_814ae67f45575c24_228_reset)
HXLINE( 230)		{
HXLINE( 231)			this->keys[0] = this->defaultKeys->__get(0);
HXDLIN( 231)			this->keys[1] = this->defaultKeys->__get(1);
HXDLIN( 231)			this->keys[2] = this->defaultKeys->__get(2);
HXDLIN( 231)			this->keys[3] = this->defaultKeys->__get(3);
            		}
HXLINE( 233)		this->quit();
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyBindMenuController_obj,reset,(void))

void KeyBindMenuController_obj::quit(){
            	HX_GC_STACKFRAME(&_hx_pos_814ae67f45575c24_237_quit)
HXLINE( 239)		this->state = HX_("exiting",84,dc,da,24);
HXLINE( 241)		this->save();
HXLINE( 243)		::config::ConfigMenu_obj::startSong = false;
HXLINE( 244)		{
HXLINE( 244)			 ::flixel::FlxState nextState =  ::config::ConfigMenu_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 244)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 244)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyBindMenuController_obj,quit,(void))

void KeyBindMenuController_obj::addKey(::String r){
            	HX_STACKFRAME(&_hx_pos_814ae67f45575c24_248_addKey)
HXLINE( 250)		::haxe::Log_obj::trace(r,::hx::SourceInfo(HX_("source/config/KeyBindMenuController.hx",c0,0d,38,87),250,HX_("config.KeyBindMenuController",6b,00,97,f8),HX_("addKey",fe,99,02,9f)));
HXLINE( 252)		if (::hx::IsNull( r )) {
HXLINE( 254)			if (::flixel::FlxG_obj::gamepads->anyHasState(17,1)) {
HXLINE( 255)				r = HX_("LEFT_TRIGGER",a0,31,c6,eb);
            			}
            			else {
HXLINE( 257)				if (::flixel::FlxG_obj::gamepads->anyHasState(18,1)) {
HXLINE( 258)					r = HX_("RIGHT_TRIGGER",55,e2,81,00);
            				}
            				else {
HXLINE( 261)					r = HX_("START",42,ac,f9,01);
            				}
            			}
            		}
HXLINE( 265)		bool shouldReturn = true;
HXLINE( 267)		::Array< ::String > notAllowed = ::Array_obj< ::String >::__new(0);
HXLINE( 269)		{
HXLINE( 269)			int _g = 0;
HXDLIN( 269)			::Array< ::String > _g1 = this->keys;
HXDLIN( 269)			while((_g < _g1->length)){
HXLINE( 269)				::String x = _g1->__get(_g);
HXDLIN( 269)				_g = (_g + 1);
HXLINE( 270)				if ((x != this->tempKey)) {
HXLINE( 270)					notAllowed->push(x);
            				}
            			}
            		}
HXLINE( 273)		{
HXLINE( 273)			int _g2 = 0;
HXDLIN( 273)			::Array< ::String > _g3 = this->blacklist;
HXDLIN( 273)			while((_g2 < _g3->length)){
HXLINE( 273)				::String x = _g3->__get(_g2);
HXDLIN( 273)				_g2 = (_g2 + 1);
HXDLIN( 273)				notAllowed->push(x);
            			}
            		}
HXLINE( 275)		if ((this->curSelected != 4)) {
HXLINE( 277)			int _g = 0;
HXDLIN( 277)			::Array< ::String > _g1 = this->keyText;
HXDLIN( 277)			while((_g < _g1->length)){
HXLINE( 277)				::String x = _g1->__get(_g);
HXDLIN( 277)				_g = (_g + 1);
HXLINE( 278)				if ((x != this->keyText->__get(this->curSelected))) {
HXLINE( 278)					notAllowed->push(x);
            				}
            			}
            		}
            		else {
HXLINE( 282)			int _g = 0;
HXDLIN( 282)			::Array< ::String > _g1 = this->keyText;
HXDLIN( 282)			while((_g < _g1->length)){
HXLINE( 282)				::String x = _g1->__get(_g);
HXDLIN( 282)				_g = (_g + 1);
HXDLIN( 282)				notAllowed->push(x);
            			}
            		}
HXLINE( 284)		::haxe::Log_obj::trace(notAllowed,::hx::SourceInfo(HX_("source/config/KeyBindMenuController.hx",c0,0d,38,87),284,HX_("config.KeyBindMenuController",6b,00,97,f8),HX_("addKey",fe,99,02,9f)));
HXLINE( 286)		{
HXLINE( 286)			int _g4 = 0;
HXDLIN( 286)			while((_g4 < notAllowed->length)){
HXLINE( 286)				::String x = notAllowed->__get(_g4);
HXDLIN( 286)				_g4 = (_g4 + 1);
HXDLIN( 286)				if ((x == r)) {
HXLINE( 286)					shouldReturn = false;
            				}
            			}
            		}
HXLINE( 288)		if (shouldReturn) {
HXLINE( 289)			this->keys[this->curSelected] = r;
HXLINE( 290)			::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("scrollMenu",4c,d4,18,06)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE( 292)			bool _hx_tmp;
HXDLIN( 292)			if (!(shouldReturn)) {
HXLINE( 292)				_hx_tmp = this->keys->contains(r);
            			}
            			else {
HXLINE( 292)				_hx_tmp = false;
            			}
HXDLIN( 292)			if (_hx_tmp) {
HXLINE( 293)				this->keys[this->keys->indexOf(r,null())] = this->tempKey;
HXLINE( 294)				this->keys[this->curSelected] = r;
HXLINE( 295)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("scrollMenu",4c,d4,18,06)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
            			}
            			else {
HXLINE( 298)				this->keys[this->curSelected] = this->tempKey;
HXLINE( 299)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("cancelMenu",39,a4,43,b7)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 300)				this->keyWarning->set_alpha(( (Float)(1) ));
HXLINE( 301)				this->warningTween->cancel();
HXLINE( 302)				this->warningTween = ::flixel::tweens::FlxTween_obj::tween(this->keyWarning, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),2)
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            			}
            		}
HXLINE( 305)		bool _hx_tmp;
HXDLIN( 305)		if (!(::PlayerSettings_obj::player1->controls->_downP->check())) {
HXLINE( 305)			_hx_tmp = ::PlayerSettings_obj::player1->controls->_upP->check();
            		}
            		else {
HXLINE( 305)			_hx_tmp = true;
            		}
HXDLIN( 305)		if (_hx_tmp) {
HXLINE( 306)			this->changeItem(0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyBindMenuController_obj,addKey,(void))

void KeyBindMenuController_obj::changeItem(::hx::Null< int >  __o__amount){
            		int _amount = __o__amount.Default(0);
            	HX_STACKFRAME(&_hx_pos_814ae67f45575c24_311_changeItem)
HXLINE( 312)		 ::config::KeyBindMenuController _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 312)		_hx_tmp->curSelected = (_hx_tmp->curSelected + _amount);
HXLINE( 314)		if ((this->curSelected > 3)) {
HXLINE( 315)			this->curSelected = 0;
            		}
HXLINE( 316)		if ((this->curSelected < 0)) {
HXLINE( 317)			this->curSelected = 3;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyBindMenuController_obj,changeItem,(void))


::hx::ObjectPtr< KeyBindMenuController_obj > KeyBindMenuController_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< KeyBindMenuController_obj > __this = new KeyBindMenuController_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< KeyBindMenuController_obj > KeyBindMenuController_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	KeyBindMenuController_obj *__this = (KeyBindMenuController_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyBindMenuController_obj), true, "config.KeyBindMenuController"));
	*(void **)__this = KeyBindMenuController_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

KeyBindMenuController_obj::KeyBindMenuController_obj()
{
}

void KeyBindMenuController_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyBindMenuController);
	HX_MARK_MEMBER_NAME(keyTextDisplay,"keyTextDisplay");
	HX_MARK_MEMBER_NAME(keyWarning,"keyWarning");
	HX_MARK_MEMBER_NAME(warningTween,"warningTween");
	HX_MARK_MEMBER_NAME(keyText,"keyText");
	HX_MARK_MEMBER_NAME(defaultKeys,"defaultKeys");
	HX_MARK_MEMBER_NAME(allowedKeys,"allowedKeys");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_MEMBER_NAME(tempKey,"tempKey");
	HX_MARK_MEMBER_NAME(blacklist,"blacklist");
	HX_MARK_MEMBER_NAME(state,"state");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void KeyBindMenuController_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyTextDisplay,"keyTextDisplay");
	HX_VISIT_MEMBER_NAME(keyWarning,"keyWarning");
	HX_VISIT_MEMBER_NAME(warningTween,"warningTween");
	HX_VISIT_MEMBER_NAME(keyText,"keyText");
	HX_VISIT_MEMBER_NAME(defaultKeys,"defaultKeys");
	HX_VISIT_MEMBER_NAME(allowedKeys,"allowedKeys");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(keys,"keys");
	HX_VISIT_MEMBER_NAME(tempKey,"tempKey");
	HX_VISIT_MEMBER_NAME(blacklist,"blacklist");
	HX_VISIT_MEMBER_NAME(state,"state");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val KeyBindMenuController_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return ::hx::Val( keys ); }
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save_dyn() ); }
		if (HX_FIELD_EQ(inName,"quit") ) { return ::hx::Val( quit_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return ::hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"addKey") ) { return ::hx::Val( addKey_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keyText") ) { return ::hx::Val( keyText ); }
		if (HX_FIELD_EQ(inName,"tempKey") ) { return ::hx::Val( tempKey ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blacklist") ) { return ::hx::Val( blacklist ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"keyWarning") ) { return ::hx::Val( keyWarning ); }
		if (HX_FIELD_EQ(inName,"textUpdate") ) { return ::hx::Val( textUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultKeys") ) { return ::hx::Val( defaultKeys ); }
		if (HX_FIELD_EQ(inName,"allowedKeys") ) { return ::hx::Val( allowedKeys ); }
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"warningTween") ) { return ::hx::Val( warningTween ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyTextDisplay") ) { return ::hx::Val( keyTextDisplay ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val KeyBindMenuController_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keyText") ) { keyText=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempKey") ) { tempKey=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blacklist") ) { blacklist=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"keyWarning") ) { keyWarning=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultKeys") ) { defaultKeys=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowedKeys") ) { allowedKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"warningTween") ) { warningTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyTextDisplay") ) { keyTextDisplay=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyBindMenuController_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyTextDisplay",b6,e9,da,71));
	outFields->push(HX_("keyWarning",7d,7a,53,78));
	outFields->push(HX_("warningTween",6f,32,71,d8));
	outFields->push(HX_("keyText",ec,3d,d3,a6));
	outFields->push(HX_("defaultKeys",55,db,c5,18));
	outFields->push(HX_("allowedKeys",3c,b3,e0,3a));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("keys",f4,e1,06,47));
	outFields->push(HX_("tempKey",eb,a2,b3,46));
	outFields->push(HX_("blacklist",9d,3d,3c,1c));
	outFields->push(HX_("state",11,76,0b,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KeyBindMenuController_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(KeyBindMenuController_obj,keyTextDisplay),HX_("keyTextDisplay",b6,e9,da,71)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(KeyBindMenuController_obj,keyWarning),HX_("keyWarning",7d,7a,53,78)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(KeyBindMenuController_obj,warningTween),HX_("warningTween",6f,32,71,d8)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(KeyBindMenuController_obj,keyText),HX_("keyText",ec,3d,d3,a6)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(KeyBindMenuController_obj,defaultKeys),HX_("defaultKeys",55,db,c5,18)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(KeyBindMenuController_obj,allowedKeys),HX_("allowedKeys",3c,b3,e0,3a)},
	{::hx::fsInt,(int)offsetof(KeyBindMenuController_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(KeyBindMenuController_obj,keys),HX_("keys",f4,e1,06,47)},
	{::hx::fsString,(int)offsetof(KeyBindMenuController_obj,tempKey),HX_("tempKey",eb,a2,b3,46)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(KeyBindMenuController_obj,blacklist),HX_("blacklist",9d,3d,3c,1c)},
	{::hx::fsString,(int)offsetof(KeyBindMenuController_obj,state),HX_("state",11,76,0b,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *KeyBindMenuController_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyBindMenuController_obj_sMemberFields[] = {
	HX_("keyTextDisplay",b6,e9,da,71),
	HX_("keyWarning",7d,7a,53,78),
	HX_("warningTween",6f,32,71,d8),
	HX_("keyText",ec,3d,d3,a6),
	HX_("defaultKeys",55,db,c5,18),
	HX_("allowedKeys",3c,b3,e0,3a),
	HX_("curSelected",fb,eb,ab,32),
	HX_("keys",f4,e1,06,47),
	HX_("tempKey",eb,a2,b3,46),
	HX_("blacklist",9d,3d,3c,1c),
	HX_("state",11,76,0b,84),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("textUpdate",96,06,f6,bd),
	HX_("save",3d,8b,4d,4c),
	HX_("reset",cf,49,c8,e6),
	HX_("quit",cf,3f,0a,4b),
	HX_("addKey",fe,99,02,9f),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

::hx::Class KeyBindMenuController_obj::__mClass;

void KeyBindMenuController_obj::__register()
{
	KeyBindMenuController_obj _hx_dummy;
	KeyBindMenuController_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("config.KeyBindMenuController",6b,00,97,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyBindMenuController_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyBindMenuController_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyBindMenuController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyBindMenuController_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace config
