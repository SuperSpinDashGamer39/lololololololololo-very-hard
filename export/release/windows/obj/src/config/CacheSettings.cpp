// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_ImageCache
#include <ImageCache.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_config_CacheSettings
#include <config/CacheSettings.h>
#endif
#ifndef INCLUDED_config_ConfigMenu
#include <config/ConfigMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextFormat
#include <flixel/text/FlxTextFormat.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ab9b4dc8a7b78bce_25_new,"config.CacheSettings","new",0x5b26e7eb,"config.CacheSettings.new","config/CacheSettings.hx",25,0xc7178fe6)
static const ::String _hx_array_data_3a2c1679_1[] = {
	HX_("off",6f,93,54,00),HX_("on",1f,61,00,00),
};
static const ::String _hx_array_data_3a2c1679_2[] = {
	HX_("MUSIC",85,08,49,8e),HX_("CHARACTERS",aa,cc,d7,47),HX_("GRAPHICS",cb,88,ed,6b),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ab9b4dc8a7b78bce_44_create,"config.CacheSettings","create",0xf6e55851,"config.CacheSettings.create","config/CacheSettings.hx",44,0xc7178fe6)
HX_LOCAL_STACK_FRAME(_hx_pos_ab9b4dc8a7b78bce_94_update,"config.CacheSettings","update",0x01db775e,"config.CacheSettings.update","config/CacheSettings.hx",94,0xc7178fe6)
HX_LOCAL_STACK_FRAME(_hx_pos_ab9b4dc8a7b78bce_133_textUpdate,"config.CacheSettings","textUpdate",0x4a27c66b,"config.CacheSettings.textUpdate","config/CacheSettings.hx",133,0xc7178fe6)
HX_LOCAL_STACK_FRAME(_hx_pos_ab9b4dc8a7b78bce_154_save,"config.CacheSettings","save",0x6a2f0d52,"config.CacheSettings.save","config/CacheSettings.hx",154,0xc7178fe6)
HX_LOCAL_STACK_FRAME(_hx_pos_ab9b4dc8a7b78bce_166_quit,"config.CacheSettings","quit",0x68ebc1e4,"config.CacheSettings.quit","config/CacheSettings.hx",166,0xc7178fe6)
HX_LOCAL_STACK_FRAME(_hx_pos_ab9b4dc8a7b78bce_178_changeItem,"config.CacheSettings","changeItem",0xac3aba78,"config.CacheSettings.changeItem","config/CacheSettings.hx",178,0xc7178fe6)
HX_LOCAL_STACK_FRAME(_hx_pos_ab9b4dc8a7b78bce_28_boot,"config.CacheSettings","boot",0x5efd0647,"config.CacheSettings.boot","config/CacheSettings.hx",28,0xc7178fe6)
HX_LOCAL_STACK_FRAME(_hx_pos_ab9b4dc8a7b78bce_33_boot,"config.CacheSettings","boot",0x5efd0647,"config.CacheSettings.boot","config/CacheSettings.hx",33,0xc7178fe6)
namespace config{

void CacheSettings_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_ab9b4dc8a7b78bce_25_new)
HXLINE(  41)		this->state = HX_("select",fc,1a,33,6a);
HXLINE(  39)		this->curSelected = 0;
HXLINE(  37)		this->onOff = ::Array_obj< ::String >::fromData( _hx_array_data_3a2c1679_1,2);
HXLINE(  36)		this->names = ::Array_obj< ::String >::fromData( _hx_array_data_3a2c1679_2,3);
HXLINE(  25)		super::__construct(TransIn,TransOut);
            	}

Dynamic CacheSettings_obj::__CreateEmpty() { return new CacheSettings_obj; }

void *CacheSettings_obj::_hx_vtable = 0;

Dynamic CacheSettings_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CacheSettings_obj > _hx_result = new CacheSettings_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CacheSettings_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x139e3323) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x139e3323;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CacheSettings_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_ab9b4dc8a7b78bce_44_create)
HXLINE(  46)		int bgColor = -6854978;
HXLINE(  47)		::String font = HX_("assets/fonts/Funkin-Bold.otf",bd,87,d9,8a);
HXLINE(  49)		if (::config::CacheSettings_obj::noFunMode) {
HXLINE(  50)			bgColor = -13619152;
HXLINE(  51)			font = HX_("VCR OSD Mono",be,44,e4,b8);
HXLINE(  52)			::config::CacheSettings_obj::noFunMode = false;
            		}
HXLINE(  55)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,null(),null());
HXDLIN(  55)		::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  55)		 ::Dynamic bg1;
HXDLIN(  55)		if (::ImageCache_obj::exists(data)) {
HXLINE(  55)			bg1 = ::ImageCache_obj::get(data);
            		}
            		else {
HXLINE(  55)			bg1 = data;
            		}
HXDLIN(  55)		 ::flixel::FlxSprite bg2 = bg->loadGraphic(bg1,null(),null(),null(),null(),null());
HXLINE(  56)		bg2->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  57)		bg2->scrollFactor->set_y(( (Float)(0) ));
HXLINE(  58)		bg2->setGraphicSize(::Std_obj::_hx_int((bg2->get_width() * ((Float)1.18))),null());
HXLINE(  59)		bg2->updateHitbox();
HXLINE(  60)		bg2->screenCenter(null());
HXLINE(  61)		bg2->set_antialiasing(true);
HXLINE(  62)		bg2->set_color(bgColor);
HXLINE(  63)		this->add(bg2);
HXLINE(  65)		this->keyTextDisplay =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,1280,HX_("",00,00,00,00),72,null());
HXLINE(  66)		this->keyTextDisplay->scrollFactor->set(0,0);
HXLINE(  67)		this->keyTextDisplay->setFormat(font,72,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  68)		this->keyTextDisplay->set_borderSize(( (Float)(3) ));
HXLINE(  69)		this->keyTextDisplay->set_borderQuality(( (Float)(1) ));
HXLINE(  70)		this->add(this->keyTextDisplay);
HXLINE(  72)		 ::flixel::text::FlxText backText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 21),0,HX_("ESCAPE - Back to Menu",3d,41,c6,0e),16,null());
HXLINE(  73)		backText->scrollFactor->set(null(),null());
HXLINE(  74)		backText->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  75)		this->add(backText);
HXLINE(  77)		bool _hx_tmp;
HXDLIN(  77)		bool _hx_tmp1;
HXDLIN(  77)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("musicPreload",a4,2d,b7,eb),::hx::paccDynamic) )) {
HXLINE(  77)			_hx_tmp1 = ::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("charPreload",93,37,c8,5c),::hx::paccDynamic) );
            		}
            		else {
HXLINE(  77)			_hx_tmp1 = true;
            		}
HXDLIN(  77)		if (!(_hx_tmp1)) {
HXLINE(  77)			_hx_tmp = ::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("graphicsPreload",3e,f6,9b,54),::hx::paccDynamic) );
            		}
            		else {
HXLINE(  77)			_hx_tmp = true;
            		}
HXDLIN(  77)		if (_hx_tmp) {
HXLINE(  81)			::flixel::FlxG_obj::save->data->__SetField(HX_("musicPreload",a4,2d,b7,eb),true,::hx::paccDynamic);
HXLINE(  82)			::flixel::FlxG_obj::save->data->__SetField(HX_("charPreload",93,37,c8,5c),true,::hx::paccDynamic);
HXLINE(  83)			::flixel::FlxG_obj::save->data->__SetField(HX_("graphicsPreload",3e,f6,9b,54),true,::hx::paccDynamic);
            		}
HXLINE(  86)		this->settings = ::Array_obj< bool >::__new(3)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("musicPreload",a4,2d,b7,eb),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("charPreload",93,37,c8,5c),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("graphicsPreload",3e,f6,9b,54),::hx::paccDynamic)));
HXLINE(  88)		this->textUpdate();
HXLINE(  90)		this->super::create();
            	}


void CacheSettings_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_ab9b4dc8a7b78bce_94_update)
HXLINE(  96)		::String _hx_switch_0 = this->state;
            		if (  (_hx_switch_0==HX_("exiting",84,dc,da,24)) ){
HXLINE( 120)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("select",fc,1a,33,6a)) ){
HXLINE(  99)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE( 101)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("scrollMenu",4c,d4,18,06)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 102)				this->changeItem(-1);
            			}
HXLINE( 105)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE( 107)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("scrollMenu",4c,d4,18,06)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 108)				this->changeItem(1);
            			}
HXLINE( 111)			bool _hx_tmp;
HXDLIN( 111)			bool _hx_tmp1;
HXDLIN( 111)			if (!(::PlayerSettings_obj::player1->controls->_accept->check())) {
HXLINE( 111)				_hx_tmp1 = ::PlayerSettings_obj::player1->controls->_leftP->check();
            			}
            			else {
HXLINE( 111)				_hx_tmp1 = true;
            			}
HXDLIN( 111)			if (!(_hx_tmp1)) {
HXLINE( 111)				_hx_tmp = ::PlayerSettings_obj::player1->controls->_rightP->check();
            			}
            			else {
HXLINE( 111)				_hx_tmp = true;
            			}
HXDLIN( 111)			if (_hx_tmp) {
HXLINE( 112)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("scrollMenu",4c,d4,18,06)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 113)				this->settings[this->curSelected] = !(this->settings->__get(this->curSelected));
            			}
            			else {
HXLINE( 115)				if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 116)					::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("cancelMenu",39,a4,43,b7)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 117)					this->quit();
            				}
            			}
HXLINE(  98)			goto _hx_goto_4;
            		}
            		/* default */{
HXLINE( 124)			this->state = HX_("select",fc,1a,33,6a);
            		}
            		_hx_goto_4:;
HXLINE( 128)		if (( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY()) {
HXLINE( 129)			this->textUpdate();
            		}
            	}


void CacheSettings_obj::textUpdate(){
            	HX_GC_STACKFRAME(&_hx_pos_ab9b4dc8a7b78bce_133_textUpdate)
HXLINE( 135)		this->keyTextDisplay->clearFormats();
HXLINE( 136)		this->keyTextDisplay->set_text(HX_("\n\nPRELOAD SETTINGS\n\n",3a,18,c1,0f));
HXLINE( 138)		{
HXLINE( 138)			{
HXLINE( 140)				int sectionStart = this->keyTextDisplay->text.length;
HXLINE( 141)				{
HXLINE( 141)					 ::flixel::text::FlxText _g = this->keyTextDisplay;
HXDLIN( 141)					::String _hx_tmp;
HXDLIN( 141)					if (this->settings->__get(0)) {
HXLINE( 141)						_hx_tmp = this->onOff->__get(1);
            					}
            					else {
HXLINE( 141)						_hx_tmp = this->onOff->__get(0);
            					}
HXDLIN( 141)					_g->set_text((_g->text + (((this->names->__get(0) + HX_(": ",a6,32,00,00)) + _hx_tmp) + HX_("\n",0a,00,00,00))));
            				}
HXLINE( 142)				int sectionEnd = (this->keyTextDisplay->text.length - 1);
HXLINE( 144)				if ((0 == this->curSelected)) {
HXLINE( 145)					 ::flixel::text::FlxText _hx_tmp = this->keyTextDisplay;
HXDLIN( 145)					_hx_tmp->addFormat( ::flixel::text::FlxTextFormat_obj::__alloc( HX_CTX ,-256,null(),null(),null()),sectionStart,sectionEnd);
            				}
            			}
HXLINE( 138)			{
HXLINE( 140)				int sectionStart1 = this->keyTextDisplay->text.length;
HXLINE( 141)				{
HXLINE( 141)					 ::flixel::text::FlxText _g1 = this->keyTextDisplay;
HXDLIN( 141)					::String _hx_tmp1;
HXDLIN( 141)					if (this->settings->__get(1)) {
HXLINE( 141)						_hx_tmp1 = this->onOff->__get(1);
            					}
            					else {
HXLINE( 141)						_hx_tmp1 = this->onOff->__get(0);
            					}
HXDLIN( 141)					_g1->set_text((_g1->text + (((this->names->__get(1) + HX_(": ",a6,32,00,00)) + _hx_tmp1) + HX_("\n",0a,00,00,00))));
            				}
HXLINE( 142)				int sectionEnd1 = (this->keyTextDisplay->text.length - 1);
HXLINE( 144)				if ((1 == this->curSelected)) {
HXLINE( 145)					 ::flixel::text::FlxText _hx_tmp = this->keyTextDisplay;
HXDLIN( 145)					_hx_tmp->addFormat( ::flixel::text::FlxTextFormat_obj::__alloc( HX_CTX ,-256,null(),null(),null()),sectionStart1,sectionEnd1);
            				}
            			}
HXLINE( 138)			{
HXLINE( 140)				int sectionStart2 = this->keyTextDisplay->text.length;
HXLINE( 141)				{
HXLINE( 141)					 ::flixel::text::FlxText _g2 = this->keyTextDisplay;
HXDLIN( 141)					::String _hx_tmp2;
HXDLIN( 141)					if (this->settings->__get(2)) {
HXLINE( 141)						_hx_tmp2 = this->onOff->__get(1);
            					}
            					else {
HXLINE( 141)						_hx_tmp2 = this->onOff->__get(0);
            					}
HXDLIN( 141)					_g2->set_text((_g2->text + (((this->names->__get(2) + HX_(": ",a6,32,00,00)) + _hx_tmp2) + HX_("\n",0a,00,00,00))));
            				}
HXLINE( 142)				int sectionEnd2 = (this->keyTextDisplay->text.length - 1);
HXLINE( 144)				if ((2 == this->curSelected)) {
HXLINE( 145)					 ::flixel::text::FlxText _hx_tmp = this->keyTextDisplay;
HXDLIN( 145)					_hx_tmp->addFormat( ::flixel::text::FlxTextFormat_obj::__alloc( HX_CTX ,-256,null(),null(),null()),sectionStart2,sectionEnd2);
            				}
            			}
            		}
HXLINE( 150)		this->keyTextDisplay->screenCenter(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CacheSettings_obj,textUpdate,(void))

void CacheSettings_obj::save(){
            	HX_STACKFRAME(&_hx_pos_ab9b4dc8a7b78bce_154_save)
HXLINE( 156)		::flixel::FlxG_obj::save->data->__SetField(HX_("musicPreload",a4,2d,b7,eb),this->settings->__get(0),::hx::paccDynamic);
HXLINE( 157)		::flixel::FlxG_obj::save->data->__SetField(HX_("charPreload",93,37,c8,5c),this->settings->__get(1),::hx::paccDynamic);
HXLINE( 158)		::flixel::FlxG_obj::save->data->__SetField(HX_("graphicsPreload",3e,f6,9b,54),this->settings->__get(2),::hx::paccDynamic);
HXLINE( 160)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CacheSettings_obj,save,(void))

void CacheSettings_obj::quit(){
            	HX_STACKFRAME(&_hx_pos_ab9b4dc8a7b78bce_166_quit)
HXLINE( 168)		this->state = HX_("exiting",84,dc,da,24);
HXLINE( 170)		this->save();
HXLINE( 172)		::config::ConfigMenu_obj::startSong = false;
HXLINE( 173)		{
HXLINE( 173)			 ::flixel::FlxState nextState = ::config::CacheSettings_obj::returnLoc;
HXDLIN( 173)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 173)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CacheSettings_obj,quit,(void))

void CacheSettings_obj::changeItem(::hx::Null< int >  __o__amount){
            		int _amount = __o__amount.Default(0);
            	HX_STACKFRAME(&_hx_pos_ab9b4dc8a7b78bce_178_changeItem)
HXLINE( 179)		 ::config::CacheSettings _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 179)		_hx_tmp->curSelected = (_hx_tmp->curSelected + _amount);
HXLINE( 181)		if ((this->curSelected > 2)) {
HXLINE( 182)			this->curSelected = 0;
            		}
HXLINE( 183)		if ((this->curSelected < 0)) {
HXLINE( 184)			this->curSelected = 2;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CacheSettings_obj,changeItem,(void))

bool CacheSettings_obj::noFunMode;

 ::flixel::FlxState CacheSettings_obj::returnLoc;

bool CacheSettings_obj::thing;


::hx::ObjectPtr< CacheSettings_obj > CacheSettings_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CacheSettings_obj > __this = new CacheSettings_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CacheSettings_obj > CacheSettings_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CacheSettings_obj *__this = (CacheSettings_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CacheSettings_obj), true, "config.CacheSettings"));
	*(void **)__this = CacheSettings_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CacheSettings_obj::CacheSettings_obj()
{
}

void CacheSettings_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CacheSettings);
	HX_MARK_MEMBER_NAME(keyTextDisplay,"keyTextDisplay");
	HX_MARK_MEMBER_NAME(settings,"settings");
	HX_MARK_MEMBER_NAME(names,"names");
	HX_MARK_MEMBER_NAME(onOff,"onOff");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(state,"state");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CacheSettings_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyTextDisplay,"keyTextDisplay");
	HX_VISIT_MEMBER_NAME(settings,"settings");
	HX_VISIT_MEMBER_NAME(names,"names");
	HX_VISIT_MEMBER_NAME(onOff,"onOff");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(state,"state");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CacheSettings_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save_dyn() ); }
		if (HX_FIELD_EQ(inName,"quit") ) { return ::hx::Val( quit_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { return ::hx::Val( names ); }
		if (HX_FIELD_EQ(inName,"onOff") ) { return ::hx::Val( onOff ); }
		if (HX_FIELD_EQ(inName,"state") ) { return ::hx::Val( state ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"settings") ) { return ::hx::Val( settings ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textUpdate") ) { return ::hx::Val( textUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyTextDisplay") ) { return ::hx::Val( keyTextDisplay ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CacheSettings_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"thing") ) { outValue = ( thing ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"noFunMode") ) { outValue = ( noFunMode ); return true; }
		if (HX_FIELD_EQ(inName,"returnLoc") ) { outValue = ( returnLoc ); return true; }
	}
	return false;
}

::hx::Val CacheSettings_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { names=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onOff") ) { onOff=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"settings") ) { settings=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyTextDisplay") ) { keyTextDisplay=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CacheSettings_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"thing") ) { thing=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"noFunMode") ) { noFunMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"returnLoc") ) { returnLoc=ioValue.Cast<  ::flixel::FlxState >(); return true; }
	}
	return false;
}

void CacheSettings_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyTextDisplay",b6,e9,da,71));
	outFields->push(HX_("settings",e3,7c,3d,8b));
	outFields->push(HX_("names",c8,8f,84,96));
	outFields->push(HX_("onOff",90,27,6c,32));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("state",11,76,0b,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CacheSettings_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CacheSettings_obj,keyTextDisplay),HX_("keyTextDisplay",b6,e9,da,71)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(CacheSettings_obj,settings),HX_("settings",e3,7c,3d,8b)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CacheSettings_obj,names),HX_("names",c8,8f,84,96)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CacheSettings_obj,onOff),HX_("onOff",90,27,6c,32)},
	{::hx::fsInt,(int)offsetof(CacheSettings_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsString,(int)offsetof(CacheSettings_obj,state),HX_("state",11,76,0b,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CacheSettings_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &CacheSettings_obj::noFunMode,HX_("noFunMode",01,19,88,20)},
	{::hx::fsObject /*  ::flixel::FlxState */ ,(void *) &CacheSettings_obj::returnLoc,HX_("returnLoc",b0,75,80,0c)},
	{::hx::fsBool,(void *) &CacheSettings_obj::thing,HX_("thing",ee,87,89,0f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CacheSettings_obj_sMemberFields[] = {
	HX_("keyTextDisplay",b6,e9,da,71),
	HX_("settings",e3,7c,3d,8b),
	HX_("names",c8,8f,84,96),
	HX_("onOff",90,27,6c,32),
	HX_("curSelected",fb,eb,ab,32),
	HX_("state",11,76,0b,84),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("textUpdate",96,06,f6,bd),
	HX_("save",3d,8b,4d,4c),
	HX_("quit",cf,3f,0a,4b),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

static void CacheSettings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CacheSettings_obj::noFunMode,"noFunMode");
	HX_MARK_MEMBER_NAME(CacheSettings_obj::returnLoc,"returnLoc");
	HX_MARK_MEMBER_NAME(CacheSettings_obj::thing,"thing");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CacheSettings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CacheSettings_obj::noFunMode,"noFunMode");
	HX_VISIT_MEMBER_NAME(CacheSettings_obj::returnLoc,"returnLoc");
	HX_VISIT_MEMBER_NAME(CacheSettings_obj::thing,"thing");
};

#endif

::hx::Class CacheSettings_obj::__mClass;

static ::String CacheSettings_obj_sStaticFields[] = {
	HX_("noFunMode",01,19,88,20),
	HX_("returnLoc",b0,75,80,0c),
	HX_("thing",ee,87,89,0f),
	::String(null())
};

void CacheSettings_obj::__register()
{
	CacheSettings_obj _hx_dummy;
	CacheSettings_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("config.CacheSettings",79,16,2c,3a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CacheSettings_obj::__GetStatic;
	__mClass->mSetStaticField = &CacheSettings_obj::__SetStatic;
	__mClass->mMarkFunc = CacheSettings_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CacheSettings_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CacheSettings_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CacheSettings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CacheSettings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CacheSettings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CacheSettings_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CacheSettings_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ab9b4dc8a7b78bce_28_boot)
HXDLIN(  28)		noFunMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ab9b4dc8a7b78bce_33_boot)
HXDLIN(  33)		thing = false;
            	}
}

} // end namespace config
