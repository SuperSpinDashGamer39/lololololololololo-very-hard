// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_ImageCache
#include <ImageCache.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a1045cb8661d1cf7_10_add,"ImageCache","add",0xa829b73a,"ImageCache.add","ImageCache.hx",10,0xc19d7c17)
HX_LOCAL_STACK_FRAME(_hx_pos_a1045cb8661d1cf7_19_get,"ImageCache","get",0xa82e45af,"ImageCache.get","ImageCache.hx",19,0xc19d7c17)
HX_LOCAL_STACK_FRAME(_hx_pos_a1045cb8661d1cf7_23_exists,"ImageCache","exists",0x54efce63,"ImageCache.exists","ImageCache.hx",23,0xc19d7c17)
HX_LOCAL_STACK_FRAME(_hx_pos_a1045cb8661d1cf7_8_boot,"ImageCache","boot",0x7d0834f9,"ImageCache.boot","ImageCache.hx",8,0xc19d7c17)

void ImageCache_obj::__construct() { }

Dynamic ImageCache_obj::__CreateEmpty() { return new ImageCache_obj; }

void *ImageCache_obj::_hx_vtable = 0;

Dynamic ImageCache_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImageCache_obj > _hx_result = new ImageCache_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageCache_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b5687c7;
}

 ::haxe::ds::StringMap ImageCache_obj::cache;

void ImageCache_obj::add(::String path){
            	HX_STACKFRAME(&_hx_pos_a1045cb8661d1cf7_10_add)
HXLINE(  12)		 ::flixel::graphics::FlxGraphic data = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(::openfl::display::BitmapData_obj::fromFile(path),null(),null(),null());
HXLINE(  13)		data->persist = true;
HXLINE(  15)		::ImageCache_obj::cache->set(path,data);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageCache_obj,add,(void))

 ::flixel::graphics::FlxGraphic ImageCache_obj::get(::String path){
            	HX_STACKFRAME(&_hx_pos_a1045cb8661d1cf7_19_get)
HXDLIN(  19)		return ( ( ::flixel::graphics::FlxGraphic)(::ImageCache_obj::cache->get(path)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageCache_obj,get,return )

bool ImageCache_obj::exists(::String path){
            	HX_STACKFRAME(&_hx_pos_a1045cb8661d1cf7_23_exists)
HXDLIN(  23)		return ::ImageCache_obj::cache->exists(path);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageCache_obj,exists,return )


ImageCache_obj::ImageCache_obj()
{
}

bool ImageCache_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = ( cache ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
	}
	return false;
}

bool ImageCache_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ImageCache_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ImageCache_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ImageCache_obj::cache,HX_("cache",42,9a,14,41)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ImageCache_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageCache_obj::cache,"cache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageCache_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageCache_obj::cache,"cache");
};

#endif

::hx::Class ImageCache_obj::__mClass;

static ::String ImageCache_obj_sStaticFields[] = {
	HX_("cache",42,9a,14,41),
	HX_("add",21,f2,49,00),
	HX_("get",96,80,4e,00),
	HX_("exists",dc,1d,e0,bf),
	::String(null())
};

void ImageCache_obj::__register()
{
	ImageCache_obj _hx_dummy;
	ImageCache_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ImageCache",07,65,93,43);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageCache_obj::__GetStatic;
	__mClass->mSetStaticField = &ImageCache_obj::__SetStatic;
	__mClass->mMarkFunc = ImageCache_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ImageCache_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ImageCache_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageCache_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageCache_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageCache_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ImageCache_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_a1045cb8661d1cf7_8_boot)
HXDLIN(   8)		cache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

