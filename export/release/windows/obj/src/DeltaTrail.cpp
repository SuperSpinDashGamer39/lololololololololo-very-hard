// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_DeltaTrail
#include <DeltaTrail.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5b4bd303bee831ba_18_new,"DeltaTrail","new",0xf3885cc0,"DeltaTrail.new","DeltaTrail.hx",18,0xb3077ab0)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4bd303bee831ba_31_update,"DeltaTrail","update",0x55a4f5a9,"DeltaTrail.update","DeltaTrail.hx",31,0xb3077ab0)

void DeltaTrail_obj::__construct( ::flixel::FlxSprite Target, ::Dynamic Graphic,::hx::Null< int >  __o_Length,::hx::Null< Float >  __o_Delay,::hx::Null< Float >  __o_Alpha,::hx::Null< Float >  __o_Diff){
            		int Length = __o_Length.Default(10);
            		Float Delay = __o_Delay.Default(((Float)0.05));
            		Float Alpha = __o_Alpha.Default(((Float)0.4));
            		Float Diff = __o_Diff.Default(((Float)0.05));
            	HX_STACKFRAME(&_hx_pos_5b4bd303bee831ba_18_new)
HXLINE(  21)		this->_timer = ((Float)0);
HXLINE(  26)		super::__construct(Target,Graphic,Length,0,Alpha,Diff);
HXLINE(  27)		this->timerMax = Delay;
            	}

Dynamic DeltaTrail_obj::__CreateEmpty() { return new DeltaTrail_obj; }

void *DeltaTrail_obj::_hx_vtable = 0;

Dynamic DeltaTrail_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DeltaTrail_obj > _hx_result = new DeltaTrail_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool DeltaTrail_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x288ce903) {
		if (inClassId<=(int)0x1dbd5e03) {
			if (inClassId<=(int)0x0ee765f2) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ee765f2;
			} else {
				return inClassId==(int)0x1dbd5e03;
			}
		} else {
			return inClassId==(int)0x288ce903;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x2c01639b || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

void DeltaTrail_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_5b4bd303bee831ba_31_update)
HXLINE(  33)		 ::DeltaTrail _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  33)		_hx_tmp->_timer = (_hx_tmp->_timer + elapsed);
HXLINE(  36)		bool _hx_tmp1;
HXDLIN(  36)		if ((this->_timer >= this->timerMax)) {
HXLINE(  36)			_hx_tmp1 = (this->_trailLength >= 1);
            		}
            		else {
HXLINE(  36)			_hx_tmp1 = false;
            		}
HXDLIN(  36)		if (_hx_tmp1) {
HXLINE(  38)			this->_timer = ( (Float)(0) );
HXLINE(  41)			 ::flixel::math::FlxPoint spritePosition = null();
HXLINE(  42)			if ((this->_recentPositions->length == this->_trailLength)) {
HXLINE(  44)				spritePosition = this->_recentPositions->pop().StaticCast<  ::flixel::math::FlxPoint >();
            			}
            			else {
HXLINE(  48)				 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  48)				point->_inPool = false;
HXDLIN(  48)				spritePosition = point;
            			}
HXLINE(  51)			spritePosition->set((this->target->x - this->target->offset->x),(this->target->y - this->target->offset->y));
HXLINE(  52)			this->_recentPositions->unshift(spritePosition);
HXLINE(  55)			if (this->rotationsEnabled) {
HXLINE(  57)				this->cacheValue(this->_recentAngles,this->target->angle);
            			}
HXLINE(  61)			if (this->scalesEnabled) {
HXLINE(  63)				 ::flixel::math::FlxPoint spriteScale = null();
HXLINE(  64)				if ((this->_recentScales->length == this->_trailLength)) {
HXLINE(  66)					spriteScale = this->_recentScales->pop().StaticCast<  ::flixel::math::FlxPoint >();
            				}
            				else {
HXLINE(  70)					 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  70)					point->_inPool = false;
HXDLIN(  70)					spriteScale = point;
            				}
HXLINE(  73)				spriteScale->set(this->target->scale->x,this->target->scale->y);
HXLINE(  74)				this->_recentScales->unshift(spriteScale);
            			}
HXLINE(  78)			bool _hx_tmp;
HXDLIN(  78)			if (this->framesEnabled) {
HXLINE(  78)				_hx_tmp = ::hx::IsNull( this->_graphic );
            			}
            			else {
HXLINE(  78)				_hx_tmp = false;
            			}
HXDLIN(  78)			if (_hx_tmp) {
HXLINE(  80)				this->cacheValue(this->_recentFrames,this->target->animation->frameIndex);
HXLINE(  81)				this->cacheValue(this->_recentFlipX,this->target->flipX);
HXLINE(  82)				this->cacheValue(this->_recentFlipY,this->target->flipY);
HXLINE(  83)				this->cacheValue(this->_recentAnimations,this->target->animation->_curAnim);
            			}
HXLINE(  87)			 ::flixel::FlxSprite trailSprite;
HXLINE(  89)			{
HXLINE(  89)				int _g = 0;
HXDLIN(  89)				int _g1 = this->_recentPositions->length;
HXDLIN(  89)				while((_g < _g1)){
HXLINE(  89)					_g = (_g + 1);
HXDLIN(  89)					int i = (_g - 1);
HXLINE(  91)					trailSprite = Dynamic( this->group->members->__get(i)).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  92)					trailSprite->set_x(this->_recentPositions->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->x);
HXLINE(  93)					trailSprite->set_y(this->_recentPositions->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->y);
HXLINE(  96)					if (this->rotationsEnabled) {
HXLINE(  98)						trailSprite->set_angle(this->_recentAngles->__get(i));
HXLINE(  99)						trailSprite->origin->set_x(this->_spriteOrigin->x);
HXLINE( 100)						trailSprite->origin->set_y(this->_spriteOrigin->y);
            					}
HXLINE( 104)					if (this->scalesEnabled) {
HXLINE( 106)						trailSprite->scale->set_x(this->_recentScales->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->x);
HXLINE( 107)						trailSprite->scale->set_y(this->_recentScales->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->y);
            					}
HXLINE( 111)					bool _hx_tmp;
HXDLIN( 111)					if (this->framesEnabled) {
HXLINE( 111)						_hx_tmp = ::hx::IsNull( this->_graphic );
            					}
            					else {
HXLINE( 111)						_hx_tmp = false;
            					}
HXDLIN( 111)					if (_hx_tmp) {
HXLINE( 113)						trailSprite->animation->set_frameIndex(this->_recentFrames->__get(i));
HXLINE( 114)						trailSprite->set_flipX(this->_recentFlipX->__get(i));
HXLINE( 115)						trailSprite->set_flipY(this->_recentFlipY->__get(i));
HXLINE( 117)						{
HXLINE( 117)							 ::flixel::animation::FlxAnimationController _this = trailSprite->animation;
HXDLIN( 117)							 ::flixel::animation::FlxAnimation Anim = this->_recentAnimations->__get(i).StaticCast<  ::flixel::animation::FlxAnimation >();
HXDLIN( 117)							if (::hx::IsNotEq( Anim,_this->_curAnim )) {
HXLINE( 117)								if (::hx::IsNotNull( _this->_curAnim )) {
HXLINE( 117)									_this->_curAnim->stop();
            								}
HXDLIN( 117)								if (::hx::IsNotNull( Anim )) {
HXLINE( 117)									Anim->play(null(),null(),null());
            								}
            							}
HXDLIN( 117)							_this->_curAnim = Anim;
            						}
            					}
HXLINE( 121)					trailSprite->set_exists(true);
            				}
            			}
            		}
            	}



::hx::ObjectPtr< DeltaTrail_obj > DeltaTrail_obj::__new( ::flixel::FlxSprite Target, ::Dynamic Graphic,::hx::Null< int >  __o_Length,::hx::Null< Float >  __o_Delay,::hx::Null< Float >  __o_Alpha,::hx::Null< Float >  __o_Diff) {
	::hx::ObjectPtr< DeltaTrail_obj > __this = new DeltaTrail_obj();
	__this->__construct(Target,Graphic,__o_Length,__o_Delay,__o_Alpha,__o_Diff);
	return __this;
}

::hx::ObjectPtr< DeltaTrail_obj > DeltaTrail_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxSprite Target, ::Dynamic Graphic,::hx::Null< int >  __o_Length,::hx::Null< Float >  __o_Delay,::hx::Null< Float >  __o_Alpha,::hx::Null< Float >  __o_Diff) {
	DeltaTrail_obj *__this = (DeltaTrail_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DeltaTrail_obj), true, "DeltaTrail"));
	*(void **)__this = DeltaTrail_obj::_hx_vtable;
	__this->__construct(Target,Graphic,__o_Length,__o_Delay,__o_Alpha,__o_Diff);
	return __this;
}

DeltaTrail_obj::DeltaTrail_obj()
{
}

::hx::Val DeltaTrail_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_timer") ) { return ::hx::Val( _timer ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timerMax") ) { return ::hx::Val( timerMax ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DeltaTrail_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timerMax") ) { timerMax=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DeltaTrail_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_timer",06,07,1d,0c));
	outFields->push(HX_("timerMax",df,6b,1d,01));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DeltaTrail_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(DeltaTrail_obj,_timer),HX_("_timer",06,07,1d,0c)},
	{::hx::fsFloat,(int)offsetof(DeltaTrail_obj,timerMax),HX_("timerMax",df,6b,1d,01)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DeltaTrail_obj_sStaticStorageInfo = 0;
#endif

static ::String DeltaTrail_obj_sMemberFields[] = {
	HX_("_timer",06,07,1d,0c),
	HX_("timerMax",df,6b,1d,01),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class DeltaTrail_obj::__mClass;

void DeltaTrail_obj::__register()
{
	DeltaTrail_obj _hx_dummy;
	DeltaTrail_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("DeltaTrail",ce,3c,f3,b7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DeltaTrail_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DeltaTrail_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DeltaTrail_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DeltaTrail_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

