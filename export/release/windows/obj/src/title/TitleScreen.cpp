// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_ImageCache
#include <ImageCache.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_title_TitleScreen
#include <title/TitleScreen.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dda1099bd2a2726e_30_new,"title.TitleScreen","new",0x900e3b20,"title.TitleScreen.new","title/TitleScreen.hx",30,0x58c92811)
HX_LOCAL_STACK_FRAME(_hx_pos_dda1099bd2a2726e_33_create,"title.TitleScreen","create",0x8c1c343c,"title.TitleScreen.create","title/TitleScreen.hx",33,0x58c92811)
static const int _hx_array_data_c3d26b2e_2[] = {
	(int)30,(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,
};
static const int _hx_array_data_c3d26b2e_3[] = {
	(int)15,(int)16,(int)17,(int)18,(int)19,(int)20,(int)21,(int)22,(int)23,(int)24,(int)25,(int)26,(int)27,(int)28,(int)29,
};
HX_LOCAL_STACK_FRAME(_hx_pos_dda1099bd2a2726e_86_update,"title.TitleScreen","update",0x97125349,"title.TitleScreen.update","title/TitleScreen.hx",86,0x58c92811)
HX_LOCAL_STACK_FRAME(_hx_pos_dda1099bd2a2726e_110_update,"title.TitleScreen","update",0x97125349,"title.TitleScreen.update","title/TitleScreen.hx",110,0x58c92811)
HX_LOCAL_STACK_FRAME(_hx_pos_dda1099bd2a2726e_118_beatHit,"title.TitleScreen","beatHit",0x6f2bb53d,"title.TitleScreen.beatHit","title/TitleScreen.hx",118,0x58c92811)
namespace title{

void TitleScreen_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_dda1099bd2a2726e_30_new)
HXLINE(  83)		this->transitioning = false;
HXLINE(  80)		this->danceLeft = false;
HXLINE(  30)		super::__construct(TransIn,TransOut);
            	}

Dynamic TitleScreen_obj::__CreateEmpty() { return new TitleScreen_obj; }

void *TitleScreen_obj::_hx_vtable = 0;

Dynamic TitleScreen_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleScreen_obj > _hx_result = new TitleScreen_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TitleScreen_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x29741cd0) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x29741cd0;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void TitleScreen_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_dda1099bd2a2726e_33_create)
HXLINE(  38)		this->super::create();
HXLINE(  40)		this->transIn = null();
HXLINE(  42)		this->persistentUpdate = true;
HXLINE(  44)		this->logoBl =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-150,-100,null());
HXLINE(  45)		 ::flixel::FlxSprite _hx_tmp = this->logoBl;
HXDLIN(  45)		::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  45)		 ::Dynamic _hx_tmp1;
HXDLIN(  45)		if (::ImageCache_obj::exists(data)) {
HXLINE(  45)			_hx_tmp1 = ::ImageCache_obj::get(data);
            		}
            		else {
HXLINE(  45)			_hx_tmp1 = data;
            		}
HXDLIN(  45)		_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,((HX_("assets/images/",ab,47,cb,9f) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".xml",69,3e,c3,1e))));
HXLINE(  46)		this->logoBl->set_antialiasing(true);
HXLINE(  47)		this->logoBl->animation->addByPrefix(HX_("bump",f6,0f,20,41),HX_("logo bumpin",70,a1,0b,72),24,null(),null(),null());
HXLINE(  48)		this->logoBl->animation->play(HX_("bump",f6,0f,20,41),null(),null(),null());
HXLINE(  49)		this->logoBl->updateHitbox();
HXLINE(  51)		 ::flixel::FlxSprite bgGrad =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  51)		::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("titleBG",5d,e5,5d,e5)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  51)		 ::Dynamic bgGrad1;
HXDLIN(  51)		if (::ImageCache_obj::exists(data1)) {
HXLINE(  51)			bgGrad1 = ::ImageCache_obj::get(data1);
            		}
            		else {
HXLINE(  51)			bgGrad1 = data1;
            		}
HXDLIN(  51)		 ::flixel::FlxSprite bgGrad2 = bgGrad->loadGraphic(bgGrad1,null(),null(),null(),null(),null());
HXLINE(  52)		bgGrad2->set_antialiasing(true);
HXLINE(  53)		bgGrad2->updateHitbox();
HXLINE(  55)		this->gfDance =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.07)),null());
HXLINE(  56)		 ::flixel::FlxSprite _hx_tmp2 = this->gfDance;
HXDLIN(  56)		::String data2 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("gfDanceTitle",64,64,d2,7b)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  56)		 ::Dynamic _hx_tmp3;
HXDLIN(  56)		if (::ImageCache_obj::exists(data2)) {
HXLINE(  56)			_hx_tmp3 = ::ImageCache_obj::get(data2);
            		}
            		else {
HXLINE(  56)			_hx_tmp3 = data2;
            		}
HXDLIN(  56)		_hx_tmp2->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp3,((HX_("assets/images/",ab,47,cb,9f) + HX_("gfDanceTitle",64,64,d2,7b)) + HX_(".xml",69,3e,c3,1e))));
HXLINE(  57)		this->gfDance->animation->addByIndices(HX_("danceLeft",da,cc,f9,df),HX_("gfDance",94,88,3a,eb),::Array_obj< int >::fromData( _hx_array_data_c3d26b2e_2,16),HX_("",00,00,00,00),24,false,null(),null());
HXLINE(  58)		this->gfDance->animation->addByIndices(HX_("danceRight",a9,7f,a6,91),HX_("gfDance",94,88,3a,eb),::Array_obj< int >::fromData( _hx_array_data_c3d26b2e_3,15),HX_("",00,00,00,00),24,false,null(),null());
HXLINE(  59)		this->gfDance->set_antialiasing(true);
HXLINE(  60)		this->add(bgGrad2);
HXLINE(  61)		this->add(this->gfDance);
HXLINE(  62)		this->add(this->logoBl);
HXLINE(  64)		this->titleText =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,100,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.8)),null());
HXLINE(  65)		 ::flixel::FlxSprite _hx_tmp4 = this->titleText;
HXDLIN(  65)		::String data3 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("titleEnter",60,80,6b,82)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(  65)		 ::Dynamic _hx_tmp5;
HXDLIN(  65)		if (::ImageCache_obj::exists(data3)) {
HXLINE(  65)			_hx_tmp5 = ::ImageCache_obj::get(data3);
            		}
            		else {
HXLINE(  65)			_hx_tmp5 = data3;
            		}
HXDLIN(  65)		_hx_tmp4->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp5,((HX_("assets/images/",ab,47,cb,9f) + HX_("titleEnter",60,80,6b,82)) + HX_(".xml",69,3e,c3,1e))));
HXLINE(  66)		this->titleText->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Press Enter to Begin",e9,79,2c,83),24,null(),null(),null());
HXLINE(  67)		this->titleText->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("ENTER PRESSED",5a,47,9f,63),24,null(),null(),null());
HXLINE(  68)		this->titleText->set_antialiasing(true);
HXLINE(  69)		this->titleText->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  70)		this->titleText->updateHitbox();
HXLINE(  72)		this->add(this->titleText);
HXLINE(  74)		::flixel::FlxG_obj::camera->flash(-1,1,null(),null());
            	}


void TitleScreen_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_dda1099bd2a2726e_86_update)
HXLINE(  87)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(  90)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  90)		if (_this->keyManager->checkStatus(70,_this->status)) {
HXLINE(  92)			::flixel::FlxG_obj::set_fullscreen(!(::flixel::FlxG_obj::get_fullscreen()));
            		}
HXLINE(  95)		bool pressedEnter;
HXDLIN(  95)		if (!(::PlayerSettings_obj::player1->controls->_accept->check())) {
HXLINE(  95)			pressedEnter = ::PlayerSettings_obj::player1->controls->_pause->check();
            		}
            		else {
HXLINE(  95)			pressedEnter = true;
            		}
HXLINE(  97)		bool _hx_tmp;
HXDLIN(  97)		if (pressedEnter) {
HXLINE(  97)			_hx_tmp = !(this->transitioning);
            		}
            		else {
HXLINE(  97)			_hx_tmp = false;
            		}
HXDLIN(  97)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_dda1099bd2a2726e_110_update)
HXLINE( 110)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 110)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 110)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  99)			this->titleText->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
HXLINE( 101)			::flixel::FlxG_obj::camera->flash(-1,1,null(),null());
HXLINE( 102)			::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("confirmMenu",bf,8e,fe,3c)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.7),null(),null(),null(),null());
HXLINE( 104)			this->transitioning = true;
HXLINE( 107)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0()),null());
            		}
HXLINE( 114)		this->super::update(elapsed);
            	}


void TitleScreen_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_dda1099bd2a2726e_118_beatHit)
HXLINE( 119)		this->super::beatHit();
HXLINE( 121)		this->logoBl->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
HXLINE( 122)		this->danceLeft = !(this->danceLeft);
HXLINE( 124)		if (this->danceLeft) {
HXLINE( 125)			this->gfDance->animation->play(HX_("danceRight",a9,7f,a6,91),true,null(),null());
            		}
            		else {
HXLINE( 127)			this->gfDance->animation->play(HX_("danceLeft",da,cc,f9,df),true,null(),null());
            		}
            	}



::hx::ObjectPtr< TitleScreen_obj > TitleScreen_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< TitleScreen_obj > __this = new TitleScreen_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< TitleScreen_obj > TitleScreen_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	TitleScreen_obj *__this = (TitleScreen_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleScreen_obj), true, "title.TitleScreen"));
	*(void **)__this = TitleScreen_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

TitleScreen_obj::TitleScreen_obj()
{
}

void TitleScreen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleScreen);
	HX_MARK_MEMBER_NAME(logoBl,"logoBl");
	HX_MARK_MEMBER_NAME(gfDance,"gfDance");
	HX_MARK_MEMBER_NAME(danceLeft,"danceLeft");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleScreen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(logoBl,"logoBl");
	HX_VISIT_MEMBER_NAME(gfDance,"gfDance");
	HX_VISIT_MEMBER_NAME(danceLeft,"danceLeft");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleScreen_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"logoBl") ) { return ::hx::Val( logoBl ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { return ::hx::Val( gfDance ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"danceLeft") ) { return ::hx::Val( danceLeft ); }
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TitleScreen_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"logoBl") ) { logoBl=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { gfDance=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"danceLeft") ) { danceLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TitleScreen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("logoBl",15,ca,6e,5c));
	outFields->push(HX_("gfDance",94,88,3a,eb));
	outFields->push(HX_("danceLeft",da,cc,f9,df));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleScreen_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleScreen_obj,logoBl),HX_("logoBl",15,ca,6e,5c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleScreen_obj,gfDance),HX_("gfDance",94,88,3a,eb)},
	{::hx::fsBool,(int)offsetof(TitleScreen_obj,danceLeft),HX_("danceLeft",da,cc,f9,df)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleScreen_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsBool,(int)offsetof(TitleScreen_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TitleScreen_obj_sStaticStorageInfo = 0;
#endif

static ::String TitleScreen_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("logoBl",15,ca,6e,5c),
	HX_("gfDance",94,88,3a,eb),
	HX_("danceLeft",da,cc,f9,df),
	HX_("titleText",65,ba,a4,70),
	HX_("transitioning",6d,6a,93,94),
	HX_("update",09,86,05,87),
	HX_("beatHit",7d,ea,04,74),
	::String(null()) };

::hx::Class TitleScreen_obj::__mClass;

void TitleScreen_obj::__register()
{
	TitleScreen_obj _hx_dummy;
	TitleScreen_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("title.TitleScreen",2e,6b,d2,c3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleScreen_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleScreen_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleScreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleScreen_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace title
