// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_VideoHandler
#include <VideoHandler.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_vlc_VlcBitmap
#include <vlc/VlcBitmap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_23_new,"VideoHandler","new",0xddc18921,"VideoHandler.new","VideoHandler.hx",23,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_71_playMP4,"VideoHandler","playMP4",0xfd02633e,"VideoHandler.playMP4","VideoHandler.hx",71,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_89_playDesktopMP4,"VideoHandler","playDesktopMP4",0x78cc9708,"VideoHandler.playDesktopMP4","VideoHandler.hx",89,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_123_checkFile,"VideoHandler","checkFile",0x8bd1d6e5,"VideoHandler.checkFile","VideoHandler.hx",123,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_136_onVLCVideoReady,"VideoHandler","onVLCVideoReady",0x63c31657,"VideoHandler.onVLCVideoReady","VideoHandler.hx",136,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_140_onVLCComplete,"VideoHandler","onVLCComplete",0x3aa5ef68,"VideoHandler.onVLCComplete","VideoHandler.hx",140,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_152_vlcClean,"VideoHandler","vlcClean",0x85e4397b,"VideoHandler.vlcClean","VideoHandler.hx",152,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_273_update,"VideoHandler","update",0x2a8cfbe8,"VideoHandler.update","VideoHandler.hx",273,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_354_destroy,"VideoHandler","destroy",0x9785da3b,"VideoHandler.destroy","VideoHandler.hx",354,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_375_pause,"VideoHandler","pause",0x1c3601f7,"VideoHandler.pause","VideoHandler.hx",375,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_392_resume,"VideoHandler","resume",0xac0bdf8c,"VideoHandler.resume","VideoHandler.hx",392,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_407_get_muted,"VideoHandler","get_muted",0x483b2b43,"VideoHandler.get_muted","VideoHandler.hx",407,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_418_set_muted,"VideoHandler","set_muted",0x2b8c174f,"VideoHandler.set_muted","VideoHandler.hx",418,0x6bc1b56f)
HX_LOCAL_STACK_FRAME(_hx_pos_547ad3a3e0f52ceb_29_boot,"VideoHandler","boot",0x23af7451,"VideoHandler.boot","VideoHandler.hx",29,0x6bc1b56f)

void VideoHandler_obj::__construct( ::Dynamic __o_x, ::Dynamic __o_y){
            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_23_new)
HXLINE(  47)		this->completed = false;
HXLINE(  46)		this->frameCount = ((Float)0);
HXLINE(  45)		this->startDrawing = false;
HXLINE(  44)		this->waitingStart = false;
HXLINE(  42)		this->paused = false;
HXLINE(  41)		this->_hx___muted = false;
HXLINE(  34)		this->skipable = false;
HXLINE(  61)		super::__construct(x,y,null());
            	}

Dynamic VideoHandler_obj::__CreateEmpty() { return new VideoHandler_obj; }

void *VideoHandler_obj::_hx_vtable = 0;

Dynamic VideoHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VideoHandler_obj > _hx_result = new VideoHandler_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool VideoHandler_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x10c5b76f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x10c5b76f;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void VideoHandler_obj::playMP4(::String videoPath, ::Dynamic callback, ::Dynamic __o_repeat, ::Dynamic __o_canSkip){
            		 ::Dynamic repeat = __o_repeat;
            		if (::hx::IsNull(__o_repeat)) repeat = false;
            		 ::Dynamic canSkip = __o_canSkip;
            		if (::hx::IsNull(__o_canSkip)) canSkip = false;
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_71_playMP4)
HXDLIN(  71)		this->playDesktopMP4(videoPath,callback,repeat,canSkip,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(VideoHandler_obj,playMP4,(void))

void VideoHandler_obj::playDesktopMP4(::String path, ::Dynamic callback, ::Dynamic __o_repeat, ::Dynamic __o_canSkip, ::Dynamic __o_isWindow, ::Dynamic __o_isFullscreen){
            		 ::Dynamic repeat = __o_repeat;
            		if (::hx::IsNull(__o_repeat)) repeat = false;
            		 ::Dynamic canSkip = __o_canSkip;
            		if (::hx::IsNull(__o_canSkip)) canSkip = false;
            		 ::Dynamic isWindow = __o_isWindow;
            		if (::hx::IsNull(__o_isWindow)) isWindow = false;
            		 ::Dynamic isFullscreen = __o_isFullscreen;
            		if (::hx::IsNull(__o_isFullscreen)) isFullscreen = false;
            	HX_GC_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_89_playDesktopMP4)
HXLINE(  91)		this->skipable = ( (bool)(canSkip) );
HXLINE( 100)		this->finishCallback = callback;
HXLINE( 102)		this->vlcBitmap =  ::vlc::VlcBitmap_obj::__alloc( HX_CTX );
HXLINE( 103)		this->vlcBitmap->onVideoReady = this->onVLCVideoReady_dyn();
HXLINE( 104)		this->vlcBitmap->onComplete = this->onVLCComplete_dyn();
HXLINE( 105)		this->vlcBitmap->set_volume(::flixel::FlxG_obj::sound->volume);
HXLINE( 107)		if (( (bool)(repeat) )) {
HXLINE( 108)			this->vlcBitmap->repeat = -1;
            		}
            		else {
HXLINE( 110)			this->vlcBitmap->repeat = 0;
            		}
HXLINE( 112)		this->vlcBitmap->inWindow = ( (bool)(isWindow) );
HXLINE( 113)		this->vlcBitmap->fullscreen = ( (bool)(isFullscreen) );
HXLINE( 115)		::flixel::FlxG_obj::addChildBelowMouse(this->vlcBitmap,null());
HXLINE( 116)		 ::vlc::VlcBitmap _hx_tmp = this->vlcBitmap;
HXDLIN( 116)		_hx_tmp->play(this->checkFile(path));
HXLINE( 117)		this->vlcBitmap->set_visible(false);
HXLINE( 119)		this->waitingStart = true;
            	}


HX_DEFINE_DYNAMIC_FUNC6(VideoHandler_obj,playDesktopMP4,(void))

::String VideoHandler_obj::checkFile(::String fileName){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_123_checkFile)
HXLINE( 124)		::String pDir = HX_("",00,00,00,00);
HXLINE( 125)		::String appDir = ((HX_("file:///",91,ef,e4,54) + ::Sys_obj::getCwd()) + HX_("/",2f,00,00,00));
HXLINE( 126)		if ((fileName.indexOf(HX_(":",3a,00,00,00),null()) == -1)) {
HXLINE( 127)			pDir = appDir;
            		}
            		else {
HXLINE( 128)			bool _hx_tmp;
HXDLIN( 128)			if ((fileName.indexOf(HX_("file://",de,92,3b,ff),null()) != -1)) {
HXLINE( 128)				_hx_tmp = (fileName.indexOf(HX_("http",88,9b,16,45),null()) == -1);
            			}
            			else {
HXLINE( 128)				_hx_tmp = true;
            			}
HXDLIN( 128)			if (_hx_tmp) {
HXLINE( 129)				pDir = HX_("file:///",91,ef,e4,54);
            			}
            		}
HXLINE( 131)		return (pDir + fileName);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VideoHandler_obj,checkFile,return )

void VideoHandler_obj::onVLCVideoReady(){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_136_onVLCVideoReady)
HXDLIN( 136)		::haxe::Log_obj::trace(HX_("video loaded!",d7,87,6b,f8),::hx::SourceInfo(HX_("source/VideoHandler.hx",fb,98,bf,08),136,HX_("VideoHandler",af,64,e4,27),HX_("onVLCVideoReady",16,c0,82,a6)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoHandler_obj,onVLCVideoReady,(void))

void VideoHandler_obj::onVLCComplete(){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_140_onVLCComplete)
HXLINE( 141)		if (::hx::IsNotNull( this->finishCallback )) {
HXLINE( 143)			this->finishCallback();
            		}
HXLINE( 146)		this->vlcClean();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoHandler_obj,onVLCComplete,(void))

void VideoHandler_obj::vlcClean(){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_152_vlcClean)
HXLINE( 153)		this->vlcBitmap->stop();
HXLINE( 156)		this->vlcBitmap->dispose();
HXLINE( 158)		if (::flixel::FlxG_obj::game->contains(this->vlcBitmap)) {
HXLINE( 160)			::flixel::FlxG_obj::game->removeChild(this->vlcBitmap);
            		}
HXLINE( 163)		::haxe::Log_obj::trace(HX_("Done!",3f,f1,f1,70),::hx::SourceInfo(HX_("source/VideoHandler.hx",fb,98,bf,08),163,HX_("VideoHandler",af,64,e4,27),HX_("vlcClean",dc,4d,2c,59)));
HXLINE( 164)		this->completed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoHandler_obj,vlcClean,(void))

void VideoHandler_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_273_update)
HXLINE( 275)		this->super::update(elapsed);
HXLINE( 278)		if (::hx::IsNotNull( this->vlcBitmap )) {
HXLINE( 280)			if (!(this->_hx___muted)) {
HXLINE( 281)				this->vlcBitmap->set_volume(::flixel::FlxG_obj::sound->volume);
            			}
            			else {
HXLINE( 283)				this->vlcBitmap->set_volume(( (Float)(0) ));
            			}
            		}
HXLINE( 287)		if (this->waitingStart) {
HXLINE( 289)			if (this->vlcBitmap->initComplete) {
HXLINE( 290)				int _hx_tmp = this->vlcBitmap->get_bitmapData()->width;
HXDLIN( 290)				this->makeGraphic(_hx_tmp,this->vlcBitmap->get_bitmapData()->height,0,null(),null());
HXLINE( 292)				this->waitingStart = false;
HXLINE( 293)				this->startDrawing = true;
            			}
            		}
HXLINE( 298)		bool _hx_tmp;
HXDLIN( 298)		if (this->startDrawing) {
HXLINE( 298)			_hx_tmp = !(this->paused);
            		}
            		else {
HXLINE( 298)			_hx_tmp = false;
            		}
HXDLIN( 298)		if (_hx_tmp) {
HXLINE( 300)			if ((this->frameCount >= (( (Float)(1) ) / ( (Float)(::VideoHandler_obj::MAX_FPS) )))) {
HXLINE( 301)				 ::openfl::display::BitmapData _hx_tmp = this->get_pixels();
HXDLIN( 301)				_hx_tmp->draw(this->vlcBitmap->get_bitmapData(),null(),null(),null(),null(),null());
HXLINE( 302)				this->frameCount = ( (Float)(0) );
            			}
HXLINE( 304)			 ::VideoHandler _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 304)			_hx_tmp->frameCount = (_hx_tmp->frameCount + elapsed);
            		}
HXLINE( 308)		if (this->skipable) {
HXLINE( 310)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 311)				this->onVLCComplete();
HXLINE( 312)				this->destroy();
            			}
            		}
            	}


void VideoHandler_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_354_destroy)
HXLINE( 357)		if (!(this->completed)) {
HXLINE( 358)			this->vlcClean();
            		}
HXLINE( 368)		this->super::destroy();
            	}


void VideoHandler_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_375_pause)
HXLINE( 378)		this->vlcBitmap->pause();
HXLINE( 385)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoHandler_obj,pause,(void))

void VideoHandler_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_392_resume)
HXLINE( 395)		this->vlcBitmap->resume();
HXLINE( 402)		this->paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoHandler_obj,resume,(void))

bool VideoHandler_obj::get_muted(){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_407_get_muted)
HXDLIN( 407)		return this->_hx___muted;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoHandler_obj,get_muted,return )

bool VideoHandler_obj::set_muted(bool value){
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_418_set_muted)
HXDLIN( 418)		return (this->_hx___muted = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VideoHandler_obj,set_muted,return )

int VideoHandler_obj::MAX_FPS;


::hx::ObjectPtr< VideoHandler_obj > VideoHandler_obj::__new( ::Dynamic __o_x, ::Dynamic __o_y) {
	::hx::ObjectPtr< VideoHandler_obj > __this = new VideoHandler_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< VideoHandler_obj > VideoHandler_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_x, ::Dynamic __o_y) {
	VideoHandler_obj *__this = (VideoHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VideoHandler_obj), true, "VideoHandler"));
	*(void **)__this = VideoHandler_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

VideoHandler_obj::VideoHandler_obj()
{
}

void VideoHandler_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VideoHandler);
	HX_MARK_MEMBER_NAME(skipable,"skipable");
	HX_MARK_MEMBER_NAME(_hx___muted,"__muted");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(finishCallback,"finishCallback");
	HX_MARK_MEMBER_NAME(waitingStart,"waitingStart");
	HX_MARK_MEMBER_NAME(startDrawing,"startDrawing");
	HX_MARK_MEMBER_NAME(frameCount,"frameCount");
	HX_MARK_MEMBER_NAME(completed,"completed");
	HX_MARK_MEMBER_NAME(vlcBitmap,"vlcBitmap");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VideoHandler_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(skipable,"skipable");
	HX_VISIT_MEMBER_NAME(_hx___muted,"__muted");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(finishCallback,"finishCallback");
	HX_VISIT_MEMBER_NAME(waitingStart,"waitingStart");
	HX_VISIT_MEMBER_NAME(startDrawing,"startDrawing");
	HX_VISIT_MEMBER_NAME(frameCount,"frameCount");
	HX_VISIT_MEMBER_NAME(completed,"completed");
	HX_VISIT_MEMBER_NAME(vlcBitmap,"vlcBitmap");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val VideoHandler_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"muted") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_muted() ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return ::hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return ::hx::Val( resume_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__muted") ) { return ::hx::Val( _hx___muted ); }
		if (HX_FIELD_EQ(inName,"playMP4") ) { return ::hx::Val( playMP4_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"skipable") ) { return ::hx::Val( skipable ); }
		if (HX_FIELD_EQ(inName,"vlcClean") ) { return ::hx::Val( vlcClean_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { return ::hx::Val( completed ); }
		if (HX_FIELD_EQ(inName,"vlcBitmap") ) { return ::hx::Val( vlcBitmap ); }
		if (HX_FIELD_EQ(inName,"checkFile") ) { return ::hx::Val( checkFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_muted") ) { return ::hx::Val( get_muted_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_muted") ) { return ::hx::Val( set_muted_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameCount") ) { return ::hx::Val( frameCount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"waitingStart") ) { return ::hx::Val( waitingStart ); }
		if (HX_FIELD_EQ(inName,"startDrawing") ) { return ::hx::Val( startDrawing ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onVLCComplete") ) { return ::hx::Val( onVLCComplete_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"finishCallback") ) { return ::hx::Val( finishCallback ); }
		if (HX_FIELD_EQ(inName,"playDesktopMP4") ) { return ::hx::Val( playDesktopMP4_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onVLCVideoReady") ) { return ::hx::Val( onVLCVideoReady_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool VideoHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"MAX_FPS") ) { outValue = ( MAX_FPS ); return true; }
	}
	return false;
}

::hx::Val VideoHandler_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"muted") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_muted(inValue.Cast< bool >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__muted") ) { _hx___muted=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"skipable") ) { skipable=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { completed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vlcBitmap") ) { vlcBitmap=inValue.Cast<  ::vlc::VlcBitmap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameCount") ) { frameCount=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"waitingStart") ) { waitingStart=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startDrawing") ) { startDrawing=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"finishCallback") ) { finishCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool VideoHandler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"MAX_FPS") ) { MAX_FPS=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void VideoHandler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("skipable",99,2f,e4,cb));
	outFields->push(HX_("muted",6b,8f,5b,10));
	outFields->push(HX_("__muted",4b,e8,b9,7a));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("waitingStart",95,3b,16,72));
	outFields->push(HX_("startDrawing",1c,1f,94,6d));
	outFields->push(HX_("frameCount",62,79,89,2d));
	outFields->push(HX_("completed",8b,a1,38,4f));
	outFields->push(HX_("vlcBitmap",3c,fc,fb,96));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VideoHandler_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(VideoHandler_obj,skipable),HX_("skipable",99,2f,e4,cb)},
	{::hx::fsBool,(int)offsetof(VideoHandler_obj,_hx___muted),HX_("__muted",4b,e8,b9,7a)},
	{::hx::fsBool,(int)offsetof(VideoHandler_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VideoHandler_obj,finishCallback),HX_("finishCallback",38,a1,bc,b4)},
	{::hx::fsBool,(int)offsetof(VideoHandler_obj,waitingStart),HX_("waitingStart",95,3b,16,72)},
	{::hx::fsBool,(int)offsetof(VideoHandler_obj,startDrawing),HX_("startDrawing",1c,1f,94,6d)},
	{::hx::fsFloat,(int)offsetof(VideoHandler_obj,frameCount),HX_("frameCount",62,79,89,2d)},
	{::hx::fsBool,(int)offsetof(VideoHandler_obj,completed),HX_("completed",8b,a1,38,4f)},
	{::hx::fsObject /*  ::vlc::VlcBitmap */ ,(int)offsetof(VideoHandler_obj,vlcBitmap),HX_("vlcBitmap",3c,fc,fb,96)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo VideoHandler_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &VideoHandler_obj::MAX_FPS,HX_("MAX_FPS",4e,e1,6a,69)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String VideoHandler_obj_sMemberFields[] = {
	HX_("skipable",99,2f,e4,cb),
	HX_("__muted",4b,e8,b9,7a),
	HX_("paused",ae,40,84,ef),
	HX_("finishCallback",38,a1,bc,b4),
	HX_("waitingStart",95,3b,16,72),
	HX_("startDrawing",1c,1f,94,6d),
	HX_("frameCount",62,79,89,2d),
	HX_("completed",8b,a1,38,4f),
	HX_("vlcBitmap",3c,fc,fb,96),
	HX_("playMP4",fd,b5,02,8a),
	HX_("playDesktopMP4",29,aa,fd,60),
	HX_("checkFile",64,97,9b,97),
	HX_("onVLCVideoReady",16,c0,82,a6),
	HX_("onVLCComplete",67,5b,33,6e),
	HX_("vlcClean",dc,4d,2c,59),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	HX_("pause",f6,d6,57,bd),
	HX_("resume",ad,69,84,08),
	HX_("get_muted",c2,eb,04,54),
	HX_("set_muted",ce,d7,55,37),
	::String(null()) };

static void VideoHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VideoHandler_obj::MAX_FPS,"MAX_FPS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VideoHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VideoHandler_obj::MAX_FPS,"MAX_FPS");
};

#endif

::hx::Class VideoHandler_obj::__mClass;

static ::String VideoHandler_obj_sStaticFields[] = {
	HX_("MAX_FPS",4e,e1,6a,69),
	::String(null())
};

void VideoHandler_obj::__register()
{
	VideoHandler_obj _hx_dummy;
	VideoHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("VideoHandler",af,64,e4,27);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VideoHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &VideoHandler_obj::__SetStatic;
	__mClass->mMarkFunc = VideoHandler_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(VideoHandler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VideoHandler_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VideoHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VideoHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VideoHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VideoHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VideoHandler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_547ad3a3e0f52ceb_29_boot)
HXDLIN(  29)		MAX_FPS = 60;
            	}
}

