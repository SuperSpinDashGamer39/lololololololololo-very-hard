// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_AnimationDebug
#include <AnimationDebug.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_18_new,"AnimationDebug","new",0xa1e22d41,"AnimationDebug.new","AnimationDebug.hx",18,0x57f8f54f)
static const ::String _hx_array_data_919878cf_1[] = {
	HX_("pico",e5,e8,57,4a),
};
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_43_create,"AnimationDebug","create",0x2b9b8cbb,"AnimationDebug.create","AnimationDebug.hx",43,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_99_genBoyOffsets,"AnimationDebug","genBoyOffsets",0xa90e05a5,"AnimationDebug.genBoyOffsets","AnimationDebug.hx",99,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_120_updateTexts,"AnimationDebug","updateTexts",0xfaa95a3e,"AnimationDebug.updateTexts","AnimationDebug.hx",120,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_118_updateTexts,"AnimationDebug","updateTexts",0xfaa95a3e,"AnimationDebug.updateTexts","AnimationDebug.hx",118,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_127_update,"AnimationDebug","update",0x3691abc8,"AnimationDebug.update","AnimationDebug.hx",127,0x57f8f54f)
static const int _hx_array_data_919878cf_8[] = {
	(int)38,
};
static const int _hx_array_data_919878cf_9[] = {
	(int)39,
};
static const int _hx_array_data_919878cf_10[] = {
	(int)40,
};
static const int _hx_array_data_919878cf_11[] = {
	(int)37,
};

void AnimationDebug_obj::__construct(::String __o_daAnim){
            		::String daAnim = __o_daAnim;
            		if (::hx::IsNull(__o_daAnim)) daAnim = HX_("spooky",eb,bd,9e,c1);
            	HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_18_new)
HXLINE(  34)		this->flippedChars = ::Array_obj< ::String >::fromData( _hx_array_data_919878cf_1,1);
HXLINE(  28)		this->daAnim = HX_("spooky",eb,bd,9e,c1);
HXLINE(  27)		this->isDad = true;
HXLINE(  26)		this->curAnim = 0;
HXLINE(  25)		this->animList = ::Array_obj< ::String >::__new(0);
HXLINE(  38)		super::__construct(null());
HXLINE(  39)		this->daAnim = daAnim;
            	}

Dynamic AnimationDebug_obj::__CreateEmpty() { return new AnimationDebug_obj; }

void *AnimationDebug_obj::_hx_vtable = 0;

Dynamic AnimationDebug_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnimationDebug_obj > _hx_result = new AnimationDebug_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AnimationDebug_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7383fb8f) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x7383fb8f;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void AnimationDebug_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_43_create)
HXLINE(  45)		::openfl::Lib_obj::get_current()->stage->set_frameRate(( (Float)(144) ));
HXLINE(  47)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  48)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  49)		{
HXLINE(  49)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN(  49)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN(  49)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(  49)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE(  51)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE(  52)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  54)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE(  56)		{
HXLINE(  56)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  56)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(  58)		 ::flixel::FlxSprite gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(10,10,null(),null(),null(),null(),null());
HXLINE(  59)		gridBG->scrollFactor->set(((Float)0.5),((Float)0.5));
HXLINE(  60)		this->add(gridBG);
HXLINE(  62)		this->dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->daAnim,null());
HXLINE(  63)		this->dad->screenCenter(null());
HXLINE(  64)		this->dad->debugMode = true;
HXLINE(  66)		this->dadBG =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->daAnim,null());
HXLINE(  67)		this->dadBG->screenCenter(null());
HXLINE(  68)		this->dadBG->debugMode = true;
HXLINE(  69)		this->dadBG->set_alpha(((Float)0.75));
HXLINE(  70)		this->dadBG->set_color(-16777216);
HXLINE(  72)		this->add(this->dadBG);
HXLINE(  73)		this->add(this->dad);
HXLINE(  75)		this->dad->set_flipX(this->flippedChars->contains(this->dad->curCharacter));
HXLINE(  76)		this->dadBG->set_flipX(this->flippedChars->contains(this->dadBG->curCharacter));
HXLINE(  78)		this->dumbTexts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  79)		this->add(this->dumbTexts);
HXLINE(  81)		this->textAnim =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,300,16,null(),null(),null(),null());
HXLINE(  82)		this->textAnim->set_size(26);
HXLINE(  83)		this->textAnim->scrollFactor->set(0,null());
HXLINE(  84)		this->textAnim->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(  85)		this->add(this->textAnim);
HXLINE(  87)		this->genBoyOffsets(null());
HXLINE(  89)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,2,2);
HXLINE(  90)		this->camFollow->screenCenter(null());
HXLINE(  91)		this->add(this->camFollow);
HXLINE(  93)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),null());
HXLINE(  95)		this->super::create();
            	}


void AnimationDebug_obj::genBoyOffsets(::hx::Null< bool >  __o_pushList){
            		bool pushList = __o_pushList.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_99_genBoyOffsets)
HXLINE( 100)		int daLoop = 0;
HXLINE( 102)		{
HXLINE( 102)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,this->dad->animOffsets);
HXDLIN( 102)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 102)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 102)				::String anim = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 102)				::cpp::VirtualArray offsets = ( (::cpp::VirtualArray)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 103)				{
HXLINE( 104)					 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(20 + (18 * daLoop)),0,((anim + HX_(": ",a6,32,00,00)) + ::Std_obj::string(offsets)),15,null());
HXLINE( 105)					text->scrollFactor->set(0,null());
HXLINE( 106)					text->set_color(-16776961);
HXLINE( 107)					text->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 108)					this->dumbTexts->add(text).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 110)					if (pushList) {
HXLINE( 111)						this->animList->push(anim);
            					}
HXLINE( 113)					daLoop = (daLoop + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimationDebug_obj,genBoyOffsets,(void))

void AnimationDebug_obj::updateTexts(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::AnimationDebug,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::text::FlxText text){
            			HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_120_updateTexts)
HXLINE( 121)			text->kill();
HXLINE( 122)			_gthis->dumbTexts->remove(text,true).StaticCast<  ::flixel::text::FlxText >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_118_updateTexts)
HXLINE( 117)		 ::AnimationDebug _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 119)		this->dumbTexts->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationDebug_obj,updateTexts,(void))

void AnimationDebug_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_127_update)
HXLINE( 128)		this->textAnim->set_text(this->dad->animation->_curAnim->name);
HXLINE( 130)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 130)		if (_this->keyManager->checkStatus(69,_this->status)) {
HXLINE( 131)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 131)			_g->set_zoom((_g->zoom + ((Float)0.0025)));
            		}
HXLINE( 132)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 132)		if (_this1->keyManager->checkStatus(81,_this1->status)) {
HXLINE( 133)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 133)			_g->set_zoom((_g->zoom - ((Float)0.0025)));
            		}
HXLINE( 135)		bool _hx_tmp;
HXDLIN( 135)		bool _hx_tmp1;
HXDLIN( 135)		bool _hx_tmp2;
HXDLIN( 135)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 135)		if (!(_this2->keyManager->checkStatus(73,_this2->status))) {
HXLINE( 135)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 135)			_hx_tmp2 = _this->keyManager->checkStatus(74,_this->status);
            		}
            		else {
HXLINE( 135)			_hx_tmp2 = true;
            		}
HXDLIN( 135)		if (!(_hx_tmp2)) {
HXLINE( 135)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 135)			_hx_tmp1 = _this->keyManager->checkStatus(75,_this->status);
            		}
            		else {
HXLINE( 135)			_hx_tmp1 = true;
            		}
HXDLIN( 135)		if (!(_hx_tmp1)) {
HXLINE( 135)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 135)			_hx_tmp = _this->keyManager->checkStatus(76,_this->status);
            		}
            		else {
HXLINE( 135)			_hx_tmp = true;
            		}
HXDLIN( 135)		if (_hx_tmp) {
HXLINE( 137)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 137)			if (_this->keyManager->checkStatus(73,_this->status)) {
HXLINE( 138)				this->camFollow->velocity->set_y(( (Float)(-150) ));
            			}
            			else {
HXLINE( 139)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 139)				if (_this->keyManager->checkStatus(75,_this->status)) {
HXLINE( 140)					this->camFollow->velocity->set_y(( (Float)(150) ));
            				}
            				else {
HXLINE( 142)					this->camFollow->velocity->set_y(( (Float)(0) ));
            				}
            			}
HXLINE( 144)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 144)			if (_this1->keyManager->checkStatus(74,_this1->status)) {
HXLINE( 145)				this->camFollow->velocity->set_x(( (Float)(-150) ));
            			}
            			else {
HXLINE( 146)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 146)				if (_this->keyManager->checkStatus(76,_this->status)) {
HXLINE( 147)					this->camFollow->velocity->set_x(( (Float)(150) ));
            				}
            				else {
HXLINE( 149)					this->camFollow->velocity->set_x(( (Float)(0) ));
            				}
            			}
            		}
            		else {
HXLINE( 153)			this->camFollow->velocity->set(null(),null());
            		}
HXLINE( 156)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 156)		if (_this3->keyManager->checkStatus(87,_this3->status)) {
HXLINE( 158)			 ::AnimationDebug _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 158)			_hx_tmp->curAnim = (_hx_tmp->curAnim - 1);
            		}
HXLINE( 161)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 161)		if (_this4->keyManager->checkStatus(83,_this4->status)) {
HXLINE( 163)			 ::AnimationDebug _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 163)			_hx_tmp->curAnim = (_hx_tmp->curAnim + 1);
            		}
HXLINE( 166)		if ((this->curAnim < 0)) {
HXLINE( 167)			this->curAnim = (this->animList->length - 1);
            		}
HXLINE( 169)		if ((this->curAnim >= this->animList->length)) {
HXLINE( 170)			this->curAnim = 0;
            		}
HXLINE( 172)		bool _hx_tmp3;
HXDLIN( 172)		bool _hx_tmp4;
HXDLIN( 172)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 172)		if (!(_this5->keyManager->checkStatus(83,_this5->status))) {
HXLINE( 172)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 172)			_hx_tmp4 = _this->keyManager->checkStatus(87,_this->status);
            		}
            		else {
HXLINE( 172)			_hx_tmp4 = true;
            		}
HXDLIN( 172)		if (!(_hx_tmp4)) {
HXLINE( 172)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 172)			_hx_tmp3 = _this->keyManager->checkStatus(32,_this->status);
            		}
            		else {
HXLINE( 172)			_hx_tmp3 = true;
            		}
HXDLIN( 172)		if (_hx_tmp3) {
HXLINE( 174)			this->dad->playAnim(this->animList->__get(this->curAnim),true,null(),null());
HXLINE( 176)			if (::StringTools_obj::endsWith(this->animList->__get(this->curAnim),HX_("miss",fc,52,5c,48))) {
HXLINE( 177)				 ::Character _hx_tmp = this->dadBG;
HXDLIN( 177)				_hx_tmp->playAnim(this->animList->__get(this->curAnim).substring(0,(this->animList->__get(this->curAnim).length - 4)),true,null(),null());
            			}
            			else {
HXLINE( 179)				this->dadBG->idleEnd(true);
            			}
HXLINE( 181)			this->updateTexts();
HXLINE( 182)			this->genBoyOffsets(false);
            		}
HXLINE( 185)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 185)		if (_this6->keyManager->checkStatus(27,_this6->status)) {
HXLINE( 187)			 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 187)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 187)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 190)		bool upP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_8,1),2);
HXLINE( 191)		bool rightP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_9,1),2);
HXLINE( 192)		bool downP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_10,1),2);
HXLINE( 193)		bool leftP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_11,1),2);
HXLINE( 195)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 195)		bool holdShift = _this7->keyManager->checkStatus(16,_this7->status);
HXLINE( 196)		int multiplier = 1;
HXLINE( 197)		if (holdShift) {
HXLINE( 198)			multiplier = 10;
            		}
HXLINE( 200)		bool _hx_tmp5;
HXDLIN( 200)		bool _hx_tmp6;
HXDLIN( 200)		bool _hx_tmp7;
HXDLIN( 200)		if (!(upP)) {
HXLINE( 200)			_hx_tmp7 = rightP;
            		}
            		else {
HXLINE( 200)			_hx_tmp7 = true;
            		}
HXDLIN( 200)		if (!(_hx_tmp7)) {
HXLINE( 200)			_hx_tmp6 = downP;
            		}
            		else {
HXLINE( 200)			_hx_tmp6 = true;
            		}
HXDLIN( 200)		if (!(_hx_tmp6)) {
HXLINE( 200)			_hx_tmp5 = leftP;
            		}
            		else {
HXLINE( 200)			_hx_tmp5 = true;
            		}
HXDLIN( 200)		if (_hx_tmp5) {
HXLINE( 202)			this->updateTexts();
HXLINE( 203)			if (upP) {
HXLINE( 204)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->dad->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 204)				int _hx_tmp1 = 1;
HXDLIN( 204)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + multiplier));
            			}
HXLINE( 205)			if (downP) {
HXLINE( 206)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->dad->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 206)				int _hx_tmp1 = 1;
HXDLIN( 206)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) - multiplier));
            			}
HXLINE( 207)			if (leftP) {
HXLINE( 208)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->dad->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 208)				int _hx_tmp1 = 0;
HXDLIN( 208)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + multiplier));
            			}
HXLINE( 209)			if (rightP) {
HXLINE( 210)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->dad->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 210)				int _hx_tmp1 = 0;
HXDLIN( 210)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) - multiplier));
            			}
HXLINE( 212)			this->updateTexts();
HXLINE( 213)			this->genBoyOffsets(false);
HXLINE( 214)			this->dad->playAnim(this->animList->__get(this->curAnim),null(),null(),null());
            		}
HXLINE( 217)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< AnimationDebug_obj > AnimationDebug_obj::__new(::String __o_daAnim) {
	::hx::ObjectPtr< AnimationDebug_obj > __this = new AnimationDebug_obj();
	__this->__construct(__o_daAnim);
	return __this;
}

::hx::ObjectPtr< AnimationDebug_obj > AnimationDebug_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_daAnim) {
	AnimationDebug_obj *__this = (AnimationDebug_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AnimationDebug_obj), true, "AnimationDebug"));
	*(void **)__this = AnimationDebug_obj::_hx_vtable;
	__this->__construct(__o_daAnim);
	return __this;
}

AnimationDebug_obj::AnimationDebug_obj()
{
}

void AnimationDebug_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AnimationDebug);
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(dadBG,"dadBG");
	HX_MARK_MEMBER_NAME(textAnim,"textAnim");
	HX_MARK_MEMBER_NAME(dumbTexts,"dumbTexts");
	HX_MARK_MEMBER_NAME(animList,"animList");
	HX_MARK_MEMBER_NAME(curAnim,"curAnim");
	HX_MARK_MEMBER_NAME(isDad,"isDad");
	HX_MARK_MEMBER_NAME(daAnim,"daAnim");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(flippedChars,"flippedChars");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AnimationDebug_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(dadBG,"dadBG");
	HX_VISIT_MEMBER_NAME(textAnim,"textAnim");
	HX_VISIT_MEMBER_NAME(dumbTexts,"dumbTexts");
	HX_VISIT_MEMBER_NAME(animList,"animList");
	HX_VISIT_MEMBER_NAME(curAnim,"curAnim");
	HX_VISIT_MEMBER_NAME(isDad,"isDad");
	HX_VISIT_MEMBER_NAME(daAnim,"daAnim");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(flippedChars,"flippedChars");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AnimationDebug_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dadBG") ) { return ::hx::Val( dadBG ); }
		if (HX_FIELD_EQ(inName,"isDad") ) { return ::hx::Val( isDad ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"daAnim") ) { return ::hx::Val( daAnim ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curAnim") ) { return ::hx::Val( curAnim ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textAnim") ) { return ::hx::Val( textAnim ); }
		if (HX_FIELD_EQ(inName,"animList") ) { return ::hx::Val( animList ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dumbTexts") ) { return ::hx::Val( dumbTexts ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateTexts") ) { return ::hx::Val( updateTexts_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"flippedChars") ) { return ::hx::Val( flippedChars ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"genBoyOffsets") ) { return ::hx::Val( genBoyOffsets_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AnimationDebug_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dadBG") ) { dadBG=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDad") ) { isDad=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"daAnim") ) { daAnim=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curAnim") ) { curAnim=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textAnim") ) { textAnim=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animList") ) { animList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dumbTexts") ) { dumbTexts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"flippedChars") ) { flippedChars=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnimationDebug_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("dadBG",cc,cf,7b,d4));
	outFields->push(HX_("textAnim",5e,d9,6c,43));
	outFields->push(HX_("dumbTexts",20,d4,be,0e));
	outFields->push(HX_("animList",0f,ab,08,7b));
	outFields->push(HX_("curAnim",b1,f7,86,ab));
	outFields->push(HX_("isDad",7d,60,4a,c1));
	outFields->push(HX_("daAnim",2e,0c,d9,00));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("flippedChars",3b,f1,de,fa));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AnimationDebug_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(AnimationDebug_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(AnimationDebug_obj,dadBG),HX_("dadBG",cc,cf,7b,d4)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AnimationDebug_obj,textAnim),HX_("textAnim",5e,d9,6c,43)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(AnimationDebug_obj,dumbTexts),HX_("dumbTexts",20,d4,be,0e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(AnimationDebug_obj,animList),HX_("animList",0f,ab,08,7b)},
	{::hx::fsInt,(int)offsetof(AnimationDebug_obj,curAnim),HX_("curAnim",b1,f7,86,ab)},
	{::hx::fsBool,(int)offsetof(AnimationDebug_obj,isDad),HX_("isDad",7d,60,4a,c1)},
	{::hx::fsString,(int)offsetof(AnimationDebug_obj,daAnim),HX_("daAnim",2e,0c,d9,00)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(AnimationDebug_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(AnimationDebug_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(AnimationDebug_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(AnimationDebug_obj,flippedChars),HX_("flippedChars",3b,f1,de,fa)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AnimationDebug_obj_sStaticStorageInfo = 0;
#endif

static ::String AnimationDebug_obj_sMemberFields[] = {
	HX_("dad",47,36,4c,00),
	HX_("dadBG",cc,cf,7b,d4),
	HX_("textAnim",5e,d9,6c,43),
	HX_("dumbTexts",20,d4,be,0e),
	HX_("animList",0f,ab,08,7b),
	HX_("curAnim",b1,f7,86,ab),
	HX_("isDad",7d,60,4a,c1),
	HX_("daAnim",2e,0c,d9,00),
	HX_("camFollow",e0,6e,47,22),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("flippedChars",3b,f1,de,fa),
	HX_("create",fc,66,0f,7c),
	HX_("genBoyOffsets",84,65,f8,17),
	HX_("updateTexts",5d,b4,31,f3),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class AnimationDebug_obj::__mClass;

void AnimationDebug_obj::__register()
{
	AnimationDebug_obj _hx_dummy;
	AnimationDebug_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("AnimationDebug",cf,78,98,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AnimationDebug_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AnimationDebug_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimationDebug_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimationDebug_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

