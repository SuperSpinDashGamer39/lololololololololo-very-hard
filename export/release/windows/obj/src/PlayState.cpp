// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AnimationDebug
#include <AnimationDebug.h>
#endif
#ifndef INCLUDED_BackgroundDancer
#include <BackgroundDancer.h>
#endif
#ifndef INCLUDED_BackgroundGirls
#include <BackgroundGirls.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_ComboPopup
#include <ComboPopup.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DeltaTrail
#include <DeltaTrail.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_ImageCache
#include <ImageCache.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_SongMetaTags
#include <SongMetaTags.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_config_Config
#include <config/Config.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_59_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",59,0xb30d7781)
static const int _hx_array_data_46c2835d_1[] = {
	(int)1,(int)3,
};
static const int _hx_array_data_46c2835d_2[] = {
	(int)0,(int)2,
};
static const ::String _hx_array_data_46c2835d_3[] = {
	HX_(":bf:strange code",4d,a6,c3,63),HX_(":dad:>:]",74,df,05,b7),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_239_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",239,0xb30d7781)
static const bool _hx_array_data_46c2835d_11[] = {
	0,0,
};
static const int _hx_array_data_46c2835d_12[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,
};
static const int _hx_array_data_46c2835d_13[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_14[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_15[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_16[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_17[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_18[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_19[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_20[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_21[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_22[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_23[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_24[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const Float _hx_array_data_46c2835d_25[] = {
	(Float)700,(Float)510,
};
static const Float _hx_array_data_46c2835d_26[] = {
	(Float)320,(Float)480,
};
static const Float _hx_array_data_46c2835d_27[] = {
	(Float)690,(Float)465,
};
static const Float _hx_array_data_46c2835d_28[] = {
	(Float)700,(Float)80,
};
static const Float _hx_array_data_46c2835d_29[] = {
	(Float)320,(Float)100,
};
static const Float _hx_array_data_46c2835d_30[] = {
	(Float)690,(Float)85,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_959_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",959,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_952_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",952,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_943_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",943,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_996_updateAccuracy,"PlayState","updateAccuracy",0x9f2d7b53,"PlayState.updateAccuracy","PlayState.hx",996,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1035_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1035,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1053_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1053,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1068_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1068,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1063_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1063,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1073_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1073,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1007_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1007,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1140_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1140,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1177_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1177,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1201_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1201,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1225_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1225,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1094_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1094,0xb30d7781)
static const int _hx_array_data_46c2835d_47[] = {
	(int)0,
};
static const ::String _hx_array_data_46c2835d_48[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_49[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
static const ::String _hx_array_data_46c2835d_50[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1262_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1262,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1242_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1242,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1269_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",1269,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1373_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",1373,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1378_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1378,0xb30d7781)
static const int _hx_array_data_46c2835d_63[] = {
	(int)6,
};
static const int _hx_array_data_46c2835d_64[] = {
	(int)7,
};
static const int _hx_array_data_46c2835d_65[] = {
	(int)5,
};
static const int _hx_array_data_46c2835d_66[] = {
	(int)4,
};
static const int _hx_array_data_46c2835d_67[] = {
	(int)0,
};
static const int _hx_array_data_46c2835d_68[] = {
	(int)4,(int)8,
};
static const int _hx_array_data_46c2835d_69[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_46c2835d_70[] = {
	(int)1,
};
static const int _hx_array_data_46c2835d_71[] = {
	(int)5,(int)9,
};
static const int _hx_array_data_46c2835d_72[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_46c2835d_73[] = {
	(int)2,
};
static const int _hx_array_data_46c2835d_74[] = {
	(int)6,(int)10,
};
static const int _hx_array_data_46c2835d_75[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_46c2835d_76[] = {
	(int)3,
};
static const int _hx_array_data_46c2835d_77[] = {
	(int)7,(int)11,
};
static const int _hx_array_data_46c2835d_78[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1472_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1472,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1488_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",1488,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1505_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",1505,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1527_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",1527,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1540_truncateFloat,"PlayState","truncateFloat",0x2ab04c85,"PlayState.truncateFloat","PlayState.hx",1540,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1549_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",1549,0xb30d7781)
static const int _hx_array_data_46c2835d_86[] = {
	(int)0,(int)2,
};
static const int _hx_array_data_46c2835d_87[] = {
	(int)1,(int)3,
};
static const int _hx_array_data_46c2835d_88[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_89[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_90[] = {
	(int)0,(int)2,
};
static const int _hx_array_data_46c2835d_91[] = {
	(int)1,(int)3,
};
static const int _hx_array_data_46c2835d_92[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_93[] = {
	(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1792_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",1792,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1833_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",1833,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1951_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",1951,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2047_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2047,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2101_keyDown,"PlayState","keyDown",0xe6889390,"PlayState.keyDown","PlayState.hx",2101,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2156_keyUp,"PlayState","keyUp",0x9ebc3a09,"PlayState.keyUp","PlayState.hx",2156,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2207_keyCheck,"PlayState","keyCheck",0x38e3c5da,"PlayState.keyCheck","PlayState.hx",2207,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2365_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2365,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2451_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2451,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2243_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2243,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2257_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2257,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2261_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2261,0xb30d7781)
static const bool _hx_array_data_46c2835d_111[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2508_keyShitAuto,"PlayState","keyShitAuto",0xd918857d,"PlayState.keyShitAuto","PlayState.hx",2508,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2502_keyShitAuto,"PlayState","keyShitAuto",0xd918857d,"PlayState.keyShitAuto","PlayState.hx",2502,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2528_keyShitAuto,"PlayState","keyShitAuto",0xd918857d,"PlayState.keyShitAuto","PlayState.hx",2528,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2548_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",2548,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2591_noteMissWrongPress,"PlayState","noteMissWrongPress",0xa2c41335,"PlayState.noteMissWrongPress","PlayState.hx",2591,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2627_badNoteCheck,"PlayState","badNoteCheck",0x5cf1a4a2,"PlayState.badNoteCheck","PlayState.hx",2627,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2649_setBoyfriendInvuln,"PlayState","setBoyfriendInvuln",0x22332fdf,"PlayState.setBoyfriendInvuln","PlayState.hx",2649,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2640_setBoyfriendInvuln,"PlayState","setBoyfriendInvuln",0x22332fdf,"PlayState.setBoyfriendInvuln","PlayState.hx",2640,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2668_setCanMiss,"PlayState","setCanMiss",0x45abd51b,"PlayState.setCanMiss","PlayState.hx",2668,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2659_setCanMiss,"PlayState","setCanMiss",0x45abd51b,"PlayState.setCanMiss","PlayState.hx",2659,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2693_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",2693,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2738_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",2738,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2758_resetFastCar,"PlayState","resetFastCar",0x6b33ac7a,"PlayState.resetFastCar","PlayState.hx",2758,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2773_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",2773,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2766_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",2766,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2785_trainStart,"PlayState","trainStart",0x6a3d10eb,"PlayState.trainStart","PlayState.hx",2785,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2794_updateTrainPos,"PlayState","updateTrainPos",0x957683c6,"PlayState.updateTrainPos","PlayState.hx",2794,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2820_trainReset,"PlayState","trainReset",0xccf9e658,"PlayState.trainReset","PlayState.hx",2820,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2832_lightningStrikeShit,"PlayState","lightningStrikeShit",0xdc0ca52b,"PlayState.lightningStrikeShit","PlayState.hx",2832,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2844_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",2844,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2865_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",2865,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2881_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",2881,0xb30d7781)
static const int _hx_array_data_46c2835d_136[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_137[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_46c2835d_138[] = {
	(int)0,(int)2,
};
static const int _hx_array_data_46c2835d_139[] = {
	(int)1,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2961_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",2961,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2975_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",2975,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2999_sectionContainsBfNotes,"PlayState","sectionContainsBfNotes",0x0e09360a,"PlayState.sectionContainsBfNotes","PlayState.hx",2999,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3011_sectionContainsOppNotes,"PlayState","sectionContainsOppNotes",0x5612e6c5,"PlayState.sectionContainsOppNotes","PlayState.hx",3011,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3023_camFocusOpponent,"PlayState","camFocusOpponent",0x98a74c37,"PlayState.camFocusOpponent","PlayState.hx",3023,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3056_camFocusBF,"PlayState","camFocusBF",0x3fac98be,"PlayState.camFocusBF","PlayState.hx",3056,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3085_camMove,"PlayState","camMove",0x1d9360af,"PlayState.camMove","PlayState.hx",3085,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3088_camMove,"PlayState","camMove",0x1d9360af,"PlayState.camMove","PlayState.hx",3088,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3097_camChangeZoom,"PlayState","camChangeZoom",0x972f60c1,"PlayState.camChangeZoom","PlayState.hx",3097,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3100_camChangeZoom,"PlayState","camChangeZoom",0x972f60c1,"PlayState.camChangeZoom","PlayState.hx",3100,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3108_uiChangeZoom,"PlayState","uiChangeZoom",0x24df67c8,"PlayState.uiChangeZoom","PlayState.hx",3108,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3111_uiChangeZoom,"PlayState","uiChangeZoom",0x24df67c8,"PlayState.uiChangeZoom","PlayState.hx",3111,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3119_uiBop,"PlayState","uiBop",0x63393c3e,"PlayState.uiBop","PlayState.hx",3119,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3136_inRange,"PlayState","inRange",0xcb1da587,"PlayState.inRange","PlayState.hx",3136,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_62_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",62,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_64_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",64,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_66_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",66,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_67_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",67,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_68_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",68,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_69_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",69,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_71_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",71,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_72_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",72,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_77_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",77,0xb30d7781)
static const ::String _hx_array_data_46c2835d_167[] = {
	HX_("tutorial",9e,8f,b5,82),HX_("bopeebo",b0,01,c5,0c),HX_("fresh",6e,86,86,06),HX_("dadbattle",bf,6a,a9,a6),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_78_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",78,0xb30d7781)
static const ::String _hx_array_data_46c2835d_169[] = {
	HX_("spookeez",0c,7a,2b,75),HX_("south",0d,92,cc,80),HX_("monster",1a,54,b0,b8),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_79_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",79,0xb30d7781)
static const ::String _hx_array_data_46c2835d_171[] = {
	HX_("pico",e5,e8,57,4a),HX_("philly",28,77,5e,ef),HX_("blammed",96,02,00,3c),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_80_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",80,0xb30d7781)
static const ::String _hx_array_data_46c2835d_173[] = {
	HX_("satin-panties",fe,64,00,d1),HX_("high",62,37,0e,45),HX_("milf",d6,4c,5c,48),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_81_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",81,0xb30d7781)
static const ::String _hx_array_data_46c2835d_175[] = {
	HX_("cocoa",09,9d,55,4a),HX_("eggnog",61,04,ba,f4),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_82_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",82,0xb30d7781)
static const ::String _hx_array_data_46c2835d_177[] = {
	HX_("winter-horrorland",9d,39,f4,1e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_83_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",83,0xb30d7781)
static const ::String _hx_array_data_46c2835d_179[] = {
	HX_("senpai",3c,df,8d,6b),HX_("roses",04,6c,64,ed),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_84_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",84,0xb30d7781)
static const ::String _hx_array_data_46c2835d_181[] = {
	HX_("roses",04,6c,64,ed),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_85_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",85,0xb30d7781)
static const ::String _hx_array_data_46c2835d_183[] = {
	HX_("thorns",9c,bf,c7,8c),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_86_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",86,0xb30d7781)
static const ::String _hx_array_data_46c2835d_185[] = {
	HX_("senpai",3c,df,8d,6b),HX_("roses",04,6c,64,ed),HX_("thorns",9c,bf,c7,8c),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_173_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",173,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_220_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",220,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_225_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",225,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_232_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",232,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_233_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",233,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_234_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",234,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_59_new)
HXLINE(2997)		this->curLight = 0;
HXLINE(2862)		this->lightningOffset = 8;
HXLINE(2861)		this->lightningStrikeBeat = 0;
HXLINE(2791)		this->startedMoving = false;
HXLINE(2782)		this->trainCooldown = 0;
HXLINE(2781)		this->trainFinishing = false;
HXLINE(2780)		this->trainCars = 8;
HXLINE(2778)		this->trainFrameTiming = ((Float)0);
HXLINE(2777)		this->trainMoving = false;
HXLINE(2755)		this->fastCarCanDrive = true;
HXLINE(2044)		this->endingSong = false;
HXLINE(1538)		this->canPause = true;
HXLINE(1537)		this->startedCountdown = false;
HXLINE(1536)		this->paused = false;
HXLINE(1239)		this->songTime = ((Float)0);
HXLINE(1238)		this->lastReportedPlayheadPosition = 0;
HXLINE(1237)		this->previousFrameTime = 0;
HXLINE( 230)		this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_1,2);
HXLINE( 229)		this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_2,2);
HXLINE( 227)		this->inCutscene = false;
HXLINE( 222)		this->defaultCamZoom = ((Float)1.05);
HXLINE( 217)		this->songScore = 0;
HXLINE( 216)		this->talking = true;
HXLINE( 175)		this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_3,2);
HXLINE( 164)		this->startingSong = false;
HXLINE( 163)		this->generatedMusic = false;
HXLINE( 158)		this->totalPlayed = 0;
HXLINE( 157)		this->totalNotesHit = ((Float)0);
HXLINE( 156)		this->accuracy = ((Float)0.00);
HXLINE( 155)		this->misses = 0;
HXLINE( 154)		this->combo = 0;
HXLINE( 153)		this->health = ((Float)1);
HXLINE( 151)		this->curSong = HX_("",00,00,00,00);
HXLINE( 150)		this->camZooming = true;
HXLINE( 142)		this->curSection = 0;
HXLINE( 139)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 136)		this->invulnCount = 0;
HXLINE( 135)		this->invuln = false;
HXLINE( 131)		this->rightHold = false;
HXLINE( 130)		this->leftHold = false;
HXLINE( 129)		this->downHold = false;
HXLINE( 128)		this->upHold = false;
HXLINE( 126)		this->rightRelease = false;
HXLINE( 125)		this->leftRelease = false;
HXLINE( 124)		this->downRelease = false;
HXLINE( 123)		this->upRelease = false;
HXLINE( 121)		this->rightPress = false;
HXLINE( 120)		this->leftPress = false;
HXLINE( 119)		this->downPress = false;
HXLINE( 118)		this->upPress = false;
HXLINE( 116)		this->rightTime = 0;
HXLINE( 115)		this->leftTime = 0;
HXLINE( 114)		this->downTime = 0;
HXLINE( 113)		this->upTime = 0;
HXLINE( 111)		this->skipListener = false;
HXLINE( 101)		this->sectionHaveNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 100)		this->sectionHasBFNotes = false;
HXLINE(  99)		this->sectionHasOppNotes = false;
HXLINE(  97)		this->bopSpeed = 1;
HXLINE(  95)		this->autoUi = true;
HXLINE(  94)		this->autoZoom = true;
HXLINE(  93)		this->autoCam = true;
HXLINE(  88)		this->camFocus = HX_("",00,00,00,00);
HXLINE(  75)		this->noMissCount = 0;
HXLINE(  74)		this->canHit = false;
HXLINE(  59)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_239_create)
HXLINE( 238)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 241)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 242)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 243)		::PlayerSettings_obj::gameControls();
HXLINE( 245)		{
HXLINE( 245)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN( 245)			::String EmbeddedSound = ( (::String)((((HX_("assets/music/",36,ab,d2,e0) + (::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_("_Inst",c5,8b,a5,e3))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension)) );
HXDLIN( 245)			bool _hx_tmp;
HXDLIN( 245)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE( 245)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE( 245)				_hx_tmp = true;
            			}
HXDLIN( 245)			if (_hx_tmp) {
HXLINE( 245)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE( 246)		{
HXLINE( 246)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this1 = ::flixel::FlxG_obj::sound;
HXDLIN( 246)			::String EmbeddedSound1 = ( (::String)((((HX_("assets/music/",36,ab,d2,e0) + (::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_("_Voices",40,5c,55,00))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension)) );
HXDLIN( 246)			bool _hx_tmp1;
HXDLIN( 246)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound1,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE( 246)				_hx_tmp1 = ::openfl::utils::Assets_obj::exists(EmbeddedSound1,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE( 246)				_hx_tmp1 = true;
            			}
HXDLIN( 246)			if (_hx_tmp1) {
HXLINE( 246)				::openfl::utils::Assets_obj::getSound(EmbeddedSound1,true);
            			}
            		}
HXLINE( 248)		if (::config::Config_obj::noFpsCap) {
HXLINE( 249)			::openfl::Lib_obj::get_current()->stage->set_frameRate(( (Float)(999) ));
            		}
            		else {
HXLINE( 251)			::openfl::Lib_obj::get_current()->stage->set_frameRate(( (Float)(144) ));
            		}
HXLINE( 253)		this->camTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(0)),0,null());
HXLINE( 254)		this->camZoomTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(0)),0,null());
HXLINE( 255)		this->uiZoomTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(0)),0,null());
HXLINE( 257)		{
HXLINE( 257)			int _g = 0;
HXDLIN( 257)			int _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 257)			while((_g < _g1)){
HXLINE( 257)				_g = (_g + 1);
HXDLIN( 257)				int i = (_g - 1);
HXLINE( 259)				::Array< bool > array = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_11,2);
HXLINE( 261)				array[0] = this->sectionContainsBfNotes(i);
HXLINE( 262)				array[1] = this->sectionContainsOppNotes(i);
HXLINE( 264)				this->sectionHaveNotes->push(array);
            			}
            		}
HXLINE( 268)		this->canHit = (::config::Config_obj::ghostTapType <= 0);
HXLINE( 269)		this->noMissCount = 0;
HXLINE( 270)		this->invulnCount = 0;
HXLINE( 273)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 274)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 275)		{
HXLINE( 275)			 ::flixel::FlxCamera _hx_tmp2 = this->camHUD;
HXDLIN( 275)			_hx_tmp2->bgColor = (_hx_tmp2->bgColor & 16777215);
HXDLIN( 275)			 ::flixel::FlxCamera _hx_tmp3 = this->camHUD;
HXDLIN( 275)			_hx_tmp3->bgColor = (_hx_tmp3->bgColor | 0);
            		}
HXLINE( 276)		this->camOverlay =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 277)		{
HXLINE( 277)			 ::flixel::FlxCamera _hx_tmp4 = this->camOverlay;
HXDLIN( 277)			_hx_tmp4->bgColor = (_hx_tmp4->bgColor & 16777215);
HXDLIN( 277)			 ::flixel::FlxCamera _hx_tmp5 = this->camOverlay;
HXDLIN( 277)			_hx_tmp5->bgColor = (_hx_tmp5->bgColor | 0);
            		}
HXLINE( 279)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 280)		::flixel::FlxG_obj::cameras->add(this->camOverlay,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 281)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 283)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 285)		this->persistentUpdate = true;
HXLINE( 286)		this->persistentDraw = true;
HXLINE( 288)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 289)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),null());
            		}
HXLINE( 291)		::Conductor_obj::changeBPM(( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 293)		::String _hx_tmp6 = ((HX_("assets/data/",f9,10,73,a0) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/",2f,00,00,00));
HXDLIN( 293)		if (::lime::utils::Assets_obj::exists(((_hx_tmp6 + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("Dialogue.txt",3a,24,1f,c2)),null())) {
HXLINE( 294)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 295)				::String _hx_tmp = ((HX_("assets/data/",f9,10,73,a0) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/",2f,00,00,00));
HXDLIN( 295)				this->dialogue = ::CoolUtil_obj::coolTextFile(((_hx_tmp + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("Dialogue.txt",3a,24,1f,c2)));
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 300)		::String stageCheck = HX_("stage",be,6a,0b,84);
HXLINE( 301)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 303)			if (::PlayState_obj::spookySongs->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase())) {
HXLINE( 303)				stageCheck = HX_("spooky",eb,bd,9e,c1);
            			}
            			else {
HXLINE( 304)				if (::PlayState_obj::phillySongs->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase())) {
HXLINE( 304)					stageCheck = HX_("philly",28,77,5e,ef);
            				}
            				else {
HXLINE( 305)					if (::PlayState_obj::limoSongs->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase())) {
HXLINE( 305)						stageCheck = HX_("limo",1f,17,b3,47);
            					}
            					else {
HXLINE( 306)						if (::PlayState_obj::mallSongs->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase())) {
HXLINE( 306)							stageCheck = HX_("mall",d4,3a,56,48);
            						}
            						else {
HXLINE( 307)							if (::PlayState_obj::evilMallSongs->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase())) {
HXLINE( 307)								stageCheck = HX_("mallEvil",88,d3,e3,a7);
            							}
            							else {
HXLINE( 308)								if (::PlayState_obj::schoolSongs->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase())) {
HXLINE( 308)									stageCheck = HX_("school",74,b8,c8,40);
            								}
            								else {
HXLINE( 309)									if (::PlayState_obj::evilSchoolSongs->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase())) {
HXLINE( 309)										stageCheck = HX_("schoolEvil",28,a1,f5,f7);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 311)			::PlayState_obj::SONG->__SetField(HX_("stage",be,6a,0b,84),stageCheck,::hx::paccDynamic);
            		}
            		else {
HXLINE( 314)			stageCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		}
HXLINE( 316)		if ((stageCheck == HX_("spooky",eb,bd,9e,c1))) {
HXLINE( 318)			::PlayState_obj::curStage = HX_("spooky",eb,bd,9e,c1);
HXLINE( 320)			this->halloweenBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-100,null());
HXLINE( 321)			 ::flixel::FlxSprite _hx_tmp = this->halloweenBG;
HXDLIN( 321)			::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 321)			 ::Dynamic _hx_tmp1;
HXDLIN( 321)			if (::ImageCache_obj::exists(data)) {
HXLINE( 321)				_hx_tmp1 = ::ImageCache_obj::get(data);
            			}
            			else {
HXLINE( 321)				_hx_tmp1 = data;
            			}
HXDLIN( 321)			_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,((HX_("assets/images/",ab,47,cb,9f) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".xml",69,3e,c3,1e))));
HXLINE( 322)			this->halloweenBG->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("halloweem bg0",37,fc,3c,6c),null(),null(),null(),null());
HXLINE( 323)			this->halloweenBG->animation->addByPrefix(HX_("lightning",0a,39,4a,d7),HX_("halloweem bg lightning strike",af,54,50,5b),24,false,null(),null());
HXLINE( 324)			this->halloweenBG->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 325)			this->halloweenBG->set_antialiasing(true);
HXLINE( 326)			this->add(this->halloweenBG);
            		}
            		else {
HXLINE( 329)			if ((stageCheck == HX_("philly",28,77,5e,ef))) {
HXLINE( 331)				::PlayState_obj::curStage = HX_("philly",28,77,5e,ef);
HXLINE( 333)				 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 333)				::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("philly/sky",3a,d3,d5,cc)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 333)				 ::Dynamic bg1;
HXDLIN( 333)				if (::ImageCache_obj::exists(data)) {
HXLINE( 333)					bg1 = ::ImageCache_obj::get(data);
            				}
            				else {
HXLINE( 333)					bg1 = data;
            				}
HXDLIN( 333)				 ::flixel::FlxSprite bg2 = bg->loadGraphic(bg1,null(),null(),null(),null(),null());
HXLINE( 334)				bg2->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 335)				this->add(bg2);
HXLINE( 337)				 ::flixel::FlxSprite city =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-10,null(),null());
HXDLIN( 337)				::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("philly/city",32,0d,ae,63)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 337)				 ::Dynamic city1;
HXDLIN( 337)				if (::ImageCache_obj::exists(data1)) {
HXLINE( 337)					city1 = ::ImageCache_obj::get(data1);
            				}
            				else {
HXLINE( 337)					city1 = data1;
            				}
HXDLIN( 337)				 ::flixel::FlxSprite city2 = city->loadGraphic(city1,null(),null(),null(),null(),null());
HXLINE( 338)				city2->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 339)				city2->setGraphicSize(::Std_obj::_hx_int((city2->get_width() * ((Float)0.85))),null());
HXLINE( 340)				city2->updateHitbox();
HXLINE( 341)				this->add(city2);
HXLINE( 343)				this->phillyCityLights =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 344)				this->add(this->phillyCityLights);
HXLINE( 346)				{
HXLINE( 347)					{
HXLINE( 348)						 ::flixel::FlxSprite light =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city2->x,null(),null());
HXDLIN( 348)						::String data2 = ((HX_("assets/images/",ab,47,cb,9f) + (HX_("philly/win",75,da,d8,cc) + 0)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 348)						 ::Dynamic light1;
HXDLIN( 348)						if (::ImageCache_obj::exists(data2)) {
HXLINE( 348)							light1 = ::ImageCache_obj::get(data2);
            						}
            						else {
HXLINE( 348)							light1 = data2;
            						}
HXDLIN( 348)						 ::flixel::FlxSprite light2 = light->loadGraphic(light1,null(),null(),null(),null(),null());
HXLINE( 349)						light2->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 350)						light2->set_visible(false);
HXLINE( 351)						light2->setGraphicSize(::Std_obj::_hx_int((light2->get_width() * ((Float)0.85))),null());
HXLINE( 352)						light2->updateHitbox();
HXLINE( 353)						this->phillyCityLights->add(light2).StaticCast<  ::flixel::FlxSprite >();
            					}
HXLINE( 347)					{
HXLINE( 348)						 ::flixel::FlxSprite light3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city2->x,null(),null());
HXDLIN( 348)						::String data3 = ((HX_("assets/images/",ab,47,cb,9f) + (HX_("philly/win",75,da,d8,cc) + 1)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 348)						 ::Dynamic light4;
HXDLIN( 348)						if (::ImageCache_obj::exists(data3)) {
HXLINE( 348)							light4 = ::ImageCache_obj::get(data3);
            						}
            						else {
HXLINE( 348)							light4 = data3;
            						}
HXDLIN( 348)						 ::flixel::FlxSprite light5 = light3->loadGraphic(light4,null(),null(),null(),null(),null());
HXLINE( 349)						light5->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 350)						light5->set_visible(false);
HXLINE( 351)						light5->setGraphicSize(::Std_obj::_hx_int((light5->get_width() * ((Float)0.85))),null());
HXLINE( 352)						light5->updateHitbox();
HXLINE( 353)						this->phillyCityLights->add(light5).StaticCast<  ::flixel::FlxSprite >();
            					}
HXLINE( 347)					{
HXLINE( 348)						 ::flixel::FlxSprite light6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city2->x,null(),null());
HXDLIN( 348)						::String data4 = ((HX_("assets/images/",ab,47,cb,9f) + (HX_("philly/win",75,da,d8,cc) + 2)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 348)						 ::Dynamic light7;
HXDLIN( 348)						if (::ImageCache_obj::exists(data4)) {
HXLINE( 348)							light7 = ::ImageCache_obj::get(data4);
            						}
            						else {
HXLINE( 348)							light7 = data4;
            						}
HXDLIN( 348)						 ::flixel::FlxSprite light8 = light6->loadGraphic(light7,null(),null(),null(),null(),null());
HXLINE( 349)						light8->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 350)						light8->set_visible(false);
HXLINE( 351)						light8->setGraphicSize(::Std_obj::_hx_int((light8->get_width() * ((Float)0.85))),null());
HXLINE( 352)						light8->updateHitbox();
HXLINE( 353)						this->phillyCityLights->add(light8).StaticCast<  ::flixel::FlxSprite >();
            					}
HXLINE( 347)					{
HXLINE( 348)						 ::flixel::FlxSprite light9 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city2->x,null(),null());
HXDLIN( 348)						::String data5 = ((HX_("assets/images/",ab,47,cb,9f) + (HX_("philly/win",75,da,d8,cc) + 3)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 348)						 ::Dynamic light10;
HXDLIN( 348)						if (::ImageCache_obj::exists(data5)) {
HXLINE( 348)							light10 = ::ImageCache_obj::get(data5);
            						}
            						else {
HXLINE( 348)							light10 = data5;
            						}
HXDLIN( 348)						 ::flixel::FlxSprite light11 = light9->loadGraphic(light10,null(),null(),null(),null(),null());
HXLINE( 349)						light11->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 350)						light11->set_visible(false);
HXLINE( 351)						light11->setGraphicSize(::Std_obj::_hx_int((light11->get_width() * ((Float)0.85))),null());
HXLINE( 352)						light11->updateHitbox();
HXLINE( 353)						this->phillyCityLights->add(light11).StaticCast<  ::flixel::FlxSprite >();
            					}
HXLINE( 347)					{
HXLINE( 348)						 ::flixel::FlxSprite light12 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city2->x,null(),null());
HXDLIN( 348)						::String data6 = ((HX_("assets/images/",ab,47,cb,9f) + (HX_("philly/win",75,da,d8,cc) + 4)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 348)						 ::Dynamic light13;
HXDLIN( 348)						if (::ImageCache_obj::exists(data6)) {
HXLINE( 348)							light13 = ::ImageCache_obj::get(data6);
            						}
            						else {
HXLINE( 348)							light13 = data6;
            						}
HXDLIN( 348)						 ::flixel::FlxSprite light14 = light12->loadGraphic(light13,null(),null(),null(),null(),null());
HXLINE( 349)						light14->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 350)						light14->set_visible(false);
HXLINE( 351)						light14->setGraphicSize(::Std_obj::_hx_int((light14->get_width() * ((Float)0.85))),null());
HXLINE( 352)						light14->updateHitbox();
HXLINE( 353)						this->phillyCityLights->add(light14).StaticCast<  ::flixel::FlxSprite >();
            					}
            				}
HXLINE( 356)				 ::flixel::FlxSprite streetBehind =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,50,null());
HXDLIN( 356)				::String data7 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("philly/behindTrain",07,a4,6d,d4)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 356)				 ::Dynamic streetBehind1;
HXDLIN( 356)				if (::ImageCache_obj::exists(data7)) {
HXLINE( 356)					streetBehind1 = ::ImageCache_obj::get(data7);
            				}
            				else {
HXLINE( 356)					streetBehind1 = data7;
            				}
HXDLIN( 356)				 ::flixel::FlxSprite streetBehind2 = streetBehind->loadGraphic(streetBehind1,null(),null(),null(),null(),null());
HXLINE( 357)				this->add(streetBehind2);
HXLINE( 359)				 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,2000,360,null());
HXDLIN( 359)				::String data8 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("philly/train",61,ce,51,a4)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 359)				 ::Dynamic _hx_tmp1;
HXDLIN( 359)				if (::ImageCache_obj::exists(data8)) {
HXLINE( 359)					_hx_tmp1 = ::ImageCache_obj::get(data8);
            				}
            				else {
HXLINE( 359)					_hx_tmp1 = data8;
            				}
HXDLIN( 359)				this->phillyTrain = _hx_tmp->loadGraphic(_hx_tmp1,null(),null(),null(),null(),null());
HXLINE( 360)				this->add(this->phillyTrain);
HXLINE( 362)				this->trainSound =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX )->loadEmbedded((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("train_passes",56,da,5a,7f)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null());
HXLINE( 363)				::flixel::FlxG_obj::sound->list->add(this->trainSound).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 365)				 ::flixel::FlxSprite street =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,streetBehind2->y,null());
HXDLIN( 365)				::String data9 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("philly/street",4a,23,ee,ee)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 365)				 ::Dynamic street1;
HXDLIN( 365)				if (::ImageCache_obj::exists(data9)) {
HXLINE( 365)					street1 = ::ImageCache_obj::get(data9);
            				}
            				else {
HXLINE( 365)					street1 = data9;
            				}
HXDLIN( 365)				 ::flixel::FlxSprite street2 = street->loadGraphic(street1,null(),null(),null(),null(),null());
HXLINE( 366)				this->add(street2);
            			}
            			else {
HXLINE( 368)				if ((stageCheck == HX_("limo",1f,17,b3,47))) {
HXLINE( 370)					::PlayState_obj::curStage = HX_("limo",1f,17,b3,47);
HXLINE( 371)					this->defaultCamZoom = ((Float)0.90);
HXLINE( 373)					 ::flixel::FlxSprite skyBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,-50,null());
HXDLIN( 373)					::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("limo/limoSunset",45,de,4f,6e)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 373)					 ::Dynamic skyBG1;
HXDLIN( 373)					if (::ImageCache_obj::exists(data)) {
HXLINE( 373)						skyBG1 = ::ImageCache_obj::get(data);
            					}
            					else {
HXLINE( 373)						skyBG1 = data;
            					}
HXDLIN( 373)					 ::flixel::FlxSprite skyBG2 = skyBG->loadGraphic(skyBG1,null(),null(),null(),null(),null());
HXLINE( 374)					skyBG2->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 375)					this->add(skyBG2);
HXLINE( 377)					 ::flixel::FlxSprite bgLimo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,480,null());
HXLINE( 378)					::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 378)					 ::Dynamic _hx_tmp;
HXDLIN( 378)					if (::ImageCache_obj::exists(data1)) {
HXLINE( 378)						_hx_tmp = ::ImageCache_obj::get(data1);
            					}
            					else {
HXLINE( 378)						_hx_tmp = data1;
            					}
HXDLIN( 378)					bgLimo->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,((HX_("assets/images/",ab,47,cb,9f) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".xml",69,3e,c3,1e))));
HXLINE( 379)					bgLimo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("background limo pink",65,40,fe,9c),24,null(),null(),null());
HXLINE( 380)					bgLimo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 381)					bgLimo->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 382)					this->add(bgLimo);
HXLINE( 384)					this->grpLimoDancers =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 385)					this->add(this->grpLimoDancers);
HXLINE( 387)					{
HXLINE( 388)						{
HXLINE( 389)							 ::BackgroundDancer dancer =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(130) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 390)							dancer->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 391)							this->grpLimoDancers->add(dancer).StaticCast<  ::BackgroundDancer >();
            						}
HXLINE( 388)						{
HXLINE( 389)							 ::BackgroundDancer dancer1 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(500) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 390)							dancer1->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 391)							this->grpLimoDancers->add(dancer1).StaticCast<  ::BackgroundDancer >();
            						}
HXLINE( 388)						{
HXLINE( 389)							 ::BackgroundDancer dancer2 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(870) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 390)							dancer2->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 391)							this->grpLimoDancers->add(dancer2).StaticCast<  ::BackgroundDancer >();
            						}
HXLINE( 388)						{
HXLINE( 389)							 ::BackgroundDancer dancer3 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1240) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 390)							dancer3->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 391)							this->grpLimoDancers->add(dancer3).StaticCast<  ::BackgroundDancer >();
            						}
HXLINE( 388)						{
HXLINE( 389)							 ::BackgroundDancer dancer4 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1610) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 390)							dancer4->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 391)							this->grpLimoDancers->add(dancer4).StaticCast<  ::BackgroundDancer >();
            						}
            					}
HXLINE( 404)					this->limo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,550,null());
HXLINE( 405)					 ::flixel::FlxSprite _hx_tmp1 = this->limo;
HXDLIN( 405)					::String data2 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 405)					 ::Dynamic _hx_tmp2;
HXDLIN( 405)					if (::ImageCache_obj::exists(data2)) {
HXLINE( 405)						_hx_tmp2 = ::ImageCache_obj::get(data2);
            					}
            					else {
HXLINE( 405)						_hx_tmp2 = data2;
            					}
HXDLIN( 405)					_hx_tmp1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp2,((HX_("assets/images/",ab,47,cb,9f) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".xml",69,3e,c3,1e))));
HXLINE( 406)					this->limo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("Limo stage",1d,b3,df,4c),24,null(),null(),null());
HXLINE( 407)					this->limo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 408)					this->limo->set_antialiasing(true);
HXLINE( 410)					 ::flixel::FlxSprite _hx_tmp3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,160,null());
HXDLIN( 410)					::String data3 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("limo/fastCarLol",c1,b0,ed,94)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 410)					 ::Dynamic _hx_tmp4;
HXDLIN( 410)					if (::ImageCache_obj::exists(data3)) {
HXLINE( 410)						_hx_tmp4 = ::ImageCache_obj::get(data3);
            					}
            					else {
HXLINE( 410)						_hx_tmp4 = data3;
            					}
HXDLIN( 410)					this->fastCar = _hx_tmp3->loadGraphic(_hx_tmp4,null(),null(),null(),null(),null());
            				}
            				else {
HXLINE( 413)					if ((stageCheck == HX_("mall",d4,3a,56,48))) {
HXLINE( 415)						::PlayState_obj::curStage = HX_("mall",d4,3a,56,48);
HXLINE( 417)						this->defaultCamZoom = ((Float)0.80);
HXLINE( 419)						 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1000,-500,null());
HXDLIN( 419)						::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/bgWalls",57,9f,1b,51)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 419)						 ::Dynamic bg1;
HXDLIN( 419)						if (::ImageCache_obj::exists(data)) {
HXLINE( 419)							bg1 = ::ImageCache_obj::get(data);
            						}
            						else {
HXLINE( 419)							bg1 = data;
            						}
HXDLIN( 419)						 ::flixel::FlxSprite bg2 = bg->loadGraphic(bg1,null(),null(),null(),null(),null());
HXLINE( 420)						bg2->set_antialiasing(true);
HXLINE( 421)						bg2->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 422)						bg2->set_active(false);
HXLINE( 423)						bg2->setGraphicSize(::Std_obj::_hx_int((bg2->get_width() * ((Float)0.8))),null());
HXLINE( 424)						bg2->updateHitbox();
HXLINE( 425)						this->add(bg2);
HXLINE( 427)						this->upperBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-240,-90,null());
HXLINE( 428)						 ::flixel::FlxSprite _hx_tmp = this->upperBoppers;
HXDLIN( 428)						::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 428)						 ::Dynamic _hx_tmp1;
HXDLIN( 428)						if (::ImageCache_obj::exists(data1)) {
HXLINE( 428)							_hx_tmp1 = ::ImageCache_obj::get(data1);
            						}
            						else {
HXLINE( 428)							_hx_tmp1 = data1;
            						}
HXDLIN( 428)						_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".xml",69,3e,c3,1e))));
HXLINE( 429)						this->upperBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Upper Crowd Bob",a4,72,cf,77),24,false,null(),null());
HXLINE( 430)						this->upperBoppers->set_antialiasing(true);
HXLINE( 431)						this->upperBoppers->scrollFactor->set(((Float)0.33),((Float)0.33));
HXLINE( 432)						 ::flixel::FlxSprite _hx_tmp2 = this->upperBoppers;
HXDLIN( 432)						_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->upperBoppers->get_width() * ((Float)0.85))),null());
HXLINE( 433)						this->upperBoppers->updateHitbox();
HXLINE( 434)						this->add(this->upperBoppers);
HXLINE( 436)						 ::flixel::FlxSprite bgEscalator =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1100,-600,null());
HXDLIN( 436)						::String data2 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/bgEscalator",64,1f,c0,d5)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 436)						 ::Dynamic bgEscalator1;
HXDLIN( 436)						if (::ImageCache_obj::exists(data2)) {
HXLINE( 436)							bgEscalator1 = ::ImageCache_obj::get(data2);
            						}
            						else {
HXLINE( 436)							bgEscalator1 = data2;
            						}
HXDLIN( 436)						 ::flixel::FlxSprite bgEscalator2 = bgEscalator->loadGraphic(bgEscalator1,null(),null(),null(),null(),null());
HXLINE( 437)						bgEscalator2->set_antialiasing(true);
HXLINE( 438)						bgEscalator2->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 439)						bgEscalator2->set_active(false);
HXLINE( 440)						bgEscalator2->setGraphicSize(::Std_obj::_hx_int((bgEscalator2->get_width() * ((Float)0.9))),null());
HXLINE( 441)						bgEscalator2->updateHitbox();
HXLINE( 442)						this->add(bgEscalator2);
HXLINE( 444)						 ::flixel::FlxSprite tree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,370,-250,null());
HXDLIN( 444)						::String data3 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/christmasTree",73,57,6d,7b)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 444)						 ::Dynamic tree1;
HXDLIN( 444)						if (::ImageCache_obj::exists(data3)) {
HXLINE( 444)							tree1 = ::ImageCache_obj::get(data3);
            						}
            						else {
HXLINE( 444)							tree1 = data3;
            						}
HXDLIN( 444)						 ::flixel::FlxSprite tree2 = tree->loadGraphic(tree1,null(),null(),null(),null(),null());
HXLINE( 445)						tree2->set_antialiasing(true);
HXLINE( 446)						tree2->scrollFactor->set(((Float)0.40),((Float)0.40));
HXLINE( 447)						this->add(tree2);
HXLINE( 449)						this->bottomBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,140,null());
HXLINE( 450)						 ::flixel::FlxSprite _hx_tmp3 = this->bottomBoppers;
HXDLIN( 450)						::String data4 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 450)						 ::Dynamic _hx_tmp4;
HXDLIN( 450)						if (::ImageCache_obj::exists(data4)) {
HXLINE( 450)							_hx_tmp4 = ::ImageCache_obj::get(data4);
            						}
            						else {
HXLINE( 450)							_hx_tmp4 = data4;
            						}
HXDLIN( 450)						_hx_tmp3->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp4,((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".xml",69,3e,c3,1e))));
HXLINE( 451)						this->bottomBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Bottom Level Boppers",c8,41,25,54),24,false,null(),null());
HXLINE( 452)						this->bottomBoppers->set_antialiasing(true);
HXLINE( 453)						this->bottomBoppers->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 454)						 ::flixel::FlxSprite _hx_tmp5 = this->bottomBoppers;
HXDLIN( 454)						_hx_tmp5->setGraphicSize(::Std_obj::_hx_int(this->bottomBoppers->get_width()),null());
HXLINE( 455)						this->bottomBoppers->updateHitbox();
HXLINE( 456)						this->add(this->bottomBoppers);
HXLINE( 458)						 ::flixel::FlxSprite fgSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,700,null());
HXDLIN( 458)						::String data5 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/fgSnow",91,40,e7,37)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 458)						 ::Dynamic fgSnow1;
HXDLIN( 458)						if (::ImageCache_obj::exists(data5)) {
HXLINE( 458)							fgSnow1 = ::ImageCache_obj::get(data5);
            						}
            						else {
HXLINE( 458)							fgSnow1 = data5;
            						}
HXDLIN( 458)						 ::flixel::FlxSprite fgSnow2 = fgSnow->loadGraphic(fgSnow1,null(),null(),null(),null(),null());
HXLINE( 459)						fgSnow2->set_active(false);
HXLINE( 460)						fgSnow2->set_antialiasing(true);
HXLINE( 461)						this->add(fgSnow2);
HXLINE( 463)						this->santa =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-840,150,null());
HXLINE( 464)						 ::flixel::FlxSprite _hx_tmp6 = this->santa;
HXDLIN( 464)						::String data6 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 464)						 ::Dynamic _hx_tmp7;
HXDLIN( 464)						if (::ImageCache_obj::exists(data6)) {
HXLINE( 464)							_hx_tmp7 = ::ImageCache_obj::get(data6);
            						}
            						else {
HXLINE( 464)							_hx_tmp7 = data6;
            						}
HXDLIN( 464)						_hx_tmp6->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp7,((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".xml",69,3e,c3,1e))));
HXLINE( 465)						this->santa->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("santa idle in fear",72,07,31,fd),24,false,null(),null());
HXLINE( 466)						this->santa->set_antialiasing(true);
HXLINE( 467)						this->add(this->santa);
            					}
            					else {
HXLINE( 469)						if ((stageCheck == HX_("mallEvil",88,d3,e3,a7))) {
HXLINE( 471)							::PlayState_obj::curStage = HX_("mallEvil",88,d3,e3,a7);
HXLINE( 472)							 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-400,-500,null());
HXDLIN( 472)							::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/evilBG",86,9d,17,83)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 472)							 ::Dynamic bg1;
HXDLIN( 472)							if (::ImageCache_obj::exists(data)) {
HXLINE( 472)								bg1 = ::ImageCache_obj::get(data);
            							}
            							else {
HXLINE( 472)								bg1 = data;
            							}
HXDLIN( 472)							 ::flixel::FlxSprite bg2 = bg->loadGraphic(bg1,null(),null(),null(),null(),null());
HXLINE( 473)							bg2->set_antialiasing(true);
HXLINE( 474)							bg2->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 475)							bg2->set_active(false);
HXLINE( 476)							bg2->setGraphicSize(::Std_obj::_hx_int((bg2->get_width() * ((Float)0.8))),null());
HXLINE( 477)							bg2->updateHitbox();
HXLINE( 478)							this->add(bg2);
HXLINE( 480)							 ::flixel::FlxSprite evilTree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,-300,null());
HXDLIN( 480)							::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/evilTree",7f,5b,65,3a)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 480)							 ::Dynamic evilTree1;
HXDLIN( 480)							if (::ImageCache_obj::exists(data1)) {
HXLINE( 480)								evilTree1 = ::ImageCache_obj::get(data1);
            							}
            							else {
HXLINE( 480)								evilTree1 = data1;
            							}
HXDLIN( 480)							 ::flixel::FlxSprite evilTree2 = evilTree->loadGraphic(evilTree1,null(),null(),null(),null(),null());
HXLINE( 481)							evilTree2->set_antialiasing(true);
HXLINE( 482)							evilTree2->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 483)							this->add(evilTree2);
HXLINE( 485)							 ::flixel::FlxSprite evilSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,700,null());
HXDLIN( 485)							::String data2 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("christmas/evilSnow",a4,24,b9,39)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 485)							 ::Dynamic evilSnow1;
HXDLIN( 485)							if (::ImageCache_obj::exists(data2)) {
HXLINE( 485)								evilSnow1 = ::ImageCache_obj::get(data2);
            							}
            							else {
HXLINE( 485)								evilSnow1 = data2;
            							}
HXDLIN( 485)							 ::flixel::FlxSprite evilSnow2 = evilSnow->loadGraphic(evilSnow1,null(),null(),null(),null(),null());
HXLINE( 486)							evilSnow2->set_antialiasing(true);
HXLINE( 487)							this->add(evilSnow2);
            						}
            						else {
HXLINE( 489)							if ((stageCheck == HX_("school",74,b8,c8,40))) {
HXLINE( 491)								::PlayState_obj::curStage = HX_("school",74,b8,c8,40);
HXLINE( 495)								 ::flixel::FlxSprite bgSky =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 495)								::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/weebSky",52,34,cf,a4)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 495)								 ::Dynamic bgSky1;
HXDLIN( 495)								if (::ImageCache_obj::exists(data)) {
HXLINE( 495)									bgSky1 = ::ImageCache_obj::get(data);
            								}
            								else {
HXLINE( 495)									bgSky1 = data;
            								}
HXDLIN( 495)								 ::flixel::FlxSprite bgSky2 = bgSky->loadGraphic(bgSky1,null(),null(),null(),null(),null());
HXLINE( 496)								bgSky2->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 497)								this->add(bgSky2);
HXLINE( 499)								int repositionShit = -200;
HXLINE( 501)								 ::flixel::FlxSprite bgSchool =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,0,null());
HXDLIN( 501)								::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/weebSchool",a3,21,c0,f5)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 501)								 ::Dynamic bgSchool1;
HXDLIN( 501)								if (::ImageCache_obj::exists(data1)) {
HXLINE( 501)									bgSchool1 = ::ImageCache_obj::get(data1);
            								}
            								else {
HXLINE( 501)									bgSchool1 = data1;
            								}
HXDLIN( 501)								 ::flixel::FlxSprite bgSchool2 = bgSchool->loadGraphic(bgSchool1,null(),null(),null(),null(),null());
HXLINE( 502)								bgSchool2->scrollFactor->set(((Float)0.6),((Float)0.90));
HXLINE( 503)								this->add(bgSchool2);
HXLINE( 505)								 ::flixel::FlxSprite bgStreet =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,null(),null());
HXDLIN( 505)								::String data2 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/weebStreet",32,81,24,c6)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 505)								 ::Dynamic bgStreet1;
HXDLIN( 505)								if (::ImageCache_obj::exists(data2)) {
HXLINE( 505)									bgStreet1 = ::ImageCache_obj::get(data2);
            								}
            								else {
HXLINE( 505)									bgStreet1 = data2;
            								}
HXDLIN( 505)								 ::flixel::FlxSprite bgStreet2 = bgStreet->loadGraphic(bgStreet1,null(),null(),null(),null(),null());
HXLINE( 506)								bgStreet2->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 507)								this->add(bgStreet2);
HXLINE( 509)								 ::flixel::FlxSprite fgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit + 170),130,null());
HXDLIN( 509)								::String data3 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/weebTreesBack",4d,ac,bd,40)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 509)								 ::Dynamic fgTrees1;
HXDLIN( 509)								if (::ImageCache_obj::exists(data3)) {
HXLINE( 509)									fgTrees1 = ::ImageCache_obj::get(data3);
            								}
            								else {
HXLINE( 509)									fgTrees1 = data3;
            								}
HXDLIN( 509)								 ::flixel::FlxSprite fgTrees2 = fgTrees->loadGraphic(fgTrees1,null(),null(),null(),null(),null());
HXLINE( 510)								fgTrees2->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 511)								this->add(fgTrees2);
HXLINE( 513)								 ::flixel::FlxSprite bgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit - 380),-800,null());
HXLINE( 514)								::String data4 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 514)								 ::Dynamic treetex;
HXDLIN( 514)								if (::ImageCache_obj::exists(data4)) {
HXLINE( 514)									treetex = ::ImageCache_obj::get(data4);
            								}
            								else {
HXLINE( 514)									treetex = data4;
            								}
HXDLIN( 514)								 ::flixel::graphics::frames::FlxAtlasFrames treetex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(treetex,((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".txt",02,3f,c0,1e)));
HXLINE( 515)								bgTrees->set_frames(treetex1);
HXLINE( 516)								bgTrees->animation->add(HX_("treeLoop",e2,72,7f,2b),::Array_obj< int >::fromData( _hx_array_data_46c2835d_12,19),12,null(),null(),null());
HXLINE( 517)								bgTrees->animation->play(HX_("treeLoop",e2,72,7f,2b),null(),null(),null());
HXLINE( 518)								bgTrees->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 519)								this->add(bgTrees);
HXLINE( 521)								 ::flixel::FlxSprite treeLeaves =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,-40,null());
HXLINE( 522)								::String data5 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 522)								 ::Dynamic _hx_tmp;
HXDLIN( 522)								if (::ImageCache_obj::exists(data5)) {
HXLINE( 522)									_hx_tmp = ::ImageCache_obj::get(data5);
            								}
            								else {
HXLINE( 522)									_hx_tmp = data5;
            								}
HXDLIN( 522)								treeLeaves->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".xml",69,3e,c3,1e))));
HXLINE( 523)								treeLeaves->animation->addByPrefix(HX_("leaves",9c,23,7b,96),HX_("PETALS ALL",0a,57,91,88),24,true,null(),null());
HXLINE( 524)								treeLeaves->animation->play(HX_("leaves",9c,23,7b,96),null(),null(),null());
HXLINE( 525)								treeLeaves->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 526)								this->add(treeLeaves);
HXLINE( 528)								int widShit = ::Std_obj::_hx_int((bgSky2->get_width() * ( (Float)(6) )));
HXLINE( 530)								bgSky2->setGraphicSize(widShit,null());
HXLINE( 531)								bgSchool2->setGraphicSize(widShit,null());
HXLINE( 532)								bgStreet2->setGraphicSize(widShit,null());
HXLINE( 533)								bgTrees->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)1.4))),null());
HXLINE( 534)								fgTrees2->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)0.8))),null());
HXLINE( 535)								treeLeaves->setGraphicSize(widShit,null());
HXLINE( 537)								fgTrees2->updateHitbox();
HXLINE( 538)								bgSky2->updateHitbox();
HXLINE( 539)								bgSchool2->updateHitbox();
HXLINE( 540)								bgStreet2->updateHitbox();
HXLINE( 541)								bgTrees->updateHitbox();
HXLINE( 542)								treeLeaves->updateHitbox();
HXLINE( 544)								this->bgGirls =  ::BackgroundGirls_obj::__alloc( HX_CTX ,( (Float)(-100) ),( (Float)(190) ));
HXLINE( 545)								this->bgGirls->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 547)								if (::PlayState_obj::schoolScared->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase())) {
HXLINE( 549)									this->bgGirls->getScared();
            								}
HXLINE( 552)								 ::BackgroundGirls _hx_tmp1 = this->bgGirls;
HXDLIN( 552)								Float _hx_tmp2 = this->bgGirls->get_width();
HXDLIN( 552)								_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((_hx_tmp2 * ::PlayState_obj::daPixelZoom)),null());
HXLINE( 553)								this->bgGirls->updateHitbox();
HXLINE( 554)								this->add(this->bgGirls);
            							}
            							else {
HXLINE( 556)								if ((stageCheck == HX_("schoolEvil",28,a1,f5,f7))) {
HXLINE( 558)									::PlayState_obj::curStage = HX_("schoolEvil",28,a1,f5,f7);
HXLINE( 560)									int posX = 400;
HXLINE( 561)									int posY = 200;
HXLINE( 563)									 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,posX,posY,null());
HXLINE( 564)									::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 564)									 ::Dynamic _hx_tmp;
HXDLIN( 564)									if (::ImageCache_obj::exists(data)) {
HXLINE( 564)										_hx_tmp = ::ImageCache_obj::get(data);
            									}
            									else {
HXLINE( 564)										_hx_tmp = data;
            									}
HXDLIN( 564)									bg->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".xml",69,3e,c3,1e))));
HXLINE( 565)									bg->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("background 2",80,07,9d,17),24,null(),null(),null());
HXLINE( 566)									bg->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 567)									bg->scrollFactor->set(((Float)0.8),((Float)0.9));
HXLINE( 568)									bg->scale->set(6,6);
HXLINE( 569)									this->add(bg);
            								}
            								else {
HXLINE( 611)									this->defaultCamZoom = ((Float)0.9);
HXLINE( 612)									::PlayState_obj::curStage = HX_("stage",be,6a,0b,84);
HXLINE( 613)									 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 613)									::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 613)									 ::Dynamic bg1;
HXDLIN( 613)									if (::ImageCache_obj::exists(data)) {
HXLINE( 613)										bg1 = ::ImageCache_obj::get(data);
            									}
            									else {
HXLINE( 613)										bg1 = data;
            									}
HXDLIN( 613)									 ::flixel::FlxSprite bg2 = bg->loadGraphic(bg1,null(),null(),null(),null(),null());
HXLINE( 616)									bg2->set_antialiasing(true);
HXLINE( 617)									bg2->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 618)									bg2->set_active(false);
HXLINE( 619)									this->add(bg2);
HXLINE( 621)									 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 621)									::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 621)									 ::Dynamic stageFront1;
HXDLIN( 621)									if (::ImageCache_obj::exists(data1)) {
HXLINE( 621)										stageFront1 = ::ImageCache_obj::get(data1);
            									}
            									else {
HXLINE( 621)										stageFront1 = data1;
            									}
HXDLIN( 621)									 ::flixel::FlxSprite stageFront2 = stageFront->loadGraphic(stageFront1,null(),null(),null(),null(),null());
HXLINE( 622)									stageFront2->setGraphicSize(::Std_obj::_hx_int((stageFront2->get_width() * ((Float)1.1))),null());
HXLINE( 623)									stageFront2->updateHitbox();
HXLINE( 624)									stageFront2->set_antialiasing(true);
HXLINE( 625)									stageFront2->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 626)									stageFront2->set_active(false);
HXLINE( 627)									this->add(stageFront2);
HXLINE( 629)									 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 629)									::String data2 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 629)									 ::Dynamic stageCurtains1;
HXDLIN( 629)									if (::ImageCache_obj::exists(data2)) {
HXLINE( 629)										stageCurtains1 = ::ImageCache_obj::get(data2);
            									}
            									else {
HXLINE( 629)										stageCurtains1 = data2;
            									}
HXDLIN( 629)									 ::flixel::FlxSprite stageCurtains2 = stageCurtains->loadGraphic(stageCurtains1,null(),null(),null(),null(),null());
HXLINE( 630)									stageCurtains2->setGraphicSize(::Std_obj::_hx_int((stageCurtains2->get_width() * ((Float)0.9))),null());
HXLINE( 631)									stageCurtains2->updateHitbox();
HXLINE( 632)									stageCurtains2->set_antialiasing(true);
HXLINE( 633)									stageCurtains2->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 634)									stageCurtains2->set_active(false);
HXLINE( 636)									this->add(stageCurtains2);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 639)		::String _hx_switch_0 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
            		if (  (_hx_switch_0==HX_("bopeebo",b0,01,c5,0c)) ){
HXLINE( 644)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_13,4);
HXLINE( 645)			this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_14,4);
HXLINE( 643)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("cocoa",09,9d,55,4a)) ){
HXLINE( 658)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_15,4);
HXLINE( 659)			this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_16,4);
HXLINE( 657)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("fresh",6e,86,86,06)) ){
HXLINE( 647)			this->camZooming = false;
HXLINE( 648)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_17,4);
HXLINE( 649)			this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_18,4);
HXLINE( 646)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("monster",1a,54,b0,b8)) ){
HXLINE( 655)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_19,4);
HXLINE( 656)			this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_20,4);
HXLINE( 654)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("south",0d,92,cc,80)) ){
HXLINE( 653)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_21,4);
HXDLIN( 653)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("spookeez",0c,7a,2b,75)) ){
HXLINE( 651)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_22,4);
HXDLIN( 651)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE( 661)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_23,4);
HXDLIN( 661)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("tutorial",9e,8f,b5,82)) ){
HXLINE( 641)			this->autoZoom = false;
HXLINE( 642)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_24,4);
HXLINE( 640)			goto _hx_goto_5;
            		}
            		_hx_goto_5:;
HXLINE( 664)		::String gfVersion = HX_("gf",1f,5a,00,00);
HXLINE( 666)		::String gfCheck = HX_("gf",1f,5a,00,00);
HXLINE( 668)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("gf",1f,5a,00,00),::hx::paccDynamic) )) {
HXLINE( 669)			switch((int)(::PlayState_obj::storyWeek)){
            				case (int)4: {
HXLINE( 671)					gfCheck = HX_("gf-car",a6,63,ab,07);
            				}
            				break;
            				case (int)5: {
HXLINE( 672)					gfCheck = HX_("gf-christmas",94,26,b1,6d);
            				}
            				break;
            				case (int)6: {
HXLINE( 673)					gfCheck = HX_("gf-pixel",98,3e,8c,55);
            				}
            				break;
            			}
HXLINE( 676)			::PlayState_obj::SONG->__SetField(HX_("gf",1f,5a,00,00),gfCheck,::hx::paccDynamic);
            		}
            		else {
HXLINE( 678)			gfCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gf",1f,5a,00,00),::hx::paccDynamic)) );
            		}
HXLINE( 680)		::String _hx_switch_1 = gfCheck;
            		if (  (_hx_switch_1==HX_("gf-car",a6,63,ab,07)) ){
HXLINE( 683)			gfVersion = HX_("gf-car",a6,63,ab,07);
HXDLIN( 683)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_1==HX_("gf-christmas",94,26,b1,6d)) ){
HXLINE( 685)			gfVersion = HX_("gf-christmas",94,26,b1,6d);
HXDLIN( 685)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_1==HX_("gf-pixel",98,3e,8c,55)) ){
HXLINE( 687)			gfVersion = HX_("gf-pixel",98,3e,8c,55);
HXDLIN( 687)			goto _hx_goto_6;
            		}
            		_hx_goto_6:;
HXLINE( 690)		this->gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfVersion,null());
HXLINE( 691)		this->gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 693)		this->dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 695)		Float camPos = this->dad->getGraphicMidpoint(null())->x;
HXDLIN( 695)		 ::flixel::math::FlxPoint camPos1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,camPos,this->dad->getGraphicMidpoint(null())->y);
HXLINE( 697)		::String _hx_switch_2 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            		if (  (_hx_switch_2==HX_("dad",47,36,4c,00)) ){
HXLINE( 717)			 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 717)			_g->set_x((_g->x + 400));
HXDLIN( 717)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_2==HX_("gf",1f,5a,00,00)) ){
HXLINE( 700)			this->dad->setPosition(this->gf->x,this->gf->y);
HXLINE( 701)			this->gf->set_visible(false);
HXLINE( 702)			if (::PlayState_obj::isStoryMode) {
HXLINE( 704)				{
HXLINE( 704)					 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 704)					_g->set_x((_g->x + 600));
            				}
HXLINE( 705)				this->camChangeZoom(((Float)1.3),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )),::flixel::tweens::FlxEase_obj::elasticInOut_dyn(),null());
            			}
HXLINE( 699)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_2==HX_("monster",1a,54,b0,b8)) ){
HXLINE( 712)			{
HXLINE( 712)				 ::Character _g = this->dad;
HXDLIN( 712)				_g->set_y((_g->y + 100));
            			}
HXLINE( 713)			Float _hx_tmp = (this->dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 713)			camPos1->set(_hx_tmp,(this->dad->getGraphicMidpoint(null())->y - ( (Float)(100) )));
HXLINE( 711)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_2==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 715)			 ::Character _g = this->dad;
HXDLIN( 715)			_g->set_y((_g->y + 130));
HXDLIN( 715)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_2==HX_("parents-christmas",fe,94,c5,32)) ){
HXLINE( 722)			 ::Character _g = this->dad;
HXDLIN( 722)			_g->set_x((_g->x - ( (Float)(500) )));
HXDLIN( 722)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_2==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 719)			{
HXLINE( 719)				 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 719)				_g->set_x((_g->x + 600));
            			}
HXLINE( 720)			{
HXLINE( 720)				 ::Character _g1 = this->dad;
HXDLIN( 720)				_g1->set_y((_g1->y + 300));
            			}
HXLINE( 718)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_2==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 724)			{
HXLINE( 724)				 ::Character _g = this->dad;
HXDLIN( 724)				_g->set_x((_g->x + 150));
            			}
HXLINE( 725)			{
HXLINE( 725)				 ::Character _g1 = this->dad;
HXDLIN( 725)				_g1->set_y((_g1->y + 360));
            			}
HXLINE( 726)			Float _hx_tmp = (this->dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 726)			camPos1->set(_hx_tmp,this->dad->getGraphicMidpoint(null())->y);
HXLINE( 723)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_2==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 728)			{
HXLINE( 728)				 ::Character _g = this->dad;
HXDLIN( 728)				_g->set_x((_g->x + 150));
            			}
HXLINE( 729)			{
HXLINE( 729)				 ::Character _g1 = this->dad;
HXDLIN( 729)				_g1->set_y((_g1->y + 360));
            			}
HXLINE( 730)			Float _hx_tmp = (this->dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 730)			camPos1->set(_hx_tmp,this->dad->getGraphicMidpoint(null())->y);
HXLINE( 727)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_2==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 732)			{
HXLINE( 732)				 ::Character _g = this->dad;
HXDLIN( 732)				_g->set_x((_g->x - ( (Float)(150) )));
            			}
HXLINE( 733)			{
HXLINE( 733)				 ::Character _g1 = this->dad;
HXDLIN( 733)				_g1->set_y((_g1->y + 100));
            			}
HXLINE( 734)			Float _hx_tmp = (this->dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 734)			camPos1->set(_hx_tmp,this->dad->getGraphicMidpoint(null())->y);
HXLINE( 731)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_2==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 709)			{
HXLINE( 709)				 ::Character _g = this->dad;
HXDLIN( 709)				_g->set_y((_g->y + 200));
            			}
HXLINE( 710)			Float _hx_tmp = (this->dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 710)			camPos1->set(_hx_tmp,(this->dad->getGraphicMidpoint(null())->y - ( (Float)(100) )));
HXLINE( 708)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
HXLINE( 737)		this->boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 740)		::String _hx_switch_3 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_3==HX_("limo",1f,17,b3,47)) ){
HXLINE( 743)			{
HXLINE( 743)				 ::Boyfriend _g = this->boyfriend;
HXDLIN( 743)				_g->set_y((_g->y - ( (Float)(220) )));
            			}
HXLINE( 744)			{
HXLINE( 744)				 ::Boyfriend _g1 = this->boyfriend;
HXDLIN( 744)				_g1->set_x((_g1->x + 260));
            			}
HXLINE( 746)			this->resetFastCar();
HXLINE( 747)			this->add(this->fastCar);
HXLINE( 742)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_3==HX_("mall",d4,3a,56,48)) ){
HXLINE( 750)			 ::Boyfriend _g = this->boyfriend;
HXDLIN( 750)			_g->set_x((_g->x + 200));
HXDLIN( 750)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_3==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 753)			{
HXLINE( 753)				 ::Boyfriend _g = this->boyfriend;
HXDLIN( 753)				_g->set_x((_g->x + 320));
            			}
HXLINE( 754)			{
HXLINE( 754)				 ::Character _g1 = this->dad;
HXDLIN( 754)				_g1->set_y((_g1->y - ( (Float)(80) )));
            			}
HXLINE( 752)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_3==HX_("school",74,b8,c8,40)) ){
HXLINE( 756)			{
HXLINE( 756)				 ::Boyfriend _g = this->boyfriend;
HXDLIN( 756)				_g->set_x((_g->x + 200));
            			}
HXLINE( 757)			{
HXLINE( 757)				 ::Boyfriend _g1 = this->boyfriend;
HXDLIN( 757)				_g1->set_y((_g1->y + 220));
            			}
HXLINE( 758)			{
HXLINE( 758)				 ::Character _g2 = this->gf;
HXDLIN( 758)				_g2->set_x((_g2->x + 180));
            			}
HXLINE( 759)			{
HXLINE( 759)				 ::Character _g3 = this->gf;
HXDLIN( 759)				_g3->set_y((_g3->y + 300));
            			}
HXLINE( 755)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_3==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 763)			 ::DeltaTrail evilTrail =  ::DeltaTrail_obj::__alloc( HX_CTX ,this->dad,null(),4,((Float)0.4),((Float)0.3),((Float)0.069));
HXLINE( 766)			this->add(evilTrail);
HXLINE( 769)			{
HXLINE( 769)				 ::Boyfriend _g = this->boyfriend;
HXDLIN( 769)				_g->set_x((_g->x + 200));
            			}
HXLINE( 770)			{
HXLINE( 770)				 ::Boyfriend _g1 = this->boyfriend;
HXDLIN( 770)				_g1->set_y((_g1->y + 220));
            			}
HXLINE( 771)			{
HXLINE( 771)				 ::Character _g2 = this->gf;
HXDLIN( 771)				_g2->set_x((_g2->x + 180));
            			}
HXLINE( 772)			{
HXLINE( 772)				 ::Character _g3 = this->gf;
HXDLIN( 772)				_g3->set_y((_g3->y + 300));
            			}
HXLINE( 760)			goto _hx_goto_8;
            		}
            		_hx_goto_8:;
HXLINE( 775)		this->add(this->gf);
HXLINE( 777)		if ((::PlayState_obj::curStage == HX_("limo",1f,17,b3,47))) {
HXLINE( 778)			this->add(this->limo);
            		}
HXLINE( 780)		this->add(this->dad);
HXLINE( 781)		this->add(this->boyfriend);
HXLINE( 783)		if (!(::PlayState_obj::pixelSongs->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()))) {
HXLINE( 784)			Float _hx_tmp = (this->boyfriend->x - ( (Float)(250) ));
HXDLIN( 784)			Float _hx_tmp1 = (this->boyfriend->y - ( (Float)(75) ));
HXDLIN( 784)			::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("ratings",b6,65,63,5d)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 784)			 ::Dynamic _hx_tmp2;
HXDLIN( 784)			if (::ImageCache_obj::exists(data)) {
HXLINE( 784)				_hx_tmp2 = ::ImageCache_obj::get(data);
            			}
            			else {
HXLINE( 784)				_hx_tmp2 = data;
            			}
HXLINE( 785)			::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("numbers",8a,69,bb,a9)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 785)			 ::Dynamic _hx_tmp3;
HXDLIN( 785)			if (::ImageCache_obj::exists(data1)) {
HXLINE( 785)				_hx_tmp3 = ::ImageCache_obj::get(data1);
            			}
            			else {
HXLINE( 785)				_hx_tmp3 = data1;
            			}
HXLINE( 786)			::String data2 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("comboBreak",91,91,e1,c6)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 786)			 ::Dynamic _hx_tmp4;
HXDLIN( 786)			if (::ImageCache_obj::exists(data2)) {
HXLINE( 786)				_hx_tmp4 = ::ImageCache_obj::get(data2);
            			}
            			else {
HXLINE( 786)				_hx_tmp4 = data2;
            			}
HXLINE( 784)			this->comboUI =  ::ComboPopup_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp2)->init(1,403)->init(2,163)->init(3,true),::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp3)->init(1,100)->init(2,120)->init(3,true),::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp4)->init(1,348)->init(2,211)->init(3,true),null());
            		}
            		else {
HXLINE( 789)			Float _hx_tmp = (this->boyfriend->x - ( (Float)(250) ));
HXDLIN( 789)			Float _hx_tmp1 = (this->boyfriend->y - ( (Float)(75) ));
HXDLIN( 789)			::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/pixelUI/ratings-pixel",56,5b,e5,47)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 789)			 ::Dynamic _hx_tmp2;
HXDLIN( 789)			if (::ImageCache_obj::exists(data)) {
HXLINE( 789)				_hx_tmp2 = ::ImageCache_obj::get(data);
            			}
            			else {
HXLINE( 789)				_hx_tmp2 = data;
            			}
HXLINE( 790)			::String data1 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/pixelUI/numbers-pixel",2a,f6,67,96)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 790)			 ::Dynamic _hx_tmp3;
HXDLIN( 790)			if (::ImageCache_obj::exists(data1)) {
HXLINE( 790)				_hx_tmp3 = ::ImageCache_obj::get(data1);
            			}
            			else {
HXLINE( 790)				_hx_tmp3 = data1;
            			}
HXLINE( 791)			::String data2 = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/pixelUI/comboBreak-pixel",03,3c,c6,e9)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 791)			 ::Dynamic _hx_tmp4;
HXDLIN( 791)			if (::ImageCache_obj::exists(data2)) {
HXLINE( 791)				_hx_tmp4 = ::ImageCache_obj::get(data2);
            			}
            			else {
HXLINE( 791)				_hx_tmp4 = data2;
            			}
HXLINE( 789)			this->comboUI =  ::ComboPopup_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp2)->init(1,51)->init(2,20)->init(3,false),::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp3)->init(1,11)->init(2,12)->init(3,false),::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp4)->init(1,53)->init(2,32)->init(3,false),::Array_obj< Float >::__new(3)->init(0,(::PlayState_obj::daPixelZoom * ((Float)0.7)))->init(1,(::PlayState_obj::daPixelZoom * ((Float)0.8)))->init(2,(::PlayState_obj::daPixelZoom * ((Float)0.7))));
HXLINE( 793)			::Array< Float > _hx_tmp5 = this->comboUI->numberPosition;
HXDLIN( 793)			int _hx_tmp6 = 0;
HXDLIN( 793)			_hx_tmp5[_hx_tmp6] = (_hx_tmp5->__get(_hx_tmp6) - ( (Float)(120) ));
            		}
HXLINE( 796)		if ((::config::Config_obj::comboType == 1)) {
HXLINE( 798)			this->comboUI->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 799)			this->comboUI->setPosition(0,0);
HXLINE( 800)			this->comboUI->scrollFactor->set(0,0);
HXLINE( 801)			this->comboUI->setScales(::Array_obj< Float >::__new(3)->init(0,(this->comboUI->ratingScale * ((Float)0.8)))->init(1,this->comboUI->numberScale)->init(2,(this->comboUI->breakScale * ((Float)0.8))),null());
HXLINE( 802)			this->comboUI->accelScale = ((Float)0.2);
HXLINE( 803)			this->comboUI->velocityScale = ((Float)0.2);
HXLINE( 805)			if (!(::config::Config_obj::downscroll)) {
HXLINE( 806)				this->comboUI->ratingPosition = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_25,2);
HXLINE( 807)				this->comboUI->numberPosition = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_26,2);
HXLINE( 808)				this->comboUI->breakPosition = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_27,2);
            			}
            			else {
HXLINE( 811)				this->comboUI->ratingPosition = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_28,2);
HXLINE( 812)				this->comboUI->numberPosition = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_29,2);
HXLINE( 813)				this->comboUI->breakPosition = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_30,2);
            			}
HXLINE( 816)			if (::PlayState_obj::pixelSongs->contains(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase())) {
HXLINE( 817)				::Array< Float > _hx_tmp = this->comboUI->numberPosition;
HXDLIN( 817)				int _hx_tmp1 = 0;
HXDLIN( 817)				_hx_tmp[_hx_tmp1] = (_hx_tmp->__get(_hx_tmp1) - ( (Float)(120) ));
HXLINE( 818)				this->comboUI->setPosition(160,60);
            			}
            		}
HXLINE( 823)		if ((::config::Config_obj::comboType < 2)) {
HXLINE( 824)			this->add(this->comboUI);
            		}
HXLINE( 827)		 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE( 830)		doof->scrollFactor->set(null(),null());
HXLINE( 831)		doof->finishThing = this->startCountdown_dyn();
HXLINE( 833)		::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 835)		if (::config::Config_obj::downscroll) {
HXLINE( 836)			this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,570,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
            		}
            		else {
HXLINE( 839)			this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,30,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
            		}
HXLINE( 841)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 843)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 844)		this->add(this->strumLineNotes);
HXLINE( 846)		this->playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 847)		this->enemyStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 851)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 855)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 857)		this->camFollow->setPosition(camPos1->x,camPos1->y);
HXLINE( 859)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE( 861)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE( 862)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 865)		this->add(this->camFollow);
HXLINE( 867)		::flixel::FlxG_obj::camera->follow(this->camFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),null());
HXLINE( 870)		::flixel::FlxG_obj::camera->set_zoom(this->defaultCamZoom);
HXLINE( 871)		{
HXLINE( 871)			 ::flixel::FlxCamera _this2 = ::flixel::FlxG_obj::camera;
HXDLIN( 871)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 871)			_this2->scroll->set((point->x - (( (Float)(_this2->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this2->height) ) * ((Float)0.5))));
HXDLIN( 871)			if (point->_weak) {
HXLINE( 871)				point->put();
            			}
            		}
HXLINE( 873)		{
HXLINE( 873)			 ::flixel::math::FlxRect _this3 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 873)			_this3->x = ( (Float)(0) );
HXDLIN( 873)			_this3->y = ( (Float)(0) );
HXDLIN( 873)			_this3->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 873)			_this3->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 875)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 877)		if (::lime::utils::Assets_obj::exists(((HX_("assets/data/",f9,10,73,a0) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/meta.txt",76,17,c9,d6)),null())) {
HXLINE( 878)			this->meta =  ::SongMetaTags_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(144) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
HXLINE( 879)			this->meta->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 880)			this->add(this->meta);
            		}
HXLINE( 883)		 ::Dynamic _hx_tmp7;
HXDLIN( 883)		if (::config::Config_obj::downscroll) {
HXLINE( 883)			_hx_tmp7 = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.1));
            		}
            		else {
HXLINE( 883)			_hx_tmp7 = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.875));
            		}
HXDLIN( 883)		 ::flixel::FlxSprite _hx_tmp8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,_hx_tmp7,null());
HXDLIN( 883)		::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e));
HXDLIN( 883)		 ::Dynamic _hx_tmp9;
HXDLIN( 883)		if (::ImageCache_obj::exists(data)) {
HXLINE( 883)			_hx_tmp9 = ::ImageCache_obj::get(data);
            		}
            		else {
HXLINE( 883)			_hx_tmp9 = data;
            		}
HXDLIN( 883)		this->healthBarBG = _hx_tmp8->loadGraphic(_hx_tmp9,null(),null(),null(),null(),null());
HXLINE( 884)		this->healthBarBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 885)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE( 886)		this->add(this->healthBarBG);
HXLINE( 888)		Float _hx_tmp10 = (this->healthBarBG->x + 4);
HXDLIN( 888)		Float _hx_tmp11 = (this->healthBarBG->y + 4);
HXDLIN( 888)		int _hx_tmp12 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN( 888)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp10,_hx_tmp11,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp12,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE( 890)		this->healthBar->scrollFactor->set(null(),null());
HXLINE( 891)		this->healthBar->createFilledBar(-65536,-10027213,null(),null());
HXLINE( 894)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->healthBarBG->x - ( (Float)(105) )),((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 36),800,HX_("",00,00,00,00),22,null());
HXLINE( 895)		this->scoreTxt->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),22,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 896)		this->scoreTxt->scrollFactor->set(null(),null());
HXLINE( 898)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true,null());
HXLINE( 899)		 ::HealthIcon _hx_tmp13 = this->iconP1;
HXDLIN( 899)		Float _hx_tmp14 = this->healthBar->y;
HXDLIN( 899)		_hx_tmp13->set_y((_hx_tmp14 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE( 902)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),false,null());
HXLINE( 903)		 ::HealthIcon _hx_tmp15 = this->iconP2;
HXDLIN( 903)		Float _hx_tmp16 = this->healthBar->y;
HXDLIN( 903)		_hx_tmp15->set_y((_hx_tmp16 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE( 905)		this->add(this->healthBar);
HXLINE( 906)		this->add(this->iconP2);
HXLINE( 907)		this->add(this->iconP1);
HXLINE( 908)		this->add(this->scoreTxt);
HXLINE( 910)		this->strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 911)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 912)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 913)		this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 914)		this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 915)		this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 916)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 917)		doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 919)		this->healthBar->set_visible(false);
HXLINE( 920)		this->healthBarBG->set_visible(false);
HXLINE( 921)		this->iconP1->set_visible(false);
HXLINE( 922)		this->iconP2->set_visible(false);
HXLINE( 923)		this->scoreTxt->set_visible(false);
HXLINE( 930)		this->startingSong = true;
HXLINE( 932)		if (::PlayState_obj::isStoryMode) {
HXLINE( 934)			::String _hx_switch_4 = this->curSong.toLowerCase();
            			if (  (_hx_switch_4==HX_("roses",04,6c,64,ed)) ){
HXLINE( 967)				::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("ANGRY",01,81,d0,a0)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 968)				this->schoolIntro(doof);
HXLINE( 966)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_4==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 965)				this->schoolIntro(doof);
HXDLIN( 965)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_4==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE( 970)				this->schoolIntro(doof);
HXDLIN( 970)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_4==HX_("winter-horrorland",9d,39,f4,1e)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_959_create)
HXLINE( 959)							_gthis->startCountdown();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_952_create)
HXLINE( 953)						_gthis->camHUD->set_visible(true);
HXLINE( 954)						_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 955)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),_gthis->defaultCamZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_943_create)
HXLINE( 944)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 945)					::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("Lights_Turn_On",5f,e1,29,ad)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE( 946)					_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE( 947)					{
HXLINE( 947)						 ::flixel::FlxObject _g = _gthis->camFollow;
HXDLIN( 947)						_g->set_x((_g->x + 200));
            					}
HXLINE( 948)					{
HXLINE( 948)						 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 948)						 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN( 948)						_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 948)						if (point->_weak) {
HXLINE( 948)							point->put();
            						}
            					}
HXLINE( 949)					::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE( 951)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.8), ::Dynamic(new _hx_Closure_1(_gthis,blackScreen2)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 937)				 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 937)				int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN( 937)				 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE( 938)				this->add(blackScreen2);
HXLINE( 939)				blackScreen2->scrollFactor->set(null(),null());
HXLINE( 940)				this->camHUD->set_visible(false);
HXLINE( 942)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_2(_gthis,blackScreen2)),null());
HXLINE( 936)				goto _hx_goto_9;
            			}
            			/* default */{
HXLINE( 972)				this->startCountdown();
            			}
            			_hx_goto_9:;
            		}
            		else {
HXLINE( 977)			::String _g = this->curSong.toLowerCase();
HXLINE( 980)			this->startCountdown();
            		}
HXLINE( 987)		 ::flixel::FlxSprite bgDim =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-640.),((Float)-360.),null())->makeGraphic(2560,1440,-16777216,null(),null());
HXLINE( 988)		bgDim->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camOverlay));
HXLINE( 989)		bgDim->set_alpha((( (Float)(::config::Config_obj::bgDim) ) / ( (Float)(10) )));
HXLINE( 990)		this->add(bgDim);
HXLINE( 992)		this->super::create();
            	}


void PlayState_obj::updateAccuracy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_996_updateAccuracy)
HXLINE( 998)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 998)		_hx_tmp->totalPlayed = (_hx_tmp->totalPlayed + 1);
HXLINE( 999)		this->accuracy = ((this->totalNotesHit / ( (Float)(this->totalPlayed) )) * ( (Float)(100) ));
HXLINE(1000)		if ((this->accuracy >= 100)) {
HXLINE(1001)			this->accuracy = ( (Float)(100) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateAccuracy,(void))

void PlayState_obj::schoolIntro( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,black1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1035_schoolIntro)
HXLINE(1036)			{
HXLINE(1036)				 ::flixel::FlxSprite _g = black1;
HXDLIN(1036)				_g->set_alpha((_g->alpha - ((Float)0.15)));
            			}
HXLINE(1038)			if ((black1->alpha > 0)) {
HXLINE(1040)				tmr->reset(((Float)0.3));
            			}
            			else {
HXLINE(1044)				if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1046)					_gthis->inCutscene = true;
HXLINE(1048)					if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
            						HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer swagTimer){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1053_schoolIntro)
HXLINE(1054)							{
HXLINE(1054)								 ::flixel::FlxSprite _g = senpaiEvil;
HXDLIN(1054)								_g->set_alpha((_g->alpha + ((Float)0.15)));
            							}
HXLINE(1055)							if ((senpaiEvil->alpha < 1)) {
HXLINE(1057)								swagTimer->reset(null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1068_schoolIntro)
HXLINE(1068)										_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1063_schoolIntro)
HXLINE(1064)									_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1065)									_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1066)									::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),true);
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer deadTime){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1073_schoolIntro)
HXLINE(1073)									::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(1061)								senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1062)								::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("Senpai_Dies",56,a2,b9,ec)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),1,false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,red1,senpaiEvil)));
HXLINE(1071)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1050)						_gthis->add(senpaiEvil).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1051)						senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE(1052)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,dialogueBox,red1,senpaiEvil)),null());
            					}
            					else {
HXLINE(1080)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				else {
HXLINE(1084)					_gthis->startCountdown();
            				}
HXLINE(1086)				_gthis->remove(black1,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1007_schoolIntro)
HXLINE(1006)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1008)		 ::flixel::FlxSprite black =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1008)		 ::flixel::FlxSprite black1 = black->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE(1009)		black1->scrollFactor->set(null(),null());
HXLINE(1010)		this->add(black1);
HXLINE(1012)		 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1012)		 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE(1013)		red1->scrollFactor->set(null(),null());
HXLINE(1015)		 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1016)		 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1016)		::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(1016)		 ::Dynamic _hx_tmp;
HXDLIN(1016)		if (::ImageCache_obj::exists(data)) {
HXLINE(1016)			_hx_tmp = ::ImageCache_obj::get(data);
            		}
            		else {
HXLINE(1016)			_hx_tmp = data;
            		}
HXDLIN(1016)		senpaiEvil1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".xml",69,3e,c3,1e))));
HXLINE(1017)		senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE(1018)		 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN(1018)		senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ((Float)5.5))),null());
HXLINE(1019)		senpaiEvil->updateHitbox();
HXLINE(1020)		senpaiEvil->screenCenter(null());
HXLINE(1022)		{
HXLINE(1022)			 ::flixel::FlxSprite _g = senpaiEvil;
HXDLIN(1022)			_g->set_y((_g->y - ( (Float)(115) )));
            		}
HXLINE(1024)		bool _hx_tmp1;
HXDLIN(1024)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() != HX_("roses",04,6c,64,ed))) {
HXLINE(1024)			_hx_tmp1 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c));
            		}
            		else {
HXLINE(1024)			_hx_tmp1 = true;
            		}
HXDLIN(1024)		if (_hx_tmp1) {
HXLINE(1026)			this->remove(black1,null());
HXLINE(1028)			if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
HXLINE(1030)				this->add(red1);
            			}
            		}
HXLINE(1034)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_4(_gthis,dialogueBox,red1,black1,senpaiEvil)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,schoolIntro,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,::String,altSuffix,::Array< int >,swagCounter,::Array< ::String >,introAlts) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1140_startCountdown)
HXLINE(1141)			if (_gthis->dadBeats->contains(::hx::Mod(swagCounter->__get(0),4))) {
HXLINE(1142)				_gthis->dad->dance(null());
            			}
HXLINE(1144)			_gthis->gf->dance(null());
HXLINE(1146)			if (_gthis->bfBeats->contains(::hx::Mod(swagCounter->__get(0),4))) {
HXLINE(1147)				_gthis->boyfriend->dance(null());
            			}
HXLINE(1149)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
HXLINE(1153)					::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("intro3",47,54,90,9e) + altSuffix)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
HXLINE(1154)					if (::hx::IsNotNull( _gthis->meta )) {
HXLINE(1155)						_gthis->meta->start();
            					}
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready2) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1177_startCountdown)
HXLINE(1177)						ready2->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1158)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1158)					::String data = ((HX_("assets/images/",ab,47,cb,9f) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(1158)					 ::Dynamic ready1;
HXDLIN(1158)					if (::ImageCache_obj::exists(data)) {
HXLINE(1158)						ready1 = ::ImageCache_obj::get(data);
            					}
            					else {
HXLINE(1158)						ready1 = data;
            					}
HXDLIN(1158)					 ::flixel::FlxSprite ready2 = ready->loadGraphic(ready1,null(),null(),null(),null(),null());
HXLINE(1159)					ready2->scrollFactor->set(null(),null());
HXLINE(1160)					 ::flixel::FlxSprite ready3 = ready2;
HXDLIN(1160)					ready3->set_antialiasing(!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))));
HXLINE(1162)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1163)						 ::flixel::FlxSprite ready = ready2;
HXDLIN(1163)						Float _hx_tmp = ready2->get_width();
HXDLIN(1163)						ready->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::PlayState_obj::daPixelZoom) * ((Float)0.8))),null());
            					}
            					else {
HXLINE(1165)						 ::flixel::FlxSprite ready = ready2;
HXDLIN(1165)						ready->setGraphicSize(::Std_obj::_hx_int((ready2->get_width() * ((Float)0.5))),null());
            					}
HXLINE(1167)					ready2->updateHitbox();
HXLINE(1169)					ready2->screenCenter(null());
HXLINE(1170)					{
HXLINE(1170)						 ::flixel::FlxSprite _g = ready2;
HXDLIN(1170)						_g->set_y((_g->y - ( (Float)(120) )));
            					}
HXLINE(1171)					ready2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(1172)					_gthis->add(ready2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1173)					 ::flixel::FlxSprite ready4 = ready2;
HXDLIN(1173)					 ::flixel::FlxSprite _g1 = ready2;
HXDLIN(1173)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g1->set_y((_g1->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1173)					::flixel::tweens::FlxTween_obj::tween(ready4,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready2)))));
HXLINE(1180)					::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("intro2",46,54,90,9e) + altSuffix)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set2) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1201_startCountdown)
HXLINE(1201)						set2->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1182)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1182)					::String data = ((HX_("assets/images/",ab,47,cb,9f) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(1182)					 ::Dynamic set1;
HXDLIN(1182)					if (::ImageCache_obj::exists(data)) {
HXLINE(1182)						set1 = ::ImageCache_obj::get(data);
            					}
            					else {
HXLINE(1182)						set1 = data;
            					}
HXDLIN(1182)					 ::flixel::FlxSprite set2 = set->loadGraphic(set1,null(),null(),null(),null(),null());
HXLINE(1183)					set2->scrollFactor->set(null(),null());
HXLINE(1184)					 ::flixel::FlxSprite set3 = set2;
HXDLIN(1184)					set3->set_antialiasing(!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))));
HXLINE(1186)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1187)						 ::flixel::FlxSprite set = set2;
HXDLIN(1187)						Float _hx_tmp = set2->get_width();
HXDLIN(1187)						set->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::PlayState_obj::daPixelZoom) * ((Float)0.8))),null());
            					}
            					else {
HXLINE(1189)						 ::flixel::FlxSprite set = set2;
HXDLIN(1189)						set->setGraphicSize(::Std_obj::_hx_int((set2->get_width() * ((Float)0.5))),null());
            					}
HXLINE(1191)					set2->updateHitbox();
HXLINE(1193)					set2->screenCenter(null());
HXLINE(1194)					{
HXLINE(1194)						 ::flixel::FlxSprite _g = set2;
HXDLIN(1194)						_g->set_y((_g->y - ( (Float)(120) )));
            					}
HXLINE(1195)					set2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(1196)					_gthis->add(set2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1197)					 ::flixel::FlxSprite set4 = set2;
HXDLIN(1197)					 ::flixel::FlxSprite _g1 = set2;
HXDLIN(1197)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g1->set_y((_g1->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1197)					::flixel::tweens::FlxTween_obj::tween(set4,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set2)))));
HXLINE(1204)					::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("intro1",45,54,90,9e) + altSuffix)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go2) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1225_startCountdown)
HXLINE(1225)						go2->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1206)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1206)					::String data = ((HX_("assets/images/",ab,47,cb,9f) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(1206)					 ::Dynamic go1;
HXDLIN(1206)					if (::ImageCache_obj::exists(data)) {
HXLINE(1206)						go1 = ::ImageCache_obj::get(data);
            					}
            					else {
HXLINE(1206)						go1 = data;
            					}
HXDLIN(1206)					 ::flixel::FlxSprite go2 = go->loadGraphic(go1,null(),null(),null(),null(),null());
HXLINE(1207)					go2->scrollFactor->set(null(),null());
HXLINE(1208)					 ::flixel::FlxSprite go3 = go2;
HXDLIN(1208)					go3->set_antialiasing(!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))));
HXLINE(1210)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1211)						 ::flixel::FlxSprite go = go2;
HXDLIN(1211)						Float _hx_tmp = go2->get_width();
HXDLIN(1211)						go->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::PlayState_obj::daPixelZoom) * ((Float)0.8))),null());
            					}
            					else {
HXLINE(1213)						 ::flixel::FlxSprite go = go2;
HXDLIN(1213)						go->setGraphicSize(::Std_obj::_hx_int((go2->get_width() * ((Float)0.8))),null());
            					}
HXLINE(1215)					go2->updateHitbox();
HXLINE(1217)					go2->screenCenter(null());
HXLINE(1218)					{
HXLINE(1218)						 ::flixel::FlxSprite _g = go2;
HXDLIN(1218)						_g->set_y((_g->y - ( (Float)(120) )));
            					}
HXLINE(1219)					go2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(1220)					_gthis->add(go2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1221)					 ::flixel::FlxSprite go4 = go2;
HXDLIN(1221)					 ::flixel::FlxSprite _g1 = go2;
HXDLIN(1221)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g1->set_y((_g1->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1221)					::flixel::tweens::FlxTween_obj::tween(go4,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go2)))));
HXLINE(1228)					::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("introGo",b4,7b,b9,1f) + altSuffix)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)4: {
            				}
            				break;
            			}
HXLINE(1232)			::Array< int > swagCounter1 = swagCounter;
HXDLIN(1232)			int _hx_tmp = 0;
HXDLIN(1232)			swagCounter1[_hx_tmp] = (swagCounter1->__get(_hx_tmp) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1094_startCountdown)
HXLINE(1093)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1095)		this->inCutscene = false;
HXLINE(1097)		this->healthBar->set_visible(true);
HXLINE(1098)		this->healthBarBG->set_visible(true);
HXLINE(1099)		this->iconP1->set_visible(true);
HXLINE(1100)		this->iconP2->set_visible(true);
HXLINE(1101)		this->scoreTxt->set_visible(true);
HXLINE(1103)		this->generateStaticArrows(0);
HXLINE(1104)		this->generateStaticArrows(1);
HXLINE(1106)		this->talking = false;
HXLINE(1107)		this->startedCountdown = true;
HXLINE(1108)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1109)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1109)		::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1111)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_47,1);
HXLINE(1113)		 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1114)		introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_48,3));
HXLINE(1115)		introAssets->set(HX_("school",74,b8,c8,40),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_49,3));
HXLINE(1120)		introAssets->set(HX_("schoolEvil",28,a1,f5,f7),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_50,3));
HXLINE(1126)		::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1127)		::String altSuffix = HX_("",00,00,00,00);
HXLINE(1129)		{
HXLINE(1129)			 ::Dynamic value = introAssets->keys();
HXDLIN(1129)			while(( (bool)(value->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1129)				::String value1 = ( (::String)(value->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1131)				if ((value1 == ::PlayState_obj::curStage)) {
HXLINE(1133)					introAlts = ( (::Array< ::String >)(introAssets->get(value1)) );
HXLINE(1134)					altSuffix = HX_("-pixel",39,03,b3,c0);
            				}
            			}
            		}
HXLINE(1139)		 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1139)		this->startTimer = _hx_tmp1->start((::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis,altSuffix,swagCounter,introAlts)),5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

void PlayState_obj::startSong(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1262_startSong)
HXLINE(1262)			if (!(_gthis->paused)) {
HXLINE(1263)				_gthis->resyncVocals();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1242_startSong)
HXLINE(1241)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1243)		this->startingSong = false;
HXLINE(1245)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1246)		this->lastReportedPlayheadPosition = 0;
HXLINE(1248)		if (!(this->paused)) {
HXLINE(1249)			::flixel::FlxG_obj::sound->playMusic( ::Dynamic((((HX_("assets/music/",36,ab,d2,e0) + (::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_("_Inst",c5,8b,a5,e3))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension)),1,false,null());
            		}
HXLINE(1251)		::flixel::FlxG_obj::sound->music->onComplete = this->endSong_dyn();
HXLINE(1252)		this->vocals->play(null(),null(),null());
HXLINE(1254)		if (::PlayState_obj::sectionStart) {
HXLINE(1255)			::flixel::FlxG_obj::sound->music->set_time(::PlayState_obj::sectionStartTime);
HXLINE(1256)			::Conductor_obj::songPosition = ::PlayState_obj::sectionStartTime;
HXLINE(1257)			this->vocals->set_time(::PlayState_obj::sectionStartTime);
            		}
HXLINE(1260)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1269_generateSong)
HXLINE(1272)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(1273)		::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1275)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1277)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1279)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1279)			this->vocals = _hx_tmp->loadEmbedded((((HX_("assets/music/",36,ab,d2,e0) + (this->curSong + HX_("_Voices",40,5c,55,00))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null());
            		}
            		else {
HXLINE(1282)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1284)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1286)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1287)		this->add(this->notes);
HXLINE(1289)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1294)		int playerCounter = 0;
HXLINE(1296)		int daBeats = 0;
HXLINE(1298)		{
HXLINE(1298)			int _g = 0;
HXDLIN(1298)			while((_g < noteData->length)){
HXLINE(1298)				 ::Dynamic section = noteData->__get(_g);
HXDLIN(1298)				_g = (_g + 1);
HXLINE(1300)				bool _hx_tmp;
HXDLIN(1300)				if (::PlayState_obj::sectionStart) {
HXLINE(1300)					_hx_tmp = (daBeats < ::PlayState_obj::sectionStartPoint);
            				}
            				else {
HXLINE(1300)					_hx_tmp = false;
            				}
HXDLIN(1300)				if (_hx_tmp) {
HXLINE(1301)					daBeats = (daBeats + 1);
HXLINE(1302)					continue;
            				}
HXLINE(1305)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE(1307)				{
HXLINE(1307)					int _g1 = 0;
HXDLIN(1307)					::cpp::VirtualArray _g2 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1307)					while((_g1 < _g2->get_length())){
HXLINE(1307)						 ::Dynamic songNotes = _g2->__get(_g1);
HXDLIN(1307)						_g1 = (_g1 + 1);
HXLINE(1309)						Float daStrumTime = ( (Float)(songNotes->__GetItem(0)) );
HXLINE(1310)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXLINE(1312)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1314)						if (::hx::IsGreater( songNotes->__GetItem(1),3 )) {
HXLINE(1316)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE(1319)						 ::Note oldNote;
HXLINE(1320)						if ((this->unspawnNotes->length > 0)) {
HXLINE(1321)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(1323)							oldNote = null();
            						}
HXLINE(1325)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,false,oldNote,null());
HXLINE(1326)						swagNote->sustainLength = ( (Float)(songNotes->__GetItem(2)) );
HXLINE(1327)						swagNote->scrollFactor->set(0,0);
HXLINE(1329)						Float susLength = swagNote->sustainLength;
HXLINE(1331)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE(1332)						this->unspawnNotes->push(swagNote);
HXLINE(1334)						{
HXLINE(1334)							int _g = 0;
HXDLIN(1334)							int _g3 = ::Math_obj::round(susLength);
HXDLIN(1334)							while((_g < _g3)){
HXLINE(1334)								_g = (_g + 1);
HXDLIN(1334)								int susNote = (_g - 1);
HXLINE(1336)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(1338)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,false,oldNote,true);
HXLINE(1339)								sustainNote->scrollFactor->set(null(),null());
HXLINE(1340)								this->unspawnNotes->push(sustainNote);
HXLINE(1342)								sustainNote->mustPress = gottaHitNote;
HXLINE(1344)								if (sustainNote->mustPress) {
HXLINE(1346)									 ::Note _g = sustainNote;
HXDLIN(1346)									_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            							}
            						}
HXLINE(1350)						swagNote->mustPress = gottaHitNote;
HXLINE(1352)						if (swagNote->mustPress) {
HXLINE(1354)							 ::Note _g = swagNote;
HXDLIN(1354)							_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE(1360)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(1366)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(1368)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1373_sortByShit)
HXDLIN(1373)		Float Value1 = Obj1->strumTime;
HXDLIN(1373)		Float Value2 = Obj2->strumTime;
HXDLIN(1373)		int result = 0;
HXDLIN(1373)		if ((Value1 < Value2)) {
HXDLIN(1373)			result = -1;
            		}
            		else {
HXDLIN(1373)			if ((Value1 > Value2)) {
HXDLIN(1373)				result = 1;
            			}
            		}
HXDLIN(1373)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1378_generateStaticArrows)
HXDLIN(1378)		int _g = 0;
HXDLIN(1378)		while((_g < 4)){
HXDLIN(1378)			_g = (_g + 1);
HXDLIN(1378)			int i = (_g - 1);
HXLINE(1381)			 ::flixel::FlxSprite babyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,50,this->strumLine->y,null());
HXLINE(1383)			::String _hx_switch_0 = ::PlayState_obj::curStage;
            			if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ||  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(1386)				 ::flixel::FlxSprite babyArrow1 = babyArrow;
HXDLIN(1386)				::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("weeb/pixelUI/arrows-pixels",b7,c3,c7,09)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(1386)				 ::Dynamic _hx_tmp;
HXDLIN(1386)				if (::ImageCache_obj::exists(data)) {
HXLINE(1386)					_hx_tmp = ::ImageCache_obj::get(data);
            				}
            				else {
HXLINE(1386)					_hx_tmp = data;
            				}
HXDLIN(1386)				babyArrow1->loadGraphic(_hx_tmp,true,17,17,null(),null());
HXLINE(1387)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_46c2835d_63,1),null(),null(),null(),null());
HXLINE(1388)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_64,1),null(),null(),null(),null());
HXLINE(1389)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_46c2835d_65,1),null(),null(),null(),null());
HXLINE(1390)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_66,1),null(),null(),null(),null());
HXLINE(1392)				 ::flixel::FlxSprite babyArrow2 = babyArrow;
HXDLIN(1392)				Float _hx_tmp1 = babyArrow->get_width();
HXDLIN(1392)				babyArrow2->setGraphicSize(::Std_obj::_hx_int((_hx_tmp1 * ::PlayState_obj::daPixelZoom)),null());
HXLINE(1393)				babyArrow->updateHitbox();
HXLINE(1394)				babyArrow->set_antialiasing(false);
HXLINE(1396)				Float _hx_switch_1 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_1==( (Float)(0) )) ){
HXLINE(1414)					{
HXLINE(1414)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1414)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
            					}
HXLINE(1415)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_67,1),null(),null(),null(),null());
HXLINE(1416)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_68,2),12,false,null(),null());
HXLINE(1417)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_69,2),24,false,null(),null());
HXLINE(1413)					goto _hx_goto_61;
            				}
            				if (  (_hx_switch_1==( (Float)(1) )) ){
HXLINE(1409)					{
HXLINE(1409)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1409)						_g->set_x((_g->x + ::Note_obj::swagWidth));
            					}
HXLINE(1410)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_70,1),null(),null(),null(),null());
HXLINE(1411)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_71,2),12,false,null(),null());
HXLINE(1412)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_72,2),24,false,null(),null());
HXLINE(1408)					goto _hx_goto_61;
            				}
            				if (  (_hx_switch_1==( (Float)(2) )) ){
HXLINE(1399)					{
HXLINE(1399)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1399)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
            					}
HXLINE(1400)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_73,1),null(),null(),null(),null());
HXLINE(1401)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_74,2),12,false,null(),null());
HXLINE(1402)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_75,2),12,false,null(),null());
HXLINE(1398)					goto _hx_goto_61;
            				}
            				if (  (_hx_switch_1==( (Float)(3) )) ){
HXLINE(1404)					{
HXLINE(1404)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1404)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
            					}
HXLINE(1405)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_76,1),null(),null(),null(),null());
HXLINE(1406)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_77,2),12,false,null(),null());
HXLINE(1407)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_78,2),24,false,null(),null());
HXLINE(1403)					goto _hx_goto_61;
            				}
            				_hx_goto_61:;
HXLINE(1385)				goto _hx_goto_60;
            			}
            			/* default */{
HXLINE(1421)				 ::flixel::FlxSprite babyArrow1 = babyArrow;
HXDLIN(1421)				::String data = ((HX_("assets/images/",ab,47,cb,9f) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e));
HXDLIN(1421)				 ::Dynamic _hx_tmp;
HXDLIN(1421)				if (::ImageCache_obj::exists(data)) {
HXLINE(1421)					_hx_tmp = ::ImageCache_obj::get(data);
            				}
            				else {
HXLINE(1421)					_hx_tmp = data;
            				}
HXDLIN(1421)				babyArrow1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,((HX_("assets/images/",ab,47,cb,9f) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e))));
HXLINE(1422)				babyArrow->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1423)				babyArrow->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1424)				babyArrow->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1425)				babyArrow->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1427)				babyArrow->set_antialiasing(true);
HXLINE(1428)				 ::flixel::FlxSprite babyArrow2 = babyArrow;
HXDLIN(1428)				babyArrow2->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
HXLINE(1430)				Float _hx_switch_2 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_2==( (Float)(0) )) ){
HXLINE(1448)					{
HXLINE(1448)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1448)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
            					}
HXLINE(1449)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1450)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("left press",aa,26,70,8e),24,false,null(),null());
HXLINE(1451)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("left confirm",e7,c7,19,fe),24,false,null(),null());
HXLINE(1447)					goto _hx_goto_59;
            				}
            				if (  (_hx_switch_2==( (Float)(1) )) ){
HXLINE(1443)					{
HXLINE(1443)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1443)						_g->set_x((_g->x + ::Note_obj::swagWidth));
            					}
HXLINE(1444)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1445)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("down press",45,4d,63,9c),24,false,null(),null());
HXLINE(1446)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("down confirm",42,0b,18,cc),24,false,null(),null());
HXLINE(1442)					goto _hx_goto_59;
            				}
            				if (  (_hx_switch_2==( (Float)(2) )) ){
HXLINE(1433)					{
HXLINE(1433)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1433)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
            					}
HXLINE(1434)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1435)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("up press",fe,fb,65,e9),24,false,null(),null());
HXLINE(1436)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("up confirm",3b,9a,2e,62),24,false,null(),null());
HXLINE(1432)					goto _hx_goto_59;
            				}
            				if (  (_hx_switch_2==( (Float)(3) )) ){
HXLINE(1438)					{
HXLINE(1438)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1438)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
            					}
HXLINE(1439)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1440)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("right press",3f,38,e4,c8),24,false,null(),null());
HXLINE(1441)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("right confirm",bc,28,e5,ca),24,false,null(),null());
HXLINE(1437)					goto _hx_goto_59;
            				}
            				_hx_goto_59:;
            			}
            			_hx_goto_60:;
HXLINE(1455)			babyArrow->updateHitbox();
HXLINE(1456)			babyArrow->scrollFactor->set(null(),null());
HXLINE(1458)			{
HXLINE(1458)				 ::flixel::FlxSprite _g1 = babyArrow;
HXDLIN(1458)				_g1->set_y((_g1->y - ( (Float)(10) )));
            			}
HXLINE(1459)			babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1460)			::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),(babyArrow->y + 10))
            				->setFixed(1,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE(1462)			babyArrow->ID = i;
HXLINE(1464)			if ((player == 1)) {
HXLINE(1466)				this->playerStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,babyArrow) HXARGC(1)
            				void _hx_run(::String name){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1472_generateStaticArrows)
HXLINE(1472)					if ((name == HX_("confirm",00,9d,39,10))) {
HXLINE(1473)						babyArrow->animation->play(HX_("static",ae,dc,fb,05),true,null(),null());
HXLINE(1474)						babyArrow->centerOffsets(null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1470)				this->enemyStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1471)				babyArrow->animation->finishCallback =  ::Dynamic(new _hx_Closure_0(babyArrow));
            			}
HXLINE(1479)			babyArrow->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE(1480)			{
HXLINE(1480)				 ::flixel::FlxSprite _g2 = babyArrow;
HXDLIN(1480)				_g2->set_x((_g2->x + 50));
            			}
HXLINE(1481)			{
HXLINE(1481)				 ::flixel::FlxSprite _g3 = babyArrow;
HXDLIN(1481)				_g3->set_x((_g3->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
            			}
HXLINE(1483)			this->strumLineNotes->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1488_openSubState)
HXLINE(1489)		if (this->paused) {
HXLINE(1491)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1493)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1494)				this->vocals->pause();
            			}
HXLINE(1497)			if (!(this->startTimer->finished)) {
HXLINE(1498)				this->startTimer->active = false;
            			}
            		}
HXLINE(1501)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1505_closeSubState)
HXLINE(1507)		::PlayerSettings_obj::gameControls();
HXLINE(1509)		if (this->paused) {
HXLINE(1511)			bool _hx_tmp;
HXDLIN(1511)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1511)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(1511)				_hx_tmp = false;
            			}
HXDLIN(1511)			if (_hx_tmp) {
HXLINE(1513)				this->resyncVocals();
            			}
HXLINE(1516)			if (!(this->startTimer->finished)) {
HXLINE(1517)				this->startTimer->active = true;
            			}
HXLINE(1518)			this->paused = false;
            		}
HXLINE(1521)		this->setBoyfriendInvuln(((Float)0.016666666666666666));
HXLINE(1523)		this->super::closeSubState();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1527_resyncVocals)
HXLINE(1528)		this->vocals->pause();
HXLINE(1530)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1531)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1532)		this->vocals->set_time(::Conductor_obj::songPosition);
HXLINE(1533)		this->vocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

Float PlayState_obj::truncateFloat(Float number,int precision){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1540_truncateFloat)
HXLINE(1541)		Float num = number;
HXLINE(1542)		num = (num * ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) )));
HXLINE(1543)		num = (( (Float)(::Math_obj::round(num)) ) / ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) )));
HXLINE(1544)		return num;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,truncateFloat,return )

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1549_update)
HXLINE(1548)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1567)		this->keyCheck();
HXLINE(1569)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1569)		if (_this->keyManager->checkStatus(57,_this->status)) {
HXLINE(1571)			if ((this->iconP1->animation->_curAnim->name == HX_("bf-old",5e,ba,eb,07))) {
HXLINE(1572)				this->iconP1->animation->play(( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            			}
            			else {
HXLINE(1574)				this->iconP1->animation->play(HX_("bf-old",5e,ba,eb,07),null(),null(),null());
            			}
            		}
HXLINE(1577)		if ((::PlayState_obj::curStage == HX_("philly",28,77,5e,ef))) {
HXLINE(1580)			if (this->trainMoving) {
HXLINE(1582)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1582)				_hx_tmp->trainFrameTiming = (_hx_tmp->trainFrameTiming + elapsed);
HXLINE(1584)				if ((this->trainFrameTiming >= ((Float)0.041666666666666664))) {
HXLINE(1586)					this->updateTrainPos();
HXLINE(1587)					this->trainFrameTiming = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(1593)		this->super::update(elapsed);
HXLINE(1595)		if ((::config::Config_obj::accuracy == HX_("none",b8,12,0a,49))) {
HXLINE(1597)			this->scoreTxt->set_text((HX_("Score:",c8,e8,ff,79) + this->songScore));
            		}
            		else {
HXLINE(1599)			 ::flixel::text::FlxText _hx_tmp = this->scoreTxt;
HXDLIN(1599)			::String _hx_tmp1 = ((((HX_("Score:",c8,e8,ff,79) + this->songScore) + HX_(" | Misses:",ac,fe,5e,5d)) + this->misses) + HX_(" | Accuracy:",fd,ee,6b,1b));
HXDLIN(1599)			_hx_tmp->set_text(((_hx_tmp1 + this->truncateFloat(this->accuracy,2)) + HX_("%",25,00,00,00)));
            		}
HXLINE(1602)		bool _hx_tmp;
HXDLIN(1602)		bool _hx_tmp1;
HXDLIN(1602)		if (::PlayerSettings_obj::player1->controls->_pause->check()) {
HXLINE(1602)			_hx_tmp1 = this->startedCountdown;
            		}
            		else {
HXLINE(1602)			_hx_tmp1 = false;
            		}
HXDLIN(1602)		if (_hx_tmp1) {
HXLINE(1602)			_hx_tmp = this->canPause;
            		}
            		else {
HXLINE(1602)			_hx_tmp = false;
            		}
HXDLIN(1602)		if (_hx_tmp) {
HXLINE(1604)			this->persistentUpdate = false;
HXLINE(1605)			this->persistentDraw = true;
HXLINE(1606)			this->paused = true;
HXLINE(1608)			::PlayerSettings_obj::menuControls();
HXLINE(1610)			Float _hx_tmp = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(1610)			this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,this->boyfriend->getScreenPosition(null(),null())->y));
            		}
HXLINE(1613)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1613)		if (_this1->keyManager->checkStatus(55,_this1->status)) {
HXLINE(1615)			::PlayerSettings_obj::menuControls();
HXLINE(1616)			{
HXLINE(1616)				 ::flixel::FlxState nextState =  ::ChartingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(1616)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1616)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(1617)			::PlayState_obj::sectionStart = false;
            		}
HXLINE(1622)		int iconOffset = 26;
HXLINE(1624)		 ::HealthIcon _hx_tmp2 = this->iconP1;
HXDLIN(1624)		Float _hx_tmp3 = this->healthBar->x;
HXDLIN(1624)		Float _hx_tmp4 = this->healthBar->get_width();
HXDLIN(1624)		_hx_tmp2->set_x((_hx_tmp3 + ((_hx_tmp4 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE(1625)		 ::HealthIcon _hx_tmp5 = this->iconP2;
HXDLIN(1625)		Float _hx_tmp6 = this->healthBar->x;
HXDLIN(1625)		Float _hx_tmp7 = this->healthBar->get_width();
HXDLIN(1625)		Float _hx_tmp8 = (_hx_tmp6 + (_hx_tmp7 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN(1625)		_hx_tmp5->set_x((_hx_tmp8 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE(1627)		if ((this->health > 2)) {
HXLINE(1628)			this->health = ( (Float)(2) );
            		}
HXLINE(1631)		if ((this->healthBar->get_percent() < 20)) {
HXLINE(1632)			this->iconP1->animation->_curAnim->set_curFrame(1);
HXLINE(1633)			this->iconP2->animation->_curAnim->set_curFrame(2);
            		}
            		else {
HXLINE(1635)			if ((this->healthBar->get_percent() > 80)) {
HXLINE(1636)				this->iconP1->animation->_curAnim->set_curFrame(2);
HXLINE(1637)				this->iconP2->animation->_curAnim->set_curFrame(1);
            			}
            			else {
HXLINE(1640)				this->iconP1->animation->_curAnim->set_curFrame(0);
HXLINE(1641)				this->iconP2->animation->_curAnim->set_curFrame(0);
            			}
            		}
HXLINE(1647)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1647)		if (_this2->keyManager->checkStatus(56,_this2->status)) {
HXLINE(1649)			::PlayerSettings_obj::menuControls();
HXLINE(1650)			::PlayState_obj::sectionStart = false;
HXLINE(1654)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1654)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(1655)				 ::flixel::FlxState nextState =  ::AnimationDebug_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXDLIN(1655)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1655)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			else {
HXLINE(1657)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1657)				if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(1658)					 ::flixel::FlxState nextState =  ::AnimationDebug_obj::__alloc( HX_CTX ,this->gf->curCharacter);
HXDLIN(1658)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1658)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE(1661)					 ::flixel::FlxState nextState =  ::AnimationDebug_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXDLIN(1661)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1661)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            		}
HXLINE(1666)		if (this->startingSong) {
HXLINE(1668)			if (this->startedCountdown) {
HXLINE(1670)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1670)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(1671)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(1672)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(1678)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1678)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(1680)			if (!(this->paused)) {
HXLINE(1682)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1682)				_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(1683)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1686)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(1688)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(1689)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
            			}
            		}
HXLINE(1698)		bool _hx_tmp9;
HXDLIN(1698)		if (this->generatedMusic) {
HXLINE(1698)			_hx_tmp9 = ::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) );
            		}
            		else {
HXLINE(1698)			_hx_tmp9 = false;
            		}
HXDLIN(1698)		if (_hx_tmp9) {
HXLINE(1700)			bool _hx_tmp = (::hx::Mod(this->curBeat,4) == 0);
HXLINE(1705)			bool _hx_tmp1;
HXDLIN(1705)			bool _hx_tmp2;
HXDLIN(1705)			if ((this->camFocus != HX_("dad",47,36,4c,00))) {
HXLINE(1705)				_hx_tmp2 = !(( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(1705)				_hx_tmp2 = false;
            			}
HXDLIN(1705)			if (_hx_tmp2) {
HXLINE(1705)				_hx_tmp1 = this->autoCam;
            			}
            			else {
HXLINE(1705)				_hx_tmp1 = false;
            			}
HXDLIN(1705)			if (_hx_tmp1) {
HXLINE(1707)				this->camFocusOpponent();
            			}
HXLINE(1710)			bool _hx_tmp3;
HXDLIN(1710)			bool _hx_tmp4;
HXDLIN(1710)			if ((this->camFocus != HX_("bf",c4,55,00,00))) {
HXLINE(1710)				_hx_tmp4 = ( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(1710)				_hx_tmp4 = false;
            			}
HXDLIN(1710)			if (_hx_tmp4) {
HXLINE(1710)				_hx_tmp3 = this->autoCam;
            			}
            			else {
HXLINE(1710)				_hx_tmp3 = false;
            			}
HXDLIN(1710)			if (_hx_tmp3) {
HXLINE(1712)				this->camFocusBF();
            			}
            		}
HXLINE(1718)		if ((this->curSong == HX_("Fresh",4e,f6,b3,99))) {
HXLINE(1720)			switch((int)(this->totalBeats)){
            				case (int)16: {
HXLINE(1723)					this->camZooming = true;
HXLINE(1724)					this->bopSpeed = 2;
HXLINE(1725)					this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_86,2);
HXLINE(1726)					this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_87,2);
            				}
            				break;
            				case (int)48: {
HXLINE(1728)					this->bopSpeed = 1;
HXLINE(1729)					this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_88,4);
HXLINE(1730)					this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_89,4);
            				}
            				break;
            				case (int)80: {
HXLINE(1732)					this->bopSpeed = 2;
HXLINE(1733)					this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_90,2);
HXLINE(1734)					this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_91,2);
            				}
            				break;
            				case (int)112: {
HXLINE(1736)					this->bopSpeed = 1;
HXLINE(1737)					this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_92,4);
HXLINE(1738)					this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_93,4);
            				}
            				break;
            				case (int)163: {
            				}
            				break;
            			}
            		}
HXLINE(1744)		bool _hx_tmp10;
HXDLIN(1744)		if (::PlayerSettings_obj::player1->controls->_reset->check()) {
HXLINE(1744)			_hx_tmp10 = !(this->startingSong);
            		}
            		else {
HXLINE(1744)			_hx_tmp10 = false;
            		}
HXDLIN(1744)		if (_hx_tmp10) {
HXLINE(1746)			this->health = ( (Float)(0) );
            		}
HXLINE(1751)		if (::PlayerSettings_obj::player1->controls->_cheat->check()) {
HXLINE(1753)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1753)			_hx_tmp->health = (_hx_tmp->health + 1);
            		}
HXLINE(1757)		if ((this->health <= 0)) {
HXLINE(1761)			this->persistentUpdate = false;
HXLINE(1762)			this->persistentDraw = false;
HXLINE(1763)			this->paused = true;
HXLINE(1765)			{
HXLINE(1765)				 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(1765)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(1766)			{
HXLINE(1766)				 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1766)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE(1768)			::PlayerSettings_obj::menuControls();
HXLINE(1772)			Float _hx_tmp = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(1772)			Float _hx_tmp1 = this->boyfriend->getScreenPosition(null(),null())->y;
HXDLIN(1772)			Float _hx_tmp2 = this->camFollow->getScreenPosition(null(),null())->x;
HXDLIN(1772)			this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->camFollow->getScreenPosition(null(),null())->y));
HXLINE(1773)			::PlayState_obj::sectionStart = false;
            		}
HXLINE(1777)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(1779)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < 1500)) {
HXLINE(1781)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(1782)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE(1784)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(1785)				this->unspawnNotes->removeRange(index,1);
            			}
            		}
HXLINE(1789)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1792_update)
HXLINE(1804)				bool _hx_tmp;
HXDLIN(1804)				if (!(daNote->mustPress)) {
HXLINE(1804)					_hx_tmp = daNote->wasGoodHit;
            				}
            				else {
HXLINE(1804)					_hx_tmp = false;
            				}
HXDLIN(1804)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Note,daNote) HXARGC(1)
            					void _hx_run( ::flixel::FlxSprite spr){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1833_update)
HXLINE(1833)						if ((::Math_obj::abs(( (Float)(daNote->noteData) )) == spr->ID)) {
HXLINE(1835)							spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
HXLINE(1836)							bool _hx_tmp;
HXDLIN(1836)							if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(1836)								_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            							}
            							else {
HXLINE(1836)								_hx_tmp = false;
            							}
HXDLIN(1836)							if (_hx_tmp) {
HXLINE(1838)								spr->centerOffsets(null());
HXLINE(1839)								{
HXLINE(1839)									 ::flixel::math::FlxPoint _g = spr->offset;
HXDLIN(1839)									_g->set_x((_g->x - ( (Float)(14) )));
            								}
HXLINE(1840)								{
HXLINE(1840)									 ::flixel::math::FlxPoint _g1 = spr->offset;
HXDLIN(1840)									_g1->set_y((_g1->y - ( (Float)(14) )));
            								}
            							}
            							else {
HXLINE(1843)								spr->centerOffsets(null());
            							}
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1807)					::String altAnim = HX_("",00,00,00,00);
HXLINE(1809)					if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(1811)						if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) ))))->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) )) {
HXLINE(1812)							altAnim = HX_("-alt",1c,93,08,1e);
            						}
            					}
HXLINE(1817)					if (_gthis->dad->canAutoAnim) {
HXLINE(1818)						Float _hx_switch_0 = ::Math_obj::abs(( (Float)(daNote->noteData) ));
            						if (  (_hx_switch_0==( (Float)(0) )) ){
HXLINE(1827)							_gthis->dad->playAnim((HX_("singLEFT",d6,39,ef,3b) + altAnim),true,null(),null());
HXDLIN(1827)							goto _hx_goto_84;
            						}
            						if (  (_hx_switch_0==( (Float)(1) )) ){
HXLINE(1825)							_gthis->dad->playAnim((HX_("singDOWN",31,2a,ad,36) + altAnim),true,null(),null());
HXDLIN(1825)							goto _hx_goto_84;
            						}
            						if (  (_hx_switch_0==( (Float)(2) )) ){
HXLINE(1821)							_gthis->dad->playAnim((HX_("singUP",6a,52,21,b9) + altAnim),true,null(),null());
HXDLIN(1821)							goto _hx_goto_84;
            						}
            						if (  (_hx_switch_0==( (Float)(3) )) ){
HXLINE(1823)							_gthis->dad->playAnim((HX_("singRIGHT",0d,6f,70,ac) + altAnim),true,null(),null());
HXDLIN(1823)							goto _hx_goto_84;
            						}
            						_hx_goto_84:;
            					}
HXLINE(1831)					_gthis->enemyStrums->forEach( ::Dynamic(new _hx_Closure_0(daNote)),null());
HXLINE(1847)					_gthis->dad->holdTimer = ( (Float)(0) );
HXLINE(1849)					if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1850)						_gthis->vocals->set_volume(( (Float)(1) ));
            					}
HXLINE(1852)					if (!(daNote->isSustainNote)) {
HXLINE(1853)						daNote->destroy();
            					}
            				}
HXLINE(1857)				if (::config::Config_obj::downscroll) {
HXLINE(1858)					 ::Note daNote1 = daNote;
HXDLIN(1858)					Float _gthis1 = _gthis->strumLine->y;
HXDLIN(1858)					Float _hx_tmp = (::Conductor_obj::songPosition - daNote->strumTime);
HXDLIN(1858)					daNote1->set_y((_gthis1 + (_hx_tmp * (((Float)0.45) * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2)))));
HXLINE(1860)					if (daNote->isSustainNote) {
HXLINE(1862)						{
HXLINE(1862)							 ::Note _g = daNote;
HXDLIN(1862)							Float _g1 = _g->y;
HXDLIN(1862)							_g->set_y((_g1 - daNote->get_height()));
            						}
HXLINE(1863)						{
HXLINE(1863)							 ::Note _g2 = daNote;
HXDLIN(1863)							_g2->set_y((_g2->y + 125));
            						}
HXLINE(1865)						bool _hx_tmp;
HXDLIN(1865)						bool _hx_tmp1;
HXDLIN(1865)						bool _hx_tmp2;
HXDLIN(1865)						if (daNote->mustPress) {
HXLINE(1865)							_hx_tmp2 = daNote->wasGoodHit;
            						}
            						else {
HXLINE(1865)							_hx_tmp2 = true;
            						}
HXDLIN(1865)						if (!(_hx_tmp2)) {
HXLINE(1865)							if (daNote->prevNote->wasGoodHit) {
HXLINE(1865)								_hx_tmp1 = !(daNote->canBeHit);
            							}
            							else {
HXLINE(1865)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE(1865)							_hx_tmp1 = true;
            						}
HXDLIN(1865)						if (_hx_tmp1) {
HXLINE(1866)							Float _hx_tmp1 = (daNote->y - (daNote->offset->y * daNote->scale->y));
HXDLIN(1866)							Float _hx_tmp2 = (_hx_tmp1 + daNote->get_height());
HXLINE(1865)							_hx_tmp = (_hx_tmp2 >= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            						}
            						else {
HXLINE(1865)							_hx_tmp = false;
            						}
HXDLIN(1865)						if (_hx_tmp) {
HXLINE(1869)							 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(1870)							swagRect->height = (((Dynamic( _gthis->strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(1873)							swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(1875)							daNote->set_clipRect(swagRect);
            						}
            					}
            				}
            				else {
HXLINE(1881)					 ::Note daNote1 = daNote;
HXDLIN(1881)					Float _gthis1 = _gthis->strumLine->y;
HXDLIN(1881)					Float _hx_tmp = (::Conductor_obj::songPosition - daNote->strumTime);
HXDLIN(1881)					daNote1->set_y((_gthis1 - (_hx_tmp * (((Float)0.45) * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2)))));
HXLINE(1883)					if (daNote->isSustainNote) {
HXLINE(1885)						bool _hx_tmp;
HXDLIN(1885)						bool _hx_tmp1;
HXDLIN(1885)						bool _hx_tmp2;
HXDLIN(1885)						if (daNote->mustPress) {
HXLINE(1885)							_hx_tmp2 = daNote->wasGoodHit;
            						}
            						else {
HXLINE(1885)							_hx_tmp2 = true;
            						}
HXDLIN(1885)						if (!(_hx_tmp2)) {
HXLINE(1885)							if (daNote->prevNote->wasGoodHit) {
HXLINE(1885)								_hx_tmp1 = !(daNote->canBeHit);
            							}
            							else {
HXLINE(1885)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE(1885)							_hx_tmp1 = true;
            						}
HXDLIN(1885)						if (_hx_tmp1) {
HXLINE(1885)							_hx_tmp = ((daNote->y + (daNote->offset->y * daNote->scale->y)) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            						}
            						else {
HXLINE(1885)							_hx_tmp = false;
            						}
HXDLIN(1885)						if (_hx_tmp) {
HXLINE(1889)							Float swagRect = daNote->get_width();
HXDLIN(1889)							Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(1889)							Float swagRect2 = daNote->get_height();
HXDLIN(1889)							 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(1890)							swagRect3->y = (((Dynamic( _gthis->strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(1893)							 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(1893)							swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(1895)							daNote->set_clipRect(swagRect3);
            						}
            					}
            				}
HXLINE(1903)				if (daNote->tooLate) {
HXLINE(1905)					if ((daNote->alpha > ((Float)0.3))) {
HXLINE(1907)						_gthis->noteMiss(daNote->noteData,((Float)0.055),false,true);
HXLINE(1908)						_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(1909)						daNote->set_alpha(((Float)0.3));
            					}
            				}
HXLINE(1915)				bool _hx_tmp1;
HXDLIN(1915)				if (::config::Config_obj::downscroll) {
HXLINE(1915)					Float daNote1 = daNote->y;
HXDLIN(1915)					Float _gthis1 = _gthis->strumLine->y;
HXDLIN(1915)					_hx_tmp1 = (daNote1 > ((_gthis1 + daNote->get_height()) + 50));
            				}
            				else {
HXLINE(1915)					Float daNote1 = daNote->y;
HXDLIN(1915)					Float _gthis1 = _gthis->strumLine->y;
HXDLIN(1915)					_hx_tmp1 = (daNote1 < ((_gthis1 - daNote->get_height()) - ( (Float)(50) )));
            				}
HXDLIN(1915)				if (_hx_tmp1) {
HXLINE(1918)					bool _hx_tmp;
HXDLIN(1918)					if (!(daNote->tooLate)) {
HXLINE(1918)						_hx_tmp = daNote->wasGoodHit;
            					}
            					else {
HXLINE(1918)						_hx_tmp = true;
            					}
HXDLIN(1918)					if (_hx_tmp) {
HXLINE(1920)						daNote->set_active(false);
HXLINE(1921)						daNote->set_visible(false);
HXLINE(1923)						daNote->destroy();
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1791)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            		}
HXLINE(1930)		if (!(this->inCutscene)) {
HXLINE(1931)			this->keyShit();
            		}
HXLINE(1939)		this->leftPress = false;
HXLINE(1940)		this->leftRelease = false;
HXLINE(1941)		this->downPress = false;
HXLINE(1942)		this->downRelease = false;
HXLINE(1943)		this->upPress = false;
HXLINE(1944)		this->upRelease = false;
HXLINE(1945)		this->rightPress = false;
HXLINE(1946)		this->rightRelease = false;
            	}


void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1951_endSong)
HXLINE(1952)		this->canPause = false;
HXLINE(1953)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(1954)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(1955)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(1958)			::Highscore_obj::saveScore(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),this->songScore,::PlayState_obj::storyDifficulty);
            		}
HXLINE(1962)		if (::PlayState_obj::isStoryMode) {
HXLINE(1964)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(1964)			::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + this->songScore);
HXLINE(1966)			::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(1968)			if ((::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(1970)				::flixel::FlxG_obj::sound->playMusic((((HX_("assets/music/",36,ab,d2,e0) + HX_("klaskiiLoop",9c,b4,18,a0)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.75),null(),null());
HXLINE(1972)				::PlayerSettings_obj::menuControls();
HXLINE(1976)				{
HXLINE(1976)					 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(1976)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1976)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE(1977)				::PlayState_obj::sectionStart = false;
HXLINE(1980)				::StoryMenuState_obj::weekUnlocked[::Std_obj::_hx_int(::Math_obj::min(( (Float)((::PlayState_obj::storyWeek + 1)) ),( (Float)((::StoryMenuState_obj::weekUnlocked->length - 1)) )))] = true;
HXLINE(1982)				if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(1984)					::Highscore_obj::saveWeekScore(::PlayState_obj::storyWeek,::PlayState_obj::campaignScore,::PlayState_obj::storyDifficulty);
            				}
HXLINE(1987)				::flixel::FlxG_obj::save->data->__SetField(HX_("weekUnlocked",37,64,c4,a5),::StoryMenuState_obj::weekUnlocked,::hx::paccDynamic);
HXLINE(1988)				::flixel::FlxG_obj::save->flush(null(),null());
            			}
            			else {
HXLINE(1992)				::String difficulty = HX_("",00,00,00,00);
HXLINE(1994)				if ((::PlayState_obj::storyDifficulty == 0)) {
HXLINE(1995)					difficulty = HX_("",00,00,00,00);
            				}
HXLINE(1997)				if ((::PlayState_obj::storyDifficulty == 1)) {
HXLINE(1998)					difficulty = HX_("-hard",98,49,10,2e);
            				}
HXLINE(2000)				if ((::PlayState_obj::storyDifficulty == 2)) {
HXLINE(2001)					difficulty = HX_("-hell",6a,4d,13,2e);
            				}
HXLINE(2006)				if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
HXLINE(2008)					 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(2008)					 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(2010)					blackShit1->scrollFactor->set(null(),null());
HXLINE(2011)					this->add(blackShit1);
HXLINE(2012)					this->camHUD->set_visible(false);
HXLINE(2014)					::flixel::FlxG_obj::sound->play((((HX_("assets/sounds/",1f,fa,fb,94) + HX_("Lights_Shut_off",86,a9,43,29)) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
            				}
HXLINE(2017)				if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("senpai",3c,df,8d,6b))) {
HXLINE(2019)					this->transIn = null();
HXLINE(2020)					this->transOut = null();
HXLINE(2021)					::PlayState_obj::prevCamFollow = this->camFollow;
            				}
HXLINE(2024)				::String _hx_tmp = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(2024)				::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp,::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2025)				{
HXLINE(2025)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2025)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2027)				{
HXLINE(2027)					 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2027)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2027)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE(2029)				this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(2030)				this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
            			}
            		}
            		else {
HXLINE(2035)			::PlayerSettings_obj::menuControls();
HXLINE(2036)			::PlayState_obj::sectionStart = false;
HXLINE(2040)			{
HXLINE(2040)				 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2040)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2040)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

void PlayState_obj::popUpScore(Float strumtime){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2047_popUpScore)
HXLINE(2048)		Float noteDiff = ::Math_obj::abs((strumtime - ::Conductor_obj::songPosition));
HXLINE(2050)		int score = 350;
HXLINE(2052)		::String daRating = HX_("sick",be,8c,53,4c);
HXLINE(2054)		if ((noteDiff > (::Conductor_obj::safeZoneOffset * ::Conductor_obj::shitZone))) {
HXLINE(2056)			daRating = HX_("shit",c0,cf,52,4c);
HXLINE(2057)			if ((::config::Config_obj::accuracy == HX_("complex",30,66,71,83))) {
HXLINE(2058)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2058)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + (( (Float)(1) ) - ::Conductor_obj::shitZone));
            			}
            			else {
HXLINE(2061)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2061)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(2063)			score = 50;
            		}
            		else {
HXLINE(2065)			if ((noteDiff > (::Conductor_obj::safeZoneOffset * ::Conductor_obj::badZone))) {
HXLINE(2067)				daRating = HX_("bad",c5,b1,4a,00);
HXLINE(2068)				score = 100;
HXLINE(2069)				if ((::config::Config_obj::accuracy == HX_("complex",30,66,71,83))) {
HXLINE(2070)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2070)					_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + (( (Float)(1) ) - ::Conductor_obj::badZone));
            				}
            				else {
HXLINE(2073)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2073)					_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            				}
            			}
            			else {
HXLINE(2076)				if ((noteDiff > (::Conductor_obj::safeZoneOffset * ::Conductor_obj::goodZone))) {
HXLINE(2078)					daRating = HX_("good",3d,95,69,44);
HXLINE(2079)					if ((::config::Config_obj::accuracy == HX_("complex",30,66,71,83))) {
HXLINE(2080)						 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2080)						_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + (( (Float)(1) ) - ::Conductor_obj::goodZone));
            					}
            					else {
HXLINE(2083)						 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2083)						_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            					}
HXLINE(2085)					score = 200;
            				}
            			}
            		}
HXLINE(2087)		if ((daRating == HX_("sick",be,8c,53,4c))) {
HXLINE(2088)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2088)			_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            		}
HXLINE(2092)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2092)		_hx_tmp->songScore = (_hx_tmp->songScore + score);
HXLINE(2094)		this->comboUI->ratingPopup(daRating);
HXLINE(2096)		if ((this->combo >= ::PlayState_obj::minCombo)) {
HXLINE(2097)			this->comboUI->comboPopup(this->combo);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

void PlayState_obj::keyDown( ::openfl::events::KeyboardEvent evt){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2101_keyDown)
HXLINE(2103)		if (this->skipListener) {
HXLINE(2103)			return;
            		}
HXLINE(2106)		::Dynamic this1 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap;
HXDLIN(2106)		int key = evt->keyCode;
HXDLIN(2106)		int key1;
HXDLIN(2106)		switch((int)(key)){
            			case (int)8: {
HXLINE(2106)				key1 = 8;
            			}
            			break;
            			case (int)9: {
HXLINE(2106)				key1 = 9;
            			}
            			break;
            			case (int)13: {
HXLINE(2106)				key1 = 13;
            			}
            			break;
            			case (int)27: {
HXLINE(2106)				key1 = 27;
            			}
            			break;
            			case (int)32: {
HXLINE(2106)				key1 = 32;
            			}
            			break;
            			case (int)33: {
HXLINE(2106)				key1 = 49;
            			}
            			break;
            			case (int)34: {
HXLINE(2106)				key1 = 222;
            			}
            			break;
            			case (int)35: {
HXLINE(2106)				key1 = 51;
            			}
            			break;
            			case (int)36: {
HXLINE(2106)				key1 = 52;
            			}
            			break;
            			case (int)37: {
HXLINE(2106)				key1 = 53;
            			}
            			break;
            			case (int)38: {
HXLINE(2106)				key1 = 55;
            			}
            			break;
            			case (int)39: {
HXLINE(2106)				key1 = 222;
            			}
            			break;
            			case (int)40: {
HXLINE(2106)				key1 = 57;
            			}
            			break;
            			case (int)41: {
HXLINE(2106)				key1 = 48;
            			}
            			break;
            			case (int)42: {
HXLINE(2106)				key1 = 56;
            			}
            			break;
            			case (int)44: {
HXLINE(2106)				key1 = 188;
            			}
            			break;
            			case (int)45: {
HXLINE(2106)				key1 = 189;
            			}
            			break;
            			case (int)46: {
HXLINE(2106)				key1 = 190;
            			}
            			break;
            			case (int)47: {
HXLINE(2106)				key1 = 191;
            			}
            			break;
            			case (int)48: {
HXLINE(2106)				key1 = 48;
            			}
            			break;
            			case (int)49: {
HXLINE(2106)				key1 = 49;
            			}
            			break;
            			case (int)50: {
HXLINE(2106)				key1 = 50;
            			}
            			break;
            			case (int)51: {
HXLINE(2106)				key1 = 51;
            			}
            			break;
            			case (int)52: {
HXLINE(2106)				key1 = 52;
            			}
            			break;
            			case (int)53: {
HXLINE(2106)				key1 = 53;
            			}
            			break;
            			case (int)54: {
HXLINE(2106)				key1 = 54;
            			}
            			break;
            			case (int)55: {
HXLINE(2106)				key1 = 55;
            			}
            			break;
            			case (int)56: {
HXLINE(2106)				key1 = 56;
            			}
            			break;
            			case (int)57: {
HXLINE(2106)				key1 = 57;
            			}
            			break;
            			case (int)58: {
HXLINE(2106)				key1 = 186;
            			}
            			break;
            			case (int)59: {
HXLINE(2106)				key1 = 186;
            			}
            			break;
            			case (int)60: {
HXLINE(2106)				key1 = 60;
            			}
            			break;
            			case (int)61: {
HXLINE(2106)				key1 = 187;
            			}
            			break;
            			case (int)62: {
HXLINE(2106)				key1 = 190;
            			}
            			break;
            			case (int)63: {
HXLINE(2106)				key1 = 191;
            			}
            			break;
            			case (int)64: {
HXLINE(2106)				key1 = 50;
            			}
            			break;
            			case (int)91: {
HXLINE(2106)				key1 = 219;
            			}
            			break;
            			case (int)92: {
HXLINE(2106)				key1 = 220;
            			}
            			break;
            			case (int)93: {
HXLINE(2106)				key1 = 221;
            			}
            			break;
            			case (int)94: {
HXLINE(2106)				key1 = 54;
            			}
            			break;
            			case (int)95: {
HXLINE(2106)				key1 = 189;
            			}
            			break;
            			case (int)96: {
HXLINE(2106)				key1 = 192;
            			}
            			break;
            			case (int)97: {
HXLINE(2106)				key1 = 65;
            			}
            			break;
            			case (int)98: {
HXLINE(2106)				key1 = 66;
            			}
            			break;
            			case (int)99: {
HXLINE(2106)				key1 = 67;
            			}
            			break;
            			case (int)100: {
HXLINE(2106)				key1 = 68;
            			}
            			break;
            			case (int)101: {
HXLINE(2106)				key1 = 69;
            			}
            			break;
            			case (int)102: {
HXLINE(2106)				key1 = 70;
            			}
            			break;
            			case (int)103: {
HXLINE(2106)				key1 = 71;
            			}
            			break;
            			case (int)104: {
HXLINE(2106)				key1 = 72;
            			}
            			break;
            			case (int)105: {
HXLINE(2106)				key1 = 73;
            			}
            			break;
            			case (int)106: {
HXLINE(2106)				key1 = 74;
            			}
            			break;
            			case (int)107: {
HXLINE(2106)				key1 = 75;
            			}
            			break;
            			case (int)108: {
HXLINE(2106)				key1 = 76;
            			}
            			break;
            			case (int)109: {
HXLINE(2106)				key1 = 77;
            			}
            			break;
            			case (int)110: {
HXLINE(2106)				key1 = 78;
            			}
            			break;
            			case (int)111: {
HXLINE(2106)				key1 = 79;
            			}
            			break;
            			case (int)112: {
HXLINE(2106)				key1 = 80;
            			}
            			break;
            			case (int)113: {
HXLINE(2106)				key1 = 81;
            			}
            			break;
            			case (int)114: {
HXLINE(2106)				key1 = 82;
            			}
            			break;
            			case (int)115: {
HXLINE(2106)				key1 = 83;
            			}
            			break;
            			case (int)116: {
HXLINE(2106)				key1 = 84;
            			}
            			break;
            			case (int)117: {
HXLINE(2106)				key1 = 85;
            			}
            			break;
            			case (int)118: {
HXLINE(2106)				key1 = 86;
            			}
            			break;
            			case (int)119: {
HXLINE(2106)				key1 = 87;
            			}
            			break;
            			case (int)120: {
HXLINE(2106)				key1 = 88;
            			}
            			break;
            			case (int)121: {
HXLINE(2106)				key1 = 89;
            			}
            			break;
            			case (int)122: {
HXLINE(2106)				key1 = 90;
            			}
            			break;
            			case (int)127: {
HXLINE(2106)				key1 = 46;
            			}
            			break;
            			case (int)1073741881: {
HXLINE(2106)				key1 = 20;
            			}
            			break;
            			case (int)1073741882: {
HXLINE(2106)				key1 = 112;
            			}
            			break;
            			case (int)1073741883: {
HXLINE(2106)				key1 = 113;
            			}
            			break;
            			case (int)1073741884: {
HXLINE(2106)				key1 = 114;
            			}
            			break;
            			case (int)1073741885: {
HXLINE(2106)				key1 = 115;
            			}
            			break;
            			case (int)1073741886: {
HXLINE(2106)				key1 = 116;
            			}
            			break;
            			case (int)1073741887: {
HXLINE(2106)				key1 = 117;
            			}
            			break;
            			case (int)1073741888: {
HXLINE(2106)				key1 = 118;
            			}
            			break;
            			case (int)1073741889: {
HXLINE(2106)				key1 = 119;
            			}
            			break;
            			case (int)1073741890: {
HXLINE(2106)				key1 = 120;
            			}
            			break;
            			case (int)1073741891: {
HXLINE(2106)				key1 = 121;
            			}
            			break;
            			case (int)1073741892: {
HXLINE(2106)				key1 = 122;
            			}
            			break;
            			case (int)1073741893: {
HXLINE(2106)				key1 = 123;
            			}
            			break;
            			case (int)1073741894: {
HXLINE(2106)				key1 = 301;
            			}
            			break;
            			case (int)1073741895: {
HXLINE(2106)				key1 = 145;
            			}
            			break;
            			case (int)1073741896: {
HXLINE(2106)				key1 = 19;
            			}
            			break;
            			case (int)1073741897: {
HXLINE(2106)				key1 = 45;
            			}
            			break;
            			case (int)1073741898: {
HXLINE(2106)				key1 = 36;
            			}
            			break;
            			case (int)1073741899: {
HXLINE(2106)				key1 = 33;
            			}
            			break;
            			case (int)1073741901: {
HXLINE(2106)				key1 = 35;
            			}
            			break;
            			case (int)1073741902: {
HXLINE(2106)				key1 = 34;
            			}
            			break;
            			case (int)1073741903: {
HXLINE(2106)				key1 = 39;
            			}
            			break;
            			case (int)1073741904: {
HXLINE(2106)				key1 = 37;
            			}
            			break;
            			case (int)1073741905: {
HXLINE(2106)				key1 = 40;
            			}
            			break;
            			case (int)1073741906: {
HXLINE(2106)				key1 = 38;
            			}
            			break;
            			case (int)1073741907: {
HXLINE(2106)				key1 = 144;
            			}
            			break;
            			case (int)1073741908: {
HXLINE(2106)				key1 = 111;
            			}
            			break;
            			case (int)1073741909: {
HXLINE(2106)				key1 = 106;
            			}
            			break;
            			case (int)1073741910: {
HXLINE(2106)				key1 = 109;
            			}
            			break;
            			case (int)1073741911: {
HXLINE(2106)				key1 = 107;
            			}
            			break;
            			case (int)1073741912: {
HXLINE(2106)				key1 = 13;
            			}
            			break;
            			case (int)1073741913: {
HXLINE(2106)				key1 = 97;
            			}
            			break;
            			case (int)1073741914: {
HXLINE(2106)				key1 = 98;
            			}
            			break;
            			case (int)1073741915: {
HXLINE(2106)				key1 = 99;
            			}
            			break;
            			case (int)1073741916: {
HXLINE(2106)				key1 = 100;
            			}
            			break;
            			case (int)1073741917: {
HXLINE(2106)				key1 = 101;
            			}
            			break;
            			case (int)1073741918: {
HXLINE(2106)				key1 = 102;
            			}
            			break;
            			case (int)1073741919: {
HXLINE(2106)				key1 = 103;
            			}
            			break;
            			case (int)1073741920: {
HXLINE(2106)				key1 = 104;
            			}
            			break;
            			case (int)1073741921: {
HXLINE(2106)				key1 = 105;
            			}
            			break;
            			case (int)1073741922: {
HXLINE(2106)				key1 = 96;
            			}
            			break;
            			case (int)1073741923: {
HXLINE(2106)				key1 = 110;
            			}
            			break;
            			case (int)1073741925: {
HXLINE(2106)				key1 = 302;
            			}
            			break;
            			case (int)1073741928: {
HXLINE(2106)				key1 = 124;
            			}
            			break;
            			case (int)1073741929: {
HXLINE(2106)				key1 = 125;
            			}
            			break;
            			case (int)1073741930: {
HXLINE(2106)				key1 = 126;
            			}
            			break;
            			case (int)1073741982: {
HXLINE(2106)				key1 = 13;
            			}
            			break;
            			case (int)1073742044: {
HXLINE(2106)				key1 = 110;
            			}
            			break;
            			case (int)1073742048: {
HXLINE(2106)				key1 = 17;
            			}
            			break;
            			case (int)1073742049: {
HXLINE(2106)				key1 = 16;
            			}
            			break;
            			case (int)1073742050: {
HXLINE(2106)				key1 = 18;
            			}
            			break;
            			case (int)1073742051: {
HXLINE(2106)				key1 = 15;
            			}
            			break;
            			case (int)1073742052: {
HXLINE(2106)				key1 = 17;
            			}
            			break;
            			case (int)1073742053: {
HXLINE(2106)				key1 = 16;
            			}
            			break;
            			case (int)1073742054: {
HXLINE(2106)				key1 = 18;
            			}
            			break;
            			case (int)1073742055: {
HXLINE(2106)				key1 = 15;
            			}
            			break;
            			default:{
HXLINE(2106)				key1 = key;
            			}
            		}
HXDLIN(2106)		::String key2 = ( ( ::haxe::ds::IntMap)(this1) )->get_string(key1);
HXLINE(2108)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(2110)		int data = -1;
HXLINE(2112)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(2115)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(2119)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(2121)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(2117)				data = 1;
            			}
            			break;
            		}
HXLINE(2124)		{
HXLINE(2124)			int _g = 0;
HXDLIN(2124)			int _g1 = binds->length;
HXDLIN(2124)			while((_g < _g1)){
HXLINE(2124)				_g = (_g + 1);
HXDLIN(2124)				int i = (_g - 1);
HXLINE(2126)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(2126)				if ((_hx_tmp == key2.toLowerCase())) {
HXLINE(2127)					data = i;
            				}
            			}
            		}
HXLINE(2130)		if ((data == -1)) {
HXLINE(2131)			return;
            		}
HXLINE(2133)		switch((int)(data)){
            			case (int)0: {
HXLINE(2136)				if (this->leftHold) {
HXLINE(2136)					return;
            				}
HXLINE(2137)				this->leftPress = true;
HXLINE(2138)				this->leftHold = true;
            			}
            			break;
            			case (int)1: {
HXLINE(2140)				if (this->downHold) {
HXLINE(2140)					return;
            				}
HXLINE(2141)				this->downPress = true;
HXLINE(2142)				this->downHold = true;
            			}
            			break;
            			case (int)2: {
HXLINE(2144)				if (this->upHold) {
HXLINE(2144)					return;
            				}
HXLINE(2145)				this->upPress = true;
HXLINE(2146)				this->upHold = true;
            			}
            			break;
            			case (int)3: {
HXLINE(2148)				if (this->rightHold) {
HXLINE(2148)					return;
            				}
HXLINE(2149)				this->rightPress = true;
HXLINE(2150)				this->rightHold = true;
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,keyDown,(void))

void PlayState_obj::keyUp( ::openfl::events::KeyboardEvent evt){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2156_keyUp)
HXLINE(2158)		if (this->skipListener) {
HXLINE(2158)			return;
            		}
HXLINE(2161)		::Dynamic this1 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap;
HXDLIN(2161)		int key = evt->keyCode;
HXDLIN(2161)		int key1;
HXDLIN(2161)		switch((int)(key)){
            			case (int)8: {
HXLINE(2161)				key1 = 8;
            			}
            			break;
            			case (int)9: {
HXLINE(2161)				key1 = 9;
            			}
            			break;
            			case (int)13: {
HXLINE(2161)				key1 = 13;
            			}
            			break;
            			case (int)27: {
HXLINE(2161)				key1 = 27;
            			}
            			break;
            			case (int)32: {
HXLINE(2161)				key1 = 32;
            			}
            			break;
            			case (int)33: {
HXLINE(2161)				key1 = 49;
            			}
            			break;
            			case (int)34: {
HXLINE(2161)				key1 = 222;
            			}
            			break;
            			case (int)35: {
HXLINE(2161)				key1 = 51;
            			}
            			break;
            			case (int)36: {
HXLINE(2161)				key1 = 52;
            			}
            			break;
            			case (int)37: {
HXLINE(2161)				key1 = 53;
            			}
            			break;
            			case (int)38: {
HXLINE(2161)				key1 = 55;
            			}
            			break;
            			case (int)39: {
HXLINE(2161)				key1 = 222;
            			}
            			break;
            			case (int)40: {
HXLINE(2161)				key1 = 57;
            			}
            			break;
            			case (int)41: {
HXLINE(2161)				key1 = 48;
            			}
            			break;
            			case (int)42: {
HXLINE(2161)				key1 = 56;
            			}
            			break;
            			case (int)44: {
HXLINE(2161)				key1 = 188;
            			}
            			break;
            			case (int)45: {
HXLINE(2161)				key1 = 189;
            			}
            			break;
            			case (int)46: {
HXLINE(2161)				key1 = 190;
            			}
            			break;
            			case (int)47: {
HXLINE(2161)				key1 = 191;
            			}
            			break;
            			case (int)48: {
HXLINE(2161)				key1 = 48;
            			}
            			break;
            			case (int)49: {
HXLINE(2161)				key1 = 49;
            			}
            			break;
            			case (int)50: {
HXLINE(2161)				key1 = 50;
            			}
            			break;
            			case (int)51: {
HXLINE(2161)				key1 = 51;
            			}
            			break;
            			case (int)52: {
HXLINE(2161)				key1 = 52;
            			}
            			break;
            			case (int)53: {
HXLINE(2161)				key1 = 53;
            			}
            			break;
            			case (int)54: {
HXLINE(2161)				key1 = 54;
            			}
            			break;
            			case (int)55: {
HXLINE(2161)				key1 = 55;
            			}
            			break;
            			case (int)56: {
HXLINE(2161)				key1 = 56;
            			}
            			break;
            			case (int)57: {
HXLINE(2161)				key1 = 57;
            			}
            			break;
            			case (int)58: {
HXLINE(2161)				key1 = 186;
            			}
            			break;
            			case (int)59: {
HXLINE(2161)				key1 = 186;
            			}
            			break;
            			case (int)60: {
HXLINE(2161)				key1 = 60;
            			}
            			break;
            			case (int)61: {
HXLINE(2161)				key1 = 187;
            			}
            			break;
            			case (int)62: {
HXLINE(2161)				key1 = 190;
            			}
            			break;
            			case (int)63: {
HXLINE(2161)				key1 = 191;
            			}
            			break;
            			case (int)64: {
HXLINE(2161)				key1 = 50;
            			}
            			break;
            			case (int)91: {
HXLINE(2161)				key1 = 219;
            			}
            			break;
            			case (int)92: {
HXLINE(2161)				key1 = 220;
            			}
            			break;
            			case (int)93: {
HXLINE(2161)				key1 = 221;
            			}
            			break;
            			case (int)94: {
HXLINE(2161)				key1 = 54;
            			}
            			break;
            			case (int)95: {
HXLINE(2161)				key1 = 189;
            			}
            			break;
            			case (int)96: {
HXLINE(2161)				key1 = 192;
            			}
            			break;
            			case (int)97: {
HXLINE(2161)				key1 = 65;
            			}
            			break;
            			case (int)98: {
HXLINE(2161)				key1 = 66;
            			}
            			break;
            			case (int)99: {
HXLINE(2161)				key1 = 67;
            			}
            			break;
            			case (int)100: {
HXLINE(2161)				key1 = 68;
            			}
            			break;
            			case (int)101: {
HXLINE(2161)				key1 = 69;
            			}
            			break;
            			case (int)102: {
HXLINE(2161)				key1 = 70;
            			}
            			break;
            			case (int)103: {
HXLINE(2161)				key1 = 71;
            			}
            			break;
            			case (int)104: {
HXLINE(2161)				key1 = 72;
            			}
            			break;
            			case (int)105: {
HXLINE(2161)				key1 = 73;
            			}
            			break;
            			case (int)106: {
HXLINE(2161)				key1 = 74;
            			}
            			break;
            			case (int)107: {
HXLINE(2161)				key1 = 75;
            			}
            			break;
            			case (int)108: {
HXLINE(2161)				key1 = 76;
            			}
            			break;
            			case (int)109: {
HXLINE(2161)				key1 = 77;
            			}
            			break;
            			case (int)110: {
HXLINE(2161)				key1 = 78;
            			}
            			break;
            			case (int)111: {
HXLINE(2161)				key1 = 79;
            			}
            			break;
            			case (int)112: {
HXLINE(2161)				key1 = 80;
            			}
            			break;
            			case (int)113: {
HXLINE(2161)				key1 = 81;
            			}
            			break;
            			case (int)114: {
HXLINE(2161)				key1 = 82;
            			}
            			break;
            			case (int)115: {
HXLINE(2161)				key1 = 83;
            			}
            			break;
            			case (int)116: {
HXLINE(2161)				key1 = 84;
            			}
            			break;
            			case (int)117: {
HXLINE(2161)				key1 = 85;
            			}
            			break;
            			case (int)118: {
HXLINE(2161)				key1 = 86;
            			}
            			break;
            			case (int)119: {
HXLINE(2161)				key1 = 87;
            			}
            			break;
            			case (int)120: {
HXLINE(2161)				key1 = 88;
            			}
            			break;
            			case (int)121: {
HXLINE(2161)				key1 = 89;
            			}
            			break;
            			case (int)122: {
HXLINE(2161)				key1 = 90;
            			}
            			break;
            			case (int)127: {
HXLINE(2161)				key1 = 46;
            			}
            			break;
            			case (int)1073741881: {
HXLINE(2161)				key1 = 20;
            			}
            			break;
            			case (int)1073741882: {
HXLINE(2161)				key1 = 112;
            			}
            			break;
            			case (int)1073741883: {
HXLINE(2161)				key1 = 113;
            			}
            			break;
            			case (int)1073741884: {
HXLINE(2161)				key1 = 114;
            			}
            			break;
            			case (int)1073741885: {
HXLINE(2161)				key1 = 115;
            			}
            			break;
            			case (int)1073741886: {
HXLINE(2161)				key1 = 116;
            			}
            			break;
            			case (int)1073741887: {
HXLINE(2161)				key1 = 117;
            			}
            			break;
            			case (int)1073741888: {
HXLINE(2161)				key1 = 118;
            			}
            			break;
            			case (int)1073741889: {
HXLINE(2161)				key1 = 119;
            			}
            			break;
            			case (int)1073741890: {
HXLINE(2161)				key1 = 120;
            			}
            			break;
            			case (int)1073741891: {
HXLINE(2161)				key1 = 121;
            			}
            			break;
            			case (int)1073741892: {
HXLINE(2161)				key1 = 122;
            			}
            			break;
            			case (int)1073741893: {
HXLINE(2161)				key1 = 123;
            			}
            			break;
            			case (int)1073741894: {
HXLINE(2161)				key1 = 301;
            			}
            			break;
            			case (int)1073741895: {
HXLINE(2161)				key1 = 145;
            			}
            			break;
            			case (int)1073741896: {
HXLINE(2161)				key1 = 19;
            			}
            			break;
            			case (int)1073741897: {
HXLINE(2161)				key1 = 45;
            			}
            			break;
            			case (int)1073741898: {
HXLINE(2161)				key1 = 36;
            			}
            			break;
            			case (int)1073741899: {
HXLINE(2161)				key1 = 33;
            			}
            			break;
            			case (int)1073741901: {
HXLINE(2161)				key1 = 35;
            			}
            			break;
            			case (int)1073741902: {
HXLINE(2161)				key1 = 34;
            			}
            			break;
            			case (int)1073741903: {
HXLINE(2161)				key1 = 39;
            			}
            			break;
            			case (int)1073741904: {
HXLINE(2161)				key1 = 37;
            			}
            			break;
            			case (int)1073741905: {
HXLINE(2161)				key1 = 40;
            			}
            			break;
            			case (int)1073741906: {
HXLINE(2161)				key1 = 38;
            			}
            			break;
            			case (int)1073741907: {
HXLINE(2161)				key1 = 144;
            			}
            			break;
            			case (int)1073741908: {
HXLINE(2161)				key1 = 111;
            			}
            			break;
            			case (int)1073741909: {
HXLINE(2161)				key1 = 106;
            			}
            			break;
            			case (int)1073741910: {
HXLINE(2161)				key1 = 109;
            			}
            			break;
            			case (int)1073741911: {
HXLINE(2161)				key1 = 107;
            			}
            			break;
            			case (int)1073741912: {
HXLINE(2161)				key1 = 13;
            			}
            			break;
            			case (int)1073741913: {
HXLINE(2161)				key1 = 97;
            			}
            			break;
            			case (int)1073741914: {
HXLINE(2161)				key1 = 98;
            			}
            			break;
            			case (int)1073741915: {
HXLINE(2161)				key1 = 99;
            			}
            			break;
            			case (int)1073741916: {
HXLINE(2161)				key1 = 100;
            			}
            			break;
            			case (int)1073741917: {
HXLINE(2161)				key1 = 101;
            			}
            			break;
            			case (int)1073741918: {
HXLINE(2161)				key1 = 102;
            			}
            			break;
            			case (int)1073741919: {
HXLINE(2161)				key1 = 103;
            			}
            			break;
            			case (int)1073741920: {
HXLINE(2161)				key1 = 104;
            			}
            			break;
            			case (int)1073741921: {
HXLINE(2161)				key1 = 105;
            			}
            			break;
            			case (int)1073741922: {
HXLINE(2161)				key1 = 96;
            			}
            			break;
            			case (int)1073741923: {
HXLINE(2161)				key1 = 110;
            			}
            			break;
            			case (int)1073741925: {
HXLINE(2161)				key1 = 302;
            			}
            			break;
            			case (int)1073741928: {
HXLINE(2161)				key1 = 124;
            			}
            			break;
            			case (int)1073741929: {
HXLINE(2161)				key1 = 125;
            			}
            			break;
            			case (int)1073741930: {
HXLINE(2161)				key1 = 126;
            			}
            			break;
            			case (int)1073741982: {
HXLINE(2161)				key1 = 13;
            			}
            			break;
            			case (int)1073742044: {
HXLINE(2161)				key1 = 110;
            			}
            			break;
            			case (int)1073742048: {
HXLINE(2161)				key1 = 17;
            			}
            			break;
            			case (int)1073742049: {
HXLINE(2161)				key1 = 16;
            			}
            			break;
            			case (int)1073742050: {
HXLINE(2161)				key1 = 18;
            			}
            			break;
            			case (int)1073742051: {
HXLINE(2161)				key1 = 15;
            			}
            			break;
            			case (int)1073742052: {
HXLINE(2161)				key1 = 17;
            			}
            			break;
            			case (int)1073742053: {
HXLINE(2161)				key1 = 16;
            			}
            			break;
            			case (int)1073742054: {
HXLINE(2161)				key1 = 18;
            			}
            			break;
            			case (int)1073742055: {
HXLINE(2161)				key1 = 15;
            			}
            			break;
            			default:{
HXLINE(2161)				key1 = key;
            			}
            		}
HXDLIN(2161)		::String key2 = ( ( ::haxe::ds::IntMap)(this1) )->get_string(key1);
HXLINE(2163)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(2165)		int data = -1;
HXLINE(2167)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(2170)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(2174)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(2176)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(2172)				data = 1;
            			}
            			break;
            		}
HXLINE(2179)		{
HXLINE(2179)			int _g = 0;
HXDLIN(2179)			int _g1 = binds->length;
HXDLIN(2179)			while((_g < _g1)){
HXLINE(2179)				_g = (_g + 1);
HXDLIN(2179)				int i = (_g - 1);
HXLINE(2181)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(2181)				if ((_hx_tmp == key2.toLowerCase())) {
HXLINE(2182)					data = i;
            				}
            			}
            		}
HXLINE(2185)		if ((data == -1)) {
HXLINE(2186)			return;
            		}
HXLINE(2188)		switch((int)(data)){
            			case (int)0: {
HXLINE(2191)				this->leftRelease = true;
HXLINE(2192)				this->leftHold = false;
            			}
            			break;
            			case (int)1: {
HXLINE(2194)				this->downRelease = true;
HXLINE(2195)				this->downHold = false;
            			}
            			break;
            			case (int)2: {
HXLINE(2197)				this->upRelease = true;
HXLINE(2198)				this->upHold = false;
            			}
            			break;
            			case (int)3: {
HXLINE(2200)				this->rightRelease = true;
HXLINE(2201)				this->rightHold = false;
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,keyUp,(void))

void PlayState_obj::keyCheck(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2207_keyCheck)
HXLINE(2209)		int _hx_tmp;
HXDLIN(2209)		if (::PlayerSettings_obj::player1->controls->_up->check()) {
HXLINE(2209)			_hx_tmp = (this->upTime + 1);
            		}
            		else {
HXLINE(2209)			_hx_tmp = 0;
            		}
HXDLIN(2209)		this->upTime = _hx_tmp;
HXLINE(2210)		int _hx_tmp1;
HXDLIN(2210)		if (::PlayerSettings_obj::player1->controls->_down->check()) {
HXLINE(2210)			_hx_tmp1 = (this->downTime + 1);
            		}
            		else {
HXLINE(2210)			_hx_tmp1 = 0;
            		}
HXDLIN(2210)		this->downTime = _hx_tmp1;
HXLINE(2211)		int _hx_tmp2;
HXDLIN(2211)		if (::PlayerSettings_obj::player1->controls->_left->check()) {
HXLINE(2211)			_hx_tmp2 = (this->leftTime + 1);
            		}
            		else {
HXLINE(2211)			_hx_tmp2 = 0;
            		}
HXDLIN(2211)		this->leftTime = _hx_tmp2;
HXLINE(2212)		int _hx_tmp3;
HXDLIN(2212)		if (::PlayerSettings_obj::player1->controls->_right->check()) {
HXLINE(2212)			_hx_tmp3 = (this->rightTime + 1);
            		}
            		else {
HXLINE(2212)			_hx_tmp3 = 0;
            		}
HXDLIN(2212)		this->rightTime = _hx_tmp3;
HXLINE(2214)		this->upPress = (this->upTime == 1);
HXLINE(2215)		this->downPress = (this->downTime == 1);
HXLINE(2216)		this->leftPress = (this->leftTime == 1);
HXLINE(2217)		this->rightPress = (this->rightTime == 1);
HXLINE(2219)		bool _hx_tmp4;
HXDLIN(2219)		if (this->upHold) {
HXLINE(2219)			_hx_tmp4 = (this->upTime == 0);
            		}
            		else {
HXLINE(2219)			_hx_tmp4 = false;
            		}
HXDLIN(2219)		this->upRelease = _hx_tmp4;
HXLINE(2220)		bool _hx_tmp5;
HXDLIN(2220)		if (this->downHold) {
HXLINE(2220)			_hx_tmp5 = (this->downTime == 0);
            		}
            		else {
HXLINE(2220)			_hx_tmp5 = false;
            		}
HXDLIN(2220)		this->downRelease = _hx_tmp5;
HXLINE(2221)		bool _hx_tmp6;
HXDLIN(2221)		if (this->leftHold) {
HXLINE(2221)			_hx_tmp6 = (this->leftTime == 0);
            		}
            		else {
HXLINE(2221)			_hx_tmp6 = false;
            		}
HXDLIN(2221)		this->leftRelease = _hx_tmp6;
HXLINE(2222)		bool _hx_tmp7;
HXDLIN(2222)		if (this->rightHold) {
HXLINE(2222)			_hx_tmp7 = (this->rightTime == 0);
            		}
            		else {
HXLINE(2222)			_hx_tmp7 = false;
            		}
HXDLIN(2222)		this->rightRelease = _hx_tmp7;
HXLINE(2224)		this->upHold = (this->upTime > 0);
HXLINE(2225)		this->downHold = (this->downTime > 0);
HXLINE(2226)		this->leftHold = (this->leftTime > 0);
HXLINE(2227)		this->rightHold = (this->rightTime > 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyCheck,(void))

void PlayState_obj::keyShit(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2365_keyShit)
HXLINE(2366)			bool _hx_tmp;
HXDLIN(2366)			bool _hx_tmp1;
HXDLIN(2366)			bool _hx_tmp2;
HXDLIN(2366)			bool _hx_tmp3;
HXDLIN(2366)			if (!(_gthis->upHold)) {
HXLINE(2366)				_hx_tmp3 = _gthis->rightHold;
            			}
            			else {
HXLINE(2366)				_hx_tmp3 = true;
            			}
HXDLIN(2366)			if (!(_hx_tmp3)) {
HXLINE(2366)				_hx_tmp2 = _gthis->downHold;
            			}
            			else {
HXLINE(2366)				_hx_tmp2 = true;
            			}
HXDLIN(2366)			if (!(_hx_tmp2)) {
HXLINE(2366)				_hx_tmp1 = _gthis->leftHold;
            			}
            			else {
HXLINE(2366)				_hx_tmp1 = true;
            			}
HXDLIN(2366)			if (_hx_tmp1) {
HXLINE(2366)				_hx_tmp = _gthis->generatedMusic;
            			}
            			else {
HXLINE(2366)				_hx_tmp = false;
            			}
HXDLIN(2366)			if (_hx_tmp) {
HXLINE(2367)				bool _hx_tmp;
HXDLIN(2367)				bool _hx_tmp1;
HXDLIN(2367)				if (daNote->canBeHit) {
HXLINE(2367)					_hx_tmp1 = daNote->mustPress;
            				}
            				else {
HXLINE(2367)					_hx_tmp1 = false;
            				}
HXDLIN(2367)				if (_hx_tmp1) {
HXLINE(2367)					_hx_tmp = daNote->isSustainNote;
            				}
            				else {
HXLINE(2367)					_hx_tmp = false;
            				}
HXDLIN(2367)				if (_hx_tmp) {
HXLINE(2370)					_gthis->boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2372)					switch((int)(daNote->noteData)){
            						case (int)0: {
HXLINE(2385)							if (_gthis->leftHold) {
HXLINE(2386)								_gthis->goodNoteHit(daNote);
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(2382)							if (_gthis->downHold) {
HXLINE(2383)								_gthis->goodNoteHit(daNote);
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(2376)							if (_gthis->upHold) {
HXLINE(2377)								_gthis->goodNoteHit(daNote);
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(2379)							if (_gthis->rightHold) {
HXLINE(2380)								_gthis->goodNoteHit(daNote);
            							}
            						}
            						break;
            					}
            				}
            			}
HXLINE(2392)			bool _hx_tmp4;
HXDLIN(2392)			if (daNote->isSustainNote) {
HXLINE(2392)				_hx_tmp4 = daNote->mustPress;
            			}
            			else {
HXLINE(2392)				_hx_tmp4 = false;
            			}
HXDLIN(2392)			if (_hx_tmp4) {
HXLINE(2394)				bool _hx_tmp;
HXDLIN(2394)				if (daNote->prevNote->tooLate) {
HXLINE(2394)					_hx_tmp = !(daNote->prevNote->wasGoodHit);
            				}
            				else {
HXLINE(2394)					_hx_tmp = false;
            				}
HXDLIN(2394)				if (_hx_tmp) {
HXLINE(2395)					daNote->tooLate = true;
HXLINE(2396)					daNote->destroy();
HXLINE(2397)					_gthis->updateAccuracy();
            				}
HXLINE(2400)				bool _hx_tmp1;
HXDLIN(2400)				if (daNote->prevNote->wasGoodHit) {
HXLINE(2400)					_hx_tmp1 = !(daNote->wasGoodHit);
            				}
            				else {
HXLINE(2400)					_hx_tmp1 = false;
            				}
HXDLIN(2400)				if (_hx_tmp1) {
HXLINE(2402)					switch((int)(daNote->noteData)){
            						case (int)0: {
HXLINE(2404)							if (_gthis->leftRelease) {
HXLINE(2405)								_gthis->noteMissWrongPress(daNote->noteData,((Float)0.0475),true);
HXLINE(2406)								_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(2407)								daNote->tooLate = true;
HXLINE(2408)								daNote->destroy();
HXLINE(2409)								_gthis->boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2410)								_gthis->updateAccuracy();
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(2413)							if (_gthis->downRelease) {
HXLINE(2414)								_gthis->noteMissWrongPress(daNote->noteData,((Float)0.0475),true);
HXLINE(2415)								_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(2416)								daNote->tooLate = true;
HXLINE(2417)								daNote->destroy();
HXLINE(2418)								_gthis->boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2419)								_gthis->updateAccuracy();
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(2422)							if (_gthis->upRelease) {
HXLINE(2423)								_gthis->noteMissWrongPress(daNote->noteData,((Float)0.0475),true);
HXLINE(2424)								_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(2425)								daNote->tooLate = true;
HXLINE(2426)								daNote->destroy();
HXLINE(2427)								_gthis->boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2428)								_gthis->updateAccuracy();
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(2431)							if (_gthis->rightRelease) {
HXLINE(2432)								_gthis->noteMissWrongPress(daNote->noteData,((Float)0.0475),true);
HXLINE(2433)								_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(2434)								daNote->tooLate = true;
HXLINE(2435)								daNote->destroy();
HXLINE(2436)								_gthis->boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2437)								_gthis->updateAccuracy();
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2451_keyShit)
HXLINE(2452)			switch((int)(spr->ID)){
            				case (int)0: {
HXLINE(2470)					bool _hx_tmp;
HXDLIN(2470)					if (_gthis->leftPress) {
HXLINE(2470)						_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            					}
            					else {
HXLINE(2470)						_hx_tmp = false;
            					}
HXDLIN(2470)					if (_hx_tmp) {
HXLINE(2471)						spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            					}
HXLINE(2472)					if (!(_gthis->leftHold)) {
HXLINE(2473)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(2465)					bool _hx_tmp;
HXDLIN(2465)					if (_gthis->downPress) {
HXLINE(2465)						_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            					}
            					else {
HXLINE(2465)						_hx_tmp = false;
            					}
HXDLIN(2465)					if (_hx_tmp) {
HXLINE(2466)						spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            					}
HXLINE(2467)					if (!(_gthis->downHold)) {
HXLINE(2468)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(2455)					bool _hx_tmp;
HXDLIN(2455)					if (_gthis->upPress) {
HXLINE(2455)						_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            					}
            					else {
HXLINE(2455)						_hx_tmp = false;
            					}
HXDLIN(2455)					if (_hx_tmp) {
HXLINE(2456)						spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            					}
HXLINE(2457)					if (!(_gthis->upHold)) {
HXLINE(2458)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(2460)					bool _hx_tmp;
HXDLIN(2460)					if (_gthis->rightPress) {
HXLINE(2460)						_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            					}
            					else {
HXLINE(2460)						_hx_tmp = false;
            					}
HXDLIN(2460)					if (_hx_tmp) {
HXLINE(2461)						spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            					}
HXLINE(2462)					if (!(_gthis->rightHold)) {
HXLINE(2463)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
            				}
            				break;
            			}
HXLINE(2476)			if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(2481)				spr->centerOffsets(null());
HXLINE(2483)				if (!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)))) {
HXLINE(2484)					{
HXLINE(2484)						 ::flixel::math::FlxPoint _g = spr->offset;
HXDLIN(2484)						_g->set_x((_g->x - ( (Float)(14) )));
            					}
HXLINE(2485)					{
HXLINE(2485)						 ::flixel::math::FlxPoint _g1 = spr->offset;
HXDLIN(2485)						_g1->set_y((_g1->y - ( (Float)(14) )));
            					}
            				}
            			}
            			else {
HXLINE(2494)				spr->centerOffsets(null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2243_keyShit)
HXLINE(2242)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2245)		::Array< bool > controlArray = ::Array_obj< bool >::__new(4)->init(0,this->leftPress)->init(1,this->downPress)->init(2,this->upPress)->init(3,this->rightPress);
HXLINE(2247)		bool _hx_tmp;
HXDLIN(2247)		bool _hx_tmp1;
HXDLIN(2247)		bool _hx_tmp2;
HXDLIN(2247)		bool _hx_tmp3;
HXDLIN(2247)		if (!(this->upPress)) {
HXLINE(2247)			_hx_tmp3 = this->rightPress;
            		}
            		else {
HXLINE(2247)			_hx_tmp3 = true;
            		}
HXDLIN(2247)		if (!(_hx_tmp3)) {
HXLINE(2247)			_hx_tmp2 = this->downPress;
            		}
            		else {
HXLINE(2247)			_hx_tmp2 = true;
            		}
HXDLIN(2247)		if (!(_hx_tmp2)) {
HXLINE(2247)			_hx_tmp1 = this->leftPress;
            		}
            		else {
HXLINE(2247)			_hx_tmp1 = true;
            		}
HXDLIN(2247)		if (_hx_tmp1) {
HXLINE(2247)			_hx_tmp = this->generatedMusic;
            		}
            		else {
HXLINE(2247)			_hx_tmp = false;
            		}
HXDLIN(2247)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis,::Array< int >,ignoreList,::Array< ::Dynamic>,possibleNotes) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2257_keyShit)
HXLINE(2257)				bool _hx_tmp;
HXDLIN(2257)				bool _hx_tmp1;
HXDLIN(2257)				if (daNote->canBeHit) {
HXLINE(2257)					_hx_tmp1 = daNote->mustPress;
            				}
            				else {
HXLINE(2257)					_hx_tmp1 = false;
            				}
HXDLIN(2257)				if (_hx_tmp1) {
HXLINE(2257)					_hx_tmp = !(daNote->tooLate);
            				}
            				else {
HXLINE(2257)					_hx_tmp = false;
            				}
HXDLIN(2257)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            					int _hx_run( ::Note a, ::Note b){
            						HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2261_keyShit)
HXLINE(2261)						return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            					}
            					HX_END_LOCAL_FUNC2(return)

HXLINE(2260)					possibleNotes->push(daNote);
HXLINE(2261)					possibleNotes->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(2263)					ignoreList->push(daNote->noteData);
HXLINE(2265)					if ((::config::Config_obj::ghostTapType == 1)) {
HXLINE(2266)						_gthis->setCanMiss(null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2249)			this->boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2251)			::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2253)			::Array< int > ignoreList = ::Array_obj< int >::__new(0);
HXLINE(2255)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(_gthis,ignoreList,possibleNotes)),null());
HXLINE(2271)			::Array< bool > directionsAccounted = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_111,4);
HXLINE(2273)			if ((possibleNotes->length > 0)) {
HXLINE(2275)				 ::Note daNote = possibleNotes->__get(0).StaticCast<  ::Note >();
HXLINE(2278)				if ((possibleNotes->length >= 2)) {
HXLINE(2280)					if (this->inRange(possibleNotes->__get(0).StaticCast<  ::Note >()->strumTime,possibleNotes->__get(1).StaticCast<  ::Note >()->strumTime,( (Float)(4) ))) {
HXLINE(2282)						int _g = 0;
HXDLIN(2282)						while((_g < possibleNotes->length)){
HXLINE(2282)							 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(2282)							_g = (_g + 1);
HXLINE(2284)							bool _hx_tmp;
HXDLIN(2284)							if (controlArray->__get(coolNote->noteData)) {
HXLINE(2284)								_hx_tmp = !(directionsAccounted->__get(coolNote->noteData));
            							}
            							else {
HXLINE(2284)								_hx_tmp = false;
            							}
HXDLIN(2284)							if (_hx_tmp) {
HXLINE(2286)								this->goodNoteHit(coolNote);
HXLINE(2287)								directionsAccounted[coolNote->noteData] = true;
            							}
            							else {
HXLINE(2291)								bool inIgnoreList = false;
HXLINE(2292)								{
HXLINE(2292)									int _g = 0;
HXDLIN(2292)									int _g1 = ignoreList->length;
HXDLIN(2292)									while((_g < _g1)){
HXLINE(2292)										_g = (_g + 1);
HXDLIN(2292)										int shit = (_g - 1);
HXLINE(2294)										if (controlArray->__get(ignoreList->__get(shit))) {
HXLINE(2295)											inIgnoreList = true;
            										}
            									}
            								}
HXLINE(2297)								if (!(inIgnoreList)) {
HXLINE(2298)									this->badNoteCheck();
            								}
            							}
            						}
            					}
            					else {
HXLINE(2303)						if ((possibleNotes->__get(0).StaticCast<  ::Note >()->noteData == possibleNotes->__get(1).StaticCast<  ::Note >()->noteData)) {
HXLINE(2305)							bool _hx_tmp;
HXDLIN(2305)							if (controlArray->__get(daNote->noteData)) {
HXLINE(2305)								_hx_tmp = !(directionsAccounted->__get(daNote->noteData));
            							}
            							else {
HXLINE(2305)								_hx_tmp = false;
            							}
HXDLIN(2305)							if (_hx_tmp) {
HXLINE(2307)								this->goodNoteHit(daNote);
HXLINE(2308)								directionsAccounted[daNote->noteData] = true;
            							}
            						}
            						else {
HXLINE(2313)							int _g = 0;
HXDLIN(2313)							while((_g < possibleNotes->length)){
HXLINE(2313)								 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(2313)								_g = (_g + 1);
HXLINE(2315)								bool _hx_tmp;
HXDLIN(2315)								bool _hx_tmp1;
HXDLIN(2315)								if (controlArray->__get(coolNote->noteData)) {
HXLINE(2315)									_hx_tmp1 = !(directionsAccounted->__get(coolNote->noteData));
            								}
            								else {
HXLINE(2315)									_hx_tmp1 = false;
            								}
HXDLIN(2315)								if (_hx_tmp1) {
HXLINE(2315)									_hx_tmp = !(coolNote->isSustainNote);
            								}
            								else {
HXLINE(2315)									_hx_tmp = false;
            								}
HXDLIN(2315)								if (_hx_tmp) {
HXLINE(2317)									this->goodNoteHit(coolNote);
HXLINE(2318)									directionsAccounted[coolNote->noteData] = true;
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE(2325)					bool _hx_tmp;
HXDLIN(2325)					if (controlArray->__get(daNote->noteData)) {
HXLINE(2325)						_hx_tmp = !(directionsAccounted->__get(daNote->noteData));
            					}
            					else {
HXLINE(2325)						_hx_tmp = false;
            					}
HXDLIN(2325)					if (_hx_tmp) {
HXLINE(2327)						this->goodNoteHit(daNote);
HXLINE(2328)						directionsAccounted[daNote->noteData] = true;
            					}
            				}
            			}
            			else {
HXLINE(2360)				this->badNoteCheck();
            			}
            		}
HXLINE(2364)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_2(_gthis)),null());
HXLINE(2444)		bool _hx_tmp4;
HXDLIN(2444)		bool _hx_tmp5;
HXDLIN(2444)		bool _hx_tmp6;
HXDLIN(2444)		bool _hx_tmp7;
HXDLIN(2444)		if ((this->boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(2444)			_hx_tmp7 = !(this->upHold);
            		}
            		else {
HXLINE(2444)			_hx_tmp7 = false;
            		}
HXDLIN(2444)		if (_hx_tmp7) {
HXLINE(2444)			_hx_tmp6 = !(this->downHold);
            		}
            		else {
HXLINE(2444)			_hx_tmp6 = false;
            		}
HXDLIN(2444)		if (_hx_tmp6) {
HXLINE(2444)			_hx_tmp5 = !(this->rightHold);
            		}
            		else {
HXLINE(2444)			_hx_tmp5 = false;
            		}
HXDLIN(2444)		if (_hx_tmp5) {
HXLINE(2444)			_hx_tmp4 = !(this->leftHold);
            		}
            		else {
HXLINE(2444)			_hx_tmp4 = false;
            		}
HXDLIN(2444)		if (_hx_tmp4) {
HXLINE(2446)			if (::StringTools_obj::startsWith(this->boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(2447)				this->boyfriend->idleEnd(null());
            			}
            		}
HXLINE(2450)		this->playerStrums->forEach( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

void PlayState_obj::keyShitAuto(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,hitNotes) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2508_keyShitAuto)
HXLINE(2508)			bool _hx_tmp;
HXDLIN(2508)			if (daNote->mustPress) {
HXLINE(2508)				_hx_tmp = (daNote->strumTime < (::Conductor_obj::songPosition + (::Conductor_obj::safeZoneOffset * ((Float)0.125))));
            			}
            			else {
HXLINE(2508)				_hx_tmp = false;
            			}
HXDLIN(2508)			if (_hx_tmp) {
HXLINE(2510)				hitNotes->push(daNote);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2502_keyShitAuto)
HXLINE(2504)		::Array< ::Dynamic> hitNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2506)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(hitNotes)),null());
HXLINE(2514)		bool _hx_tmp;
HXDLIN(2514)		bool _hx_tmp1;
HXDLIN(2514)		bool _hx_tmp2;
HXDLIN(2514)		bool _hx_tmp3;
HXDLIN(2514)		if ((this->boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(2514)			_hx_tmp3 = !(this->upHold);
            		}
            		else {
HXLINE(2514)			_hx_tmp3 = false;
            		}
HXDLIN(2514)		if (_hx_tmp3) {
HXLINE(2514)			_hx_tmp2 = !(this->downHold);
            		}
            		else {
HXLINE(2514)			_hx_tmp2 = false;
            		}
HXDLIN(2514)		if (_hx_tmp2) {
HXLINE(2514)			_hx_tmp1 = !(this->rightHold);
            		}
            		else {
HXLINE(2514)			_hx_tmp1 = false;
            		}
HXDLIN(2514)		if (_hx_tmp1) {
HXLINE(2514)			_hx_tmp = !(this->leftHold);
            		}
            		else {
HXLINE(2514)			_hx_tmp = false;
            		}
HXDLIN(2514)		if (_hx_tmp) {
HXLINE(2516)			if (::StringTools_obj::startsWith(this->boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(2517)				this->boyfriend->idleEnd(null());
            			}
            		}
HXLINE(2520)		{
HXLINE(2520)			int _g = 0;
HXDLIN(2520)			while((_g < hitNotes->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::Note,x) HXARGC(1)
            				void _hx_run( ::flixel::FlxSprite spr){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2528_keyShitAuto)
HXLINE(2528)					if ((::Math_obj::abs(( (Float)(x->noteData) )) == spr->ID)) {
HXLINE(2530)						spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
HXLINE(2531)						bool _hx_tmp;
HXDLIN(2531)						if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(2531)							_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            						}
            						else {
HXLINE(2531)							_hx_tmp = false;
            						}
HXDLIN(2531)						if (_hx_tmp) {
HXLINE(2533)							spr->centerOffsets(null());
HXLINE(2534)							{
HXLINE(2534)								 ::flixel::math::FlxPoint _g = spr->offset;
HXDLIN(2534)								_g->set_x((_g->x - ( (Float)(14) )));
            							}
HXLINE(2535)							{
HXLINE(2535)								 ::flixel::math::FlxPoint _g1 = spr->offset;
HXDLIN(2535)								_g1->set_y((_g1->y - ( (Float)(14) )));
            							}
            						}
            						else {
HXLINE(2538)							spr->centerOffsets(null());
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2520)				 ::Note x = hitNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(2520)				_g = (_g + 1);
HXLINE(2522)				this->boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2524)				this->goodNoteHit(x);
HXLINE(2526)				this->playerStrums->forEach( ::Dynamic(new _hx_Closure_1(x)),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShitAuto,(void))

void PlayState_obj::noteMiss(::hx::Null< int >  __o_direction, ::Dynamic __o_healthLoss, ::Dynamic __o_playAudio, ::Dynamic __o_skipInvCheck){
            		int direction = __o_direction.Default(1);
            		 ::Dynamic healthLoss = __o_healthLoss;
            		if (::hx::IsNull(__o_healthLoss)) healthLoss = ((Float)0.04);
            		 ::Dynamic playAudio = __o_playAudio;
            		if (::hx::IsNull(__o_playAudio)) playAudio = true;
            		 ::Dynamic skipInvCheck = __o_skipInvCheck;
            		if (::hx::IsNull(__o_skipInvCheck)) skipInvCheck = false;
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2548_noteMiss)
HXLINE(2549)		bool _hx_tmp;
HXDLIN(2549)		if (!(this->startingSong)) {
HXLINE(2549)			if (this->invuln) {
HXLINE(2549)				_hx_tmp = ( (bool)(skipInvCheck) );
            			}
            			else {
HXLINE(2549)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(2549)			_hx_tmp = false;
            		}
HXDLIN(2549)		if (_hx_tmp) {
HXLINE(2551)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2551)			_hx_tmp->health = (_hx_tmp->health - (( (Float)(healthLoss) ) * ::config::Config_obj::healthDrainMultiplier));
HXLINE(2552)			if ((this->combo > ::PlayState_obj::minCombo)) {
HXLINE(2554)				this->gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
HXLINE(2555)				this->comboUI->breakPopup();
            			}
HXLINE(2557)			 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2557)			_hx_tmp1->misses = (_hx_tmp1->misses + 1);
HXLINE(2558)			this->combo = 0;
HXLINE(2560)			 ::PlayState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2560)			_hx_tmp2->songScore = (_hx_tmp2->songScore - 100);
HXLINE(2562)			if (( (bool)(playAudio) )) {
HXLINE(2563)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2563)				::String _hx_tmp1 = (((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null()))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension);
HXDLIN(2563)				_hx_tmp->play(_hx_tmp1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
            			}
HXLINE(2566)			this->setBoyfriendInvuln(((Float)0.083333333333333329));
HXLINE(2568)			if (this->boyfriend->canAutoAnim) {
HXLINE(2569)				switch((int)(direction)){
            					case (int)0: {
HXLINE(2578)						this->boyfriend->playAnim(HX_("singLEFTmiss",d2,2f,9c,b6),true,null(),null());
            					}
            					break;
            					case (int)1: {
HXLINE(2576)						this->boyfriend->playAnim(HX_("singDOWNmiss",ad,e9,88,e4),true,null(),null());
            					}
            					break;
            					case (int)2: {
HXLINE(2572)						this->boyfriend->playAnim(HX_("singUPmiss",66,22,08,8a),true,null(),null());
            					}
            					break;
            					case (int)3: {
HXLINE(2574)						this->boyfriend->playAnim(HX_("singRIGHTmiss",89,cc,65,e3),true,null(),null());
            					}
            					break;
            				}
            			}
HXLINE(2582)			this->updateAccuracy();
            		}
HXLINE(2585)		if (::Main_obj::flippymode) {
HXLINE(2585)			::openfl::_hx_system::System_obj::exit(0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,noteMiss,(void))

void PlayState_obj::noteMissWrongPress(::hx::Null< int >  __o_direction, ::Dynamic __o_healthLoss,::hx::Null< bool >  __o_dropCombo){
            		int direction = __o_direction.Default(1);
            		 ::Dynamic healthLoss = __o_healthLoss;
            		if (::hx::IsNull(__o_healthLoss)) healthLoss = ((Float)0.0475);
            		bool dropCombo = __o_dropCombo.Default(false);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2591_noteMissWrongPress)
HXDLIN(2591)		bool _hx_tmp;
HXDLIN(2591)		if (!(this->startingSong)) {
HXDLIN(2591)			_hx_tmp = !(this->invuln);
            		}
            		else {
HXDLIN(2591)			_hx_tmp = false;
            		}
HXDLIN(2591)		if (_hx_tmp) {
HXLINE(2593)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2593)			_hx_tmp->health = (_hx_tmp->health - (( (Float)(healthLoss) ) * ::config::Config_obj::healthDrainMultiplier));
HXLINE(2595)			if (dropCombo) {
HXLINE(2596)				if ((this->combo > ::PlayState_obj::minCombo)) {
HXLINE(2597)					this->gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
HXLINE(2598)					this->comboUI->breakPopup();
            				}
HXLINE(2600)				this->combo = 0;
            			}
HXLINE(2603)			 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2603)			_hx_tmp1->songScore = (_hx_tmp1->songScore - 25);
HXLINE(2605)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN(2605)			::String _hx_tmp3 = (((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null()))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension);
HXDLIN(2605)			_hx_tmp2->play(_hx_tmp3,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
HXLINE(2607)			this->setBoyfriendInvuln(((Float)0.066666666666666666));
HXLINE(2609)			if (this->boyfriend->canAutoAnim) {
HXLINE(2610)				switch((int)(direction)){
            					case (int)0: {
HXLINE(2619)						this->boyfriend->playAnim(HX_("singLEFTmiss",d2,2f,9c,b6),true,null(),null());
            					}
            					break;
            					case (int)1: {
HXLINE(2617)						this->boyfriend->playAnim(HX_("singDOWNmiss",ad,e9,88,e4),true,null(),null());
            					}
            					break;
            					case (int)2: {
HXLINE(2613)						this->boyfriend->playAnim(HX_("singUPmiss",66,22,08,8a),true,null(),null());
            					}
            					break;
            					case (int)3: {
HXLINE(2615)						this->boyfriend->playAnim(HX_("singRIGHTmiss",89,cc,65,e3),true,null(),null());
            					}
            					break;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,noteMissWrongPress,(void))

void PlayState_obj::badNoteCheck(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2627_badNoteCheck)
HXDLIN(2627)		bool _hx_tmp;
HXDLIN(2627)		if ((::config::Config_obj::ghostTapType > 0)) {
HXDLIN(2627)			_hx_tmp = !(this->canHit);
            		}
            		else {
HXDLIN(2627)			_hx_tmp = false;
            		}
HXDLIN(2627)		if (!(_hx_tmp)) {
HXLINE(2629)			if (this->leftPress) {
HXLINE(2630)				this->noteMissWrongPress(0,null(),null());
            			}
HXLINE(2631)			if (this->upPress) {
HXLINE(2632)				this->noteMissWrongPress(2,null(),null());
            			}
HXLINE(2633)			if (this->rightPress) {
HXLINE(2634)				this->noteMissWrongPress(3,null(),null());
            			}
HXLINE(2635)			if (this->downPress) {
HXLINE(2636)				this->noteMissWrongPress(1,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,badNoteCheck,(void))

void PlayState_obj::setBoyfriendInvuln(::hx::Null< Float >  __o_time){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,int,invulnCheck) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2649_setBoyfriendInvuln)
HXLINE(2649)			if ((_gthis->invulnCount == invulnCheck)) {
HXLINE(2651)				_gthis->invuln = false;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		Float time = __o_time.Default(((Float)0.083333333333333329));
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2640_setBoyfriendInvuln)
HXDLIN(2640)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2642)		this->invulnCount++;
HXLINE(2643)		int invulnCheck = this->invulnCount;
HXLINE(2645)		this->invuln = true;
HXLINE(2647)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(time, ::Dynamic(new _hx_Closure_0(_gthis,invulnCheck)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,setBoyfriendInvuln,(void))

void PlayState_obj::setCanMiss(::hx::Null< Float >  __o_time){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,noMissCheck, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2668_setCanMiss)
HXLINE(2668)			if ((noMissCheck == _gthis->noMissCount)) {
HXLINE(2670)				_gthis->canHit = false;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		Float time = __o_time.Default(((Float)0.16666666666666666));
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2659_setCanMiss)
HXDLIN(2659)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2661)		this->noMissCount++;
HXLINE(2662)		int noMissCheck = this->noMissCount;
HXLINE(2664)		this->canHit = true;
HXLINE(2666)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(time, ::Dynamic(new _hx_Closure_0(noMissCheck,_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,setCanMiss,(void))

void PlayState_obj::goodNoteHit( ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2693_goodNoteHit)
HXDLIN(2693)		bool _hx_tmp;
HXDLIN(2693)		if (note->isSustainNote) {
HXDLIN(2693)			_hx_tmp = !(note->prevNote->wasGoodHit);
            		}
            		else {
HXDLIN(2693)			_hx_tmp = false;
            		}
HXDLIN(2693)		if (_hx_tmp) {
HXLINE(2694)			this->noteMiss(note->noteData,((Float)0.05),true,true);
HXLINE(2695)			note->prevNote->tooLate = true;
HXLINE(2696)			note->prevNote->destroy();
HXLINE(2697)			this->vocals->set_volume(( (Float)(0) ));
            		}
            		else {
HXLINE(2700)			if (!(note->wasGoodHit)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Note,note) HXARGC(1)
            				void _hx_run( ::flixel::FlxSprite spr){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2738_goodNoteHit)
HXLINE(2738)					if ((::Math_obj::abs(( (Float)(note->noteData) )) == spr->ID)) {
HXLINE(2740)						spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2702)				if (!(note->isSustainNote)) {
HXLINE(2704)					this->popUpScore(note->strumTime);
HXLINE(2705)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2705)					_hx_tmp->combo = (_hx_tmp->combo + 1);
            				}
            				else {
HXLINE(2708)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2708)					_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            				}
HXLINE(2710)				if ((note->noteData >= 0)) {
HXLINE(2711)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2711)					_hx_tmp->health = (_hx_tmp->health + (((Float)0.015) * ::config::Config_obj::healthMultiplier));
            				}
            				else {
HXLINE(2714)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2714)					_hx_tmp->health = (_hx_tmp->health + (((Float)0.0015) * ::config::Config_obj::healthMultiplier));
            				}
HXLINE(2717)				if (this->boyfriend->canAutoAnim) {
HXLINE(2718)					switch((int)(note->noteData)){
            						case (int)0: {
HXLINE(2727)							this->boyfriend->playAnim(HX_("singLEFT",d6,39,ef,3b),true,null(),null());
            						}
            						break;
            						case (int)1: {
HXLINE(2725)							this->boyfriend->playAnim(HX_("singDOWN",31,2a,ad,36),true,null(),null());
            						}
            						break;
            						case (int)2: {
HXLINE(2721)							this->boyfriend->playAnim(HX_("singUP",6a,52,21,b9),true,null(),null());
            						}
            						break;
            						case (int)3: {
HXLINE(2723)							this->boyfriend->playAnim(HX_("singRIGHT",0d,6f,70,ac),true,null(),null());
            						}
            						break;
            					}
            				}
HXLINE(2731)				if (!(note->isSustainNote)) {
HXLINE(2732)					this->setBoyfriendInvuln(((Float)0.041666666666666664));
            				}
HXLINE(2736)				this->playerStrums->forEach( ::Dynamic(new _hx_Closure_0(note)),null());
HXLINE(2744)				note->wasGoodHit = true;
HXLINE(2745)				this->vocals->set_volume(( (Float)(1) ));
HXLINE(2747)				if (!(note->isSustainNote)) {
HXLINE(2748)					note->destroy();
            				}
HXLINE(2751)				this->updateAccuracy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::resetFastCar(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2758_resetFastCar)
HXLINE(2759)		this->fastCar->set_x(( (Float)(-12600) ));
HXLINE(2760)		 ::flixel::FlxSprite _hx_tmp = this->fastCar;
HXDLIN(2760)		_hx_tmp->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(140,250,null())) ));
HXLINE(2761)		this->fastCar->velocity->set_x(( (Float)(0) ));
HXLINE(2762)		this->fastCarCanDrive = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resetFastCar,(void))

void PlayState_obj::fastCarDrive(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2773_fastCarDrive)
HXLINE(2773)			_gthis->resetFastCar();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2766_fastCarDrive)
HXLINE(2765)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2767)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2767)		_hx_tmp->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("carPass",05,1f,44,b6) + ::flixel::FlxG_obj::random->_hx_int(0,1,null()))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),((Float)0.7),null(),null(),null(),null());
HXLINE(2769)		 ::flixel::math::FlxPoint _hx_tmp1 = this->fastCar->velocity;
HXDLIN(2769)		int _hx_tmp2 = ::flixel::FlxG_obj::random->_hx_int(170,220,null());
HXDLIN(2769)		_hx_tmp1->set_x(((( (Float)(_hx_tmp2) ) / ::flixel::FlxG_obj::elapsed) * ( (Float)(3) )));
HXLINE(2770)		this->fastCarCanDrive = false;
HXLINE(2771)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,fastCarDrive,(void))

void PlayState_obj::trainStart(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2785_trainStart)
HXLINE(2786)		this->trainMoving = true;
HXLINE(2787)		if (::hx::IsNull( this->trainSound->_channel )) {
HXLINE(2788)			this->trainSound->play(true,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainStart,(void))

void PlayState_obj::updateTrainPos(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2794_updateTrainPos)
HXLINE(2795)		if ((this->trainSound->_time >= 4700)) {
HXLINE(2797)			this->startedMoving = true;
HXLINE(2798)			this->gf->playAnim(HX_("hairBlow",b4,c9,39,c9),null(),null(),null());
            		}
HXLINE(2801)		if (this->startedMoving) {
HXLINE(2803)			{
HXLINE(2803)				 ::flixel::FlxSprite _g = this->phillyTrain;
HXDLIN(2803)				_g->set_x((_g->x - ( (Float)(400) )));
            			}
HXLINE(2805)			bool _hx_tmp;
HXDLIN(2805)			if ((this->phillyTrain->x < -2000)) {
HXLINE(2805)				_hx_tmp = !(this->trainFinishing);
            			}
            			else {
HXLINE(2805)				_hx_tmp = false;
            			}
HXDLIN(2805)			if (_hx_tmp) {
HXLINE(2807)				this->phillyTrain->set_x(( (Float)(-1150) ));
HXLINE(2808)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2808)				_hx_tmp->trainCars = (_hx_tmp->trainCars - 1);
HXLINE(2810)				if ((this->trainCars <= 0)) {
HXLINE(2811)					this->trainFinishing = true;
            				}
            			}
HXLINE(2814)			bool _hx_tmp1;
HXDLIN(2814)			if ((this->phillyTrain->x < -4000)) {
HXLINE(2814)				_hx_tmp1 = this->trainFinishing;
            			}
            			else {
HXLINE(2814)				_hx_tmp1 = false;
            			}
HXDLIN(2814)			if (_hx_tmp1) {
HXLINE(2815)				this->trainReset();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateTrainPos,(void))

void PlayState_obj::trainReset(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2820_trainReset)
HXLINE(2821)		this->gf->playAnim(HX_("hairFall",bd,48,d6,cb),null(),null(),null());
HXLINE(2822)		this->phillyTrain->set_x(( (Float)((::flixel::FlxG_obj::width + 200)) ));
HXLINE(2823)		this->trainMoving = false;
HXLINE(2826)		this->trainCars = 8;
HXLINE(2827)		this->trainFinishing = false;
HXLINE(2828)		this->startedMoving = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainReset,(void))

void PlayState_obj::lightningStrikeShit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2832_lightningStrikeShit)
HXLINE(2833)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2833)		_hx_tmp->play((((HX_("assets/sounds/",1f,fa,fb,94) + (HX_("thunder_",bb,58,cf,2f) + ::flixel::FlxG_obj::random->_hx_int(1,2,null()))) + HX_(".",2e,00,00,00)) + ::Paths_obj::audioExtension),null(),null(),null(),null(),null());
HXLINE(2834)		this->halloweenBG->animation->play(HX_("lightning",0a,39,4a,d7),null(),null(),null());
HXLINE(2836)		this->lightningStrikeBeat = this->curBeat;
HXLINE(2837)		this->lightningOffset = ::flixel::FlxG_obj::random->_hx_int(8,24,null());
HXLINE(2839)		this->boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
HXLINE(2840)		this->gf->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,lightningStrikeShit,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2844_stepHit)
HXLINE(2845)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(2847)			bool _hx_tmp;
HXDLIN(2847)			if (!((this->vocals->_time > (::Conductor_obj::songPosition + 20)))) {
HXLINE(2847)				_hx_tmp = (this->vocals->_time < (::Conductor_obj::songPosition - ( (Float)(20) )));
            			}
            			else {
HXLINE(2847)				_hx_tmp = true;
            			}
HXDLIN(2847)			if (_hx_tmp) {
HXLINE(2849)				this->resyncVocals();
            			}
            		}
HXLINE(2858)		this->super::stepHit();
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2865_beatHit)
HXLINE(2867)		this->super::beatHit();
HXLINE(2869)		if ((::hx::Mod(this->curBeat,4) == 0)) {
HXLINE(2871)			int sec = ::Math_obj::floor((( (Float)(this->curBeat) ) / ( (Float)(4) )));
HXLINE(2872)			if ((sec >= this->sectionHaveNotes->length)) {
HXLINE(2872)				sec = -1;
            			}
HXLINE(2874)			bool _hx_tmp;
HXDLIN(2874)			if ((sec >= 0)) {
HXLINE(2874)				_hx_tmp = this->sectionHaveNotes->__get(sec).StaticCast< ::Array< bool > >()->__get(0);
            			}
            			else {
HXLINE(2874)				_hx_tmp = false;
            			}
HXDLIN(2874)			this->sectionHasBFNotes = _hx_tmp;
HXLINE(2875)			bool _hx_tmp1;
HXDLIN(2875)			if ((sec >= 0)) {
HXLINE(2875)				_hx_tmp1 = this->sectionHaveNotes->__get(sec).StaticCast< ::Array< bool > >()->__get(1);
            			}
            			else {
HXLINE(2875)				_hx_tmp1 = false;
            			}
HXDLIN(2875)			this->sectionHasOppNotes = _hx_tmp1;
            		}
HXLINE(2879)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2881_beatHit)
HXLINE(2881)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2881)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(2881)			int a1 = 1;
HXDLIN(2881)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(2881)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(2884)		if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(2886)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(2888)				::Conductor_obj::changeBPM(( (Float)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(2892)				::Conductor_obj::changeBPM(( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            			}
HXLINE(2895)			if (!(this->sectionHasOppNotes)) {
HXLINE(2896)				bool _hx_tmp;
HXDLIN(2896)				if (this->dadBeats->contains(::hx::Mod(this->curBeat,4))) {
HXLINE(2896)					_hx_tmp = this->dad->canAutoAnim;
            				}
            				else {
HXLINE(2896)					_hx_tmp = false;
            				}
HXDLIN(2896)				if (_hx_tmp) {
HXLINE(2897)					this->dad->dance(null());
            				}
            			}
            		}
            		else {
HXLINE(2901)			if (this->dadBeats->contains(::hx::Mod(this->curBeat,4))) {
HXLINE(2902)				this->dad->dance(null());
            			}
            		}
HXLINE(2907)		bool _hx_tmp;
HXDLIN(2907)		bool _hx_tmp1;
HXDLIN(2907)		bool _hx_tmp2;
HXDLIN(2907)		bool _hx_tmp3;
HXDLIN(2907)		if ((this->curSong.toLowerCase() == HX_("milf",d6,4c,5c,48))) {
HXLINE(2907)			_hx_tmp3 = (this->curBeat >= 168);
            		}
            		else {
HXLINE(2907)			_hx_tmp3 = false;
            		}
HXDLIN(2907)		if (_hx_tmp3) {
HXLINE(2907)			_hx_tmp2 = (this->curBeat <= 200);
            		}
            		else {
HXLINE(2907)			_hx_tmp2 = false;
            		}
HXDLIN(2907)		if (_hx_tmp2) {
HXLINE(2907)			_hx_tmp1 = this->camZooming;
            		}
            		else {
HXLINE(2907)			_hx_tmp1 = false;
            		}
HXDLIN(2907)		if (_hx_tmp1) {
HXLINE(2907)			_hx_tmp = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(2907)			_hx_tmp = false;
            		}
HXDLIN(2907)		if (_hx_tmp) {
HXLINE(2909)			this->uiBop(((Float)0.015),((Float)0.03));
            		}
HXLINE(2912)		bool _hx_tmp4;
HXDLIN(2912)		if ((this->curSong.toLowerCase() == HX_("milf",d6,4c,5c,48))) {
HXLINE(2912)			_hx_tmp4 = (this->curBeat == 168);
            		}
            		else {
HXLINE(2912)			_hx_tmp4 = false;
            		}
HXDLIN(2912)		if (_hx_tmp4) {
HXLINE(2914)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_136,4);
HXLINE(2915)			this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_137,4);
            		}
HXLINE(2918)		bool _hx_tmp5;
HXDLIN(2918)		if ((this->curSong.toLowerCase() == HX_("milf",d6,4c,5c,48))) {
HXLINE(2918)			_hx_tmp5 = (this->curBeat == 200);
            		}
            		else {
HXLINE(2918)			_hx_tmp5 = false;
            		}
HXDLIN(2918)		if (_hx_tmp5) {
HXLINE(2920)			this->dadBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_138,2);
HXLINE(2921)			this->bfBeats = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_139,2);
            		}
HXLINE(2924)		bool _hx_tmp6;
HXDLIN(2924)		if ((::hx::Mod(this->curBeat,(4 * this->bopSpeed)) == 0)) {
HXLINE(2924)			_hx_tmp6 = this->camZooming;
            		}
            		else {
HXLINE(2924)			_hx_tmp6 = false;
            		}
HXDLIN(2924)		if (_hx_tmp6) {
HXLINE(2925)			this->uiBop(null(),null());
            		}
HXLINE(2928)		if ((::hx::Mod(this->curBeat,this->bopSpeed) == 0)) {
HXLINE(2929)			this->iconP1->iconScale = (this->iconP1->defualtIconScale * ((Float)1.25));
HXLINE(2930)			this->iconP2->iconScale = (this->iconP2->defualtIconScale * ((Float)1.25));
HXLINE(2932)			this->iconP1->tweenToDefaultScale(((Float)0.2),::flixel::tweens::FlxEase_obj::quintOut_dyn());
HXLINE(2933)			this->iconP2->tweenToDefaultScale(((Float)0.2),::flixel::tweens::FlxEase_obj::quintOut_dyn());
HXLINE(2935)			this->gf->dance(null());
            		}
HXLINE(2939)		bool _hx_tmp7;
HXDLIN(2939)		if (this->bfBeats->contains(::hx::Mod(this->curBeat,4))) {
HXLINE(2939)			_hx_tmp7 = this->boyfriend->canAutoAnim;
            		}
            		else {
HXLINE(2939)			_hx_tmp7 = false;
            		}
HXDLIN(2939)		if (_hx_tmp7) {
HXLINE(2940)			this->boyfriend->dance(null());
            		}
HXLINE(2942)		bool _hx_tmp8;
HXDLIN(2942)		if ((::hx::Mod(this->totalBeats,8) == 7)) {
HXLINE(2942)			_hx_tmp8 = (this->curSong == HX_("Bopeebo",90,29,16,da));
            		}
            		else {
HXLINE(2942)			_hx_tmp8 = false;
            		}
HXDLIN(2942)		if (_hx_tmp8) {
HXLINE(2944)			this->boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            		}
HXLINE(2948)		::String _hx_switch_0 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::BackgroundDancer dancer){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2961_beatHit)
HXLINE(2961)				dancer->dance();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2959)			this->grpLimoDancers->forEach( ::Dynamic(new _hx_Closure_1()),null());
HXLINE(2964)			bool _hx_tmp;
HXDLIN(2964)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10)) {
HXLINE(2964)				_hx_tmp = this->fastCarCanDrive;
            			}
            			else {
HXLINE(2964)				_hx_tmp = false;
            			}
HXDLIN(2964)			if (_hx_tmp) {
HXLINE(2965)				this->fastCarDrive();
            			}
HXLINE(2958)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE(2954)			this->upperBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(2955)			this->bottomBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(2956)			this->santa->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
HXLINE(2953)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE(2968)			if (!(this->trainMoving)) {
HXLINE(2969)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2969)				_hx_tmp->trainCooldown = (_hx_tmp->trainCooldown + 1);
            			}
HXLINE(2971)			if ((::hx::Mod(this->totalBeats,4) == 0)) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            				void _hx_run( ::flixel::FlxSprite light){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2975_beatHit)
HXLINE(2975)					light->set_visible(false);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2973)				this->phillyCityLights->forEach( ::Dynamic(new _hx_Closure_2()),null());
HXLINE(2978)				this->curLight = ::flixel::FlxG_obj::random->_hx_int(0,(this->phillyCityLights->length - 1),null());
HXLINE(2980)				Dynamic( this->phillyCityLights->members->__get(this->curLight)).StaticCast<  ::flixel::FlxSprite >()->set_visible(true);
            			}
HXLINE(2984)			bool _hx_tmp;
HXDLIN(2984)			bool _hx_tmp1;
HXDLIN(2984)			bool _hx_tmp2;
HXDLIN(2984)			if ((::hx::Mod(this->totalBeats,8) == 4)) {
HXLINE(2984)				_hx_tmp2 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 30);
            			}
            			else {
HXLINE(2984)				_hx_tmp2 = false;
            			}
HXDLIN(2984)			if (_hx_tmp2) {
HXLINE(2984)				_hx_tmp1 = !(this->trainMoving);
            			}
            			else {
HXLINE(2984)				_hx_tmp1 = false;
            			}
HXDLIN(2984)			if (_hx_tmp1) {
HXLINE(2984)				_hx_tmp = (this->trainCooldown > 8);
            			}
            			else {
HXLINE(2984)				_hx_tmp = false;
            			}
HXDLIN(2984)			if (_hx_tmp) {
HXLINE(2986)				this->trainCooldown = ::flixel::FlxG_obj::random->_hx_int(-4,0,null());
HXLINE(2987)				this->trainStart();
            			}
HXLINE(2967)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE(2951)			this->bgGirls->dance();
HXDLIN(2951)			goto _hx_goto_133;
            		}
            		_hx_goto_133:;
HXLINE(2991)		bool _hx_tmp9;
HXDLIN(2991)		bool _hx_tmp10;
HXDLIN(2991)		if ((::PlayState_obj::curStage == HX_("spooky",eb,bd,9e,c1))) {
HXLINE(2991)			_hx_tmp10 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10);
            		}
            		else {
HXLINE(2991)			_hx_tmp10 = false;
            		}
HXDLIN(2991)		if (_hx_tmp10) {
HXLINE(2991)			_hx_tmp9 = (this->curBeat > (this->lightningStrikeBeat + this->lightningOffset));
            		}
            		else {
HXLINE(2991)			_hx_tmp9 = false;
            		}
HXDLIN(2991)		if (_hx_tmp9) {
HXLINE(2993)			this->lightningStrikeShit();
            		}
            	}


bool PlayState_obj::sectionContainsBfNotes(int section){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2999_sectionContainsBfNotes)
HXLINE(3000)		::cpp::VirtualArray notes = ( (::cpp::VirtualArray)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXLINE(3001)		bool mustHit = ( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(3003)		{
HXLINE(3003)			int _g = 0;
HXDLIN(3003)			while((_g < notes->get_length())){
HXLINE(3003)				 ::Dynamic x = notes->__get(_g);
HXDLIN(3003)				_g = (_g + 1);
HXLINE(3004)				if (mustHit) {
HXLINE(3004)					if (::hx::IsLess( x->__GetItem(1),4 )) {
HXLINE(3004)						return true;
            					}
            				}
            				else {
HXLINE(3005)					if (::hx::IsGreater( x->__GetItem(1),3 )) {
HXLINE(3005)						return true;
            					}
            				}
            			}
            		}
HXLINE(3008)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,sectionContainsBfNotes,return )

bool PlayState_obj::sectionContainsOppNotes(int section){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3011_sectionContainsOppNotes)
HXLINE(3012)		::cpp::VirtualArray notes = ( (::cpp::VirtualArray)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXLINE(3013)		bool mustHit = ( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(3015)		{
HXLINE(3015)			int _g = 0;
HXDLIN(3015)			while((_g < notes->get_length())){
HXLINE(3015)				 ::Dynamic x = notes->__get(_g);
HXDLIN(3015)				_g = (_g + 1);
HXLINE(3016)				if (mustHit) {
HXLINE(3016)					if (::hx::IsGreater( x->__GetItem(1),3 )) {
HXLINE(3016)						return true;
            					}
            				}
            				else {
HXLINE(3017)					if (::hx::IsLess( x->__GetItem(1),4 )) {
HXLINE(3017)						return true;
            					}
            				}
            			}
            		}
HXLINE(3020)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,sectionContainsOppNotes,return )

void PlayState_obj::camFocusOpponent(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3023_camFocusOpponent)
HXLINE(3025)		Float followX = (this->dad->getMidpoint(null())->x + 150);
HXLINE(3026)		Float followY = (this->dad->getMidpoint(null())->y - ( (Float)(100) ));
HXLINE(3029)		::String _hx_switch_0 = this->dad->curCharacter;
            		if (  (_hx_switch_0==HX_("mom",cb,16,53,00)) ||  (_hx_switch_0==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE(3034)			followY = this->dad->getMidpoint(null())->y;
HXDLIN(3034)			goto _hx_goto_146;
            		}
            		if (  (_hx_switch_0==HX_("senpai",3c,df,8d,6b)) ){
HXLINE(3036)			followY = (this->dad->getMidpoint(null())->y - ( (Float)(430) ));
HXLINE(3037)			followX = (this->dad->getMidpoint(null())->x - ( (Float)(100) ));
HXLINE(3035)			goto _hx_goto_146;
            		}
            		if (  (_hx_switch_0==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(3039)			followY = (this->dad->getMidpoint(null())->y - ( (Float)(430) ));
HXLINE(3040)			followX = (this->dad->getMidpoint(null())->x - ( (Float)(100) ));
HXLINE(3038)			goto _hx_goto_146;
            		}
            		if (  (_hx_switch_0==HX_("spirit",31,bb,a9,bd)) ){
HXLINE(3042)			followY = this->dad->getMidpoint(null())->y;
HXDLIN(3042)			goto _hx_goto_146;
            		}
            		if (  (_hx_switch_0==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE(3032)			followY = (this->dad->getMidpoint(null())->y - ( (Float)(30) ));
HXDLIN(3032)			goto _hx_goto_146;
            		}
            		_hx_goto_146:;
HXLINE(3048)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(3050)			this->camChangeZoom(((Float)1.3),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )),::flixel::tweens::FlxEase_obj::elasticInOut_dyn(),null());
            		}
HXLINE(3053)		this->camMove(followX,followY,((Float)1.9),::flixel::tweens::FlxEase_obj::quintOut_dyn(),HX_("dad",47,36,4c,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,camFocusOpponent,(void))

void PlayState_obj::camFocusBF(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3056_camFocusBF)
HXLINE(3058)		Float followX = (this->boyfriend->getMidpoint(null())->x - ( (Float)(100) ));
HXLINE(3059)		Float followY = (this->boyfriend->getMidpoint(null())->y - ( (Float)(100) ));
HXLINE(3061)		::String _hx_switch_0 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE(3066)			followX = (this->boyfriend->getMidpoint(null())->x - ( (Float)(300) ));
HXDLIN(3066)			goto _hx_goto_148;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE(3068)			followY = (this->boyfriend->getMidpoint(null())->y - ( (Float)(200) ));
HXDLIN(3068)			goto _hx_goto_148;
            		}
            		if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE(3070)			followX = (this->boyfriend->getMidpoint(null())->x - ( (Float)(200) ));
HXLINE(3071)			followY = (this->boyfriend->getMidpoint(null())->y - ( (Float)(225) ));
HXLINE(3069)			goto _hx_goto_148;
            		}
            		if (  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(3073)			followX = (this->boyfriend->getMidpoint(null())->x - ( (Float)(200) ));
HXLINE(3074)			followY = (this->boyfriend->getMidpoint(null())->y - ( (Float)(225) ));
HXLINE(3072)			goto _hx_goto_148;
            		}
            		if (  (_hx_switch_0==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE(3064)			followY = (this->boyfriend->getMidpoint(null())->y - ( (Float)(125) ));
HXDLIN(3064)			goto _hx_goto_148;
            		}
            		_hx_goto_148:;
HXLINE(3077)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(3079)			this->camChangeZoom(( (Float)(1) ),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )),::flixel::tweens::FlxEase_obj::elasticInOut_dyn(),null());
            		}
HXLINE(3082)		this->camMove(followX,followY,((Float)1.9),::flixel::tweens::FlxEase_obj::quintOut_dyn(),HX_("bf",c4,55,00,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,camFocusBF,(void))

void PlayState_obj::camMove(Float _x,Float _y,Float _time, ::Dynamic _ease,::String __o__focus, ::Dynamic _onComplete){
            		::String _focus = __o__focus;
            		if (::hx::IsNull(__o__focus)) _focus = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3085_camMove)
HXLINE(3087)		if (::hx::IsNull( _onComplete )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3088_camMove)
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3088)			_onComplete =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE(3091)		this->camTween->cancel();
HXLINE(3092)		this->camTween = ::flixel::tweens::FlxTween_obj::tween(this->camFollow, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),_x)
            			->setFixed(1,HX_("y",79,00,00,00),_y)),_time, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),_ease)
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d),_onComplete)));
HXLINE(3093)		this->camFocus = _focus;
            	}


HX_DEFINE_DYNAMIC_FUNC6(PlayState_obj,camMove,(void))

void PlayState_obj::camChangeZoom(Float _zoom,Float _time, ::Dynamic _ease, ::Dynamic _onComplete){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3097_camChangeZoom)
HXLINE(3099)		if (::hx::IsNull( _onComplete )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3100_camChangeZoom)
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3100)			_onComplete =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE(3103)		this->camZoomTween->cancel();
HXLINE(3104)		this->camZoomTween = ::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),_zoom)),_time, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),_ease)
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d),_onComplete)));
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,camChangeZoom,(void))

void PlayState_obj::uiChangeZoom(Float _zoom,Float _time, ::Dynamic _ease, ::Dynamic _onComplete){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3108_uiChangeZoom)
HXLINE(3110)		if (::hx::IsNull( _onComplete )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3111_uiChangeZoom)
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3111)			_onComplete =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE(3114)		this->uiZoomTween->cancel();
HXLINE(3115)		this->uiZoomTween = ::flixel::tweens::FlxTween_obj::tween(this->camHUD, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),_zoom)),_time, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),_ease)
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d),_onComplete)));
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,uiChangeZoom,(void))

void PlayState_obj::uiBop( ::Dynamic __o__camZoom, ::Dynamic __o__uiZoom){
            		 ::Dynamic _camZoom = __o__camZoom;
            		if (::hx::IsNull(__o__camZoom)) _camZoom = ((Float)0.01);
            		 ::Dynamic _uiZoom = __o__uiZoom;
            		if (::hx::IsNull(__o__uiZoom)) _uiZoom = ((Float)0.02);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3119_uiBop)
HXLINE(3121)		if (this->autoZoom) {
HXLINE(3122)			this->camZoomTween->cancel();
HXLINE(3123)			::flixel::FlxG_obj::camera->set_zoom((this->defaultCamZoom + _camZoom));
HXLINE(3124)			this->camChangeZoom(this->defaultCamZoom,((Float)0.6),::flixel::tweens::FlxEase_obj::quintOut_dyn(),null());
            		}
HXLINE(3127)		if (this->autoUi) {
HXLINE(3128)			this->uiZoomTween->cancel();
HXLINE(3129)			this->camHUD->set_zoom((1 + _uiZoom));
HXLINE(3130)			this->uiChangeZoom(( (Float)(1) ),((Float)0.6),::flixel::tweens::FlxEase_obj::quintOut_dyn(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,uiBop,(void))

bool PlayState_obj::inRange(Float a,Float b,Float tolerance){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3136_inRange)
HXDLIN(3136)		if ((a <= (b + tolerance))) {
HXDLIN(3136)			return (a >= (b - tolerance));
            		}
            		else {
HXDLIN(3136)			return false;
            		}
HXDLIN(3136)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,inRange,return )

 ::PlayState PlayState_obj::instance;

::String PlayState_obj::curStage;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

::String PlayState_obj::returnLocation;

int PlayState_obj::returnSong;

::Array< ::String > PlayState_obj::stageSongs;

::Array< ::String > PlayState_obj::spookySongs;

::Array< ::String > PlayState_obj::phillySongs;

::Array< ::String > PlayState_obj::limoSongs;

::Array< ::String > PlayState_obj::mallSongs;

::Array< ::String > PlayState_obj::evilMallSongs;

::Array< ::String > PlayState_obj::schoolSongs;

::Array< ::String > PlayState_obj::schoolScared;

::Array< ::String > PlayState_obj::evilSchoolSongs;

::Array< ::String > PlayState_obj::pixelSongs;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

int PlayState_obj::minCombo;

int PlayState_obj::campaignScore;

Float PlayState_obj::daPixelZoom;

bool PlayState_obj::sectionStart;

int PlayState_obj::sectionStartPoint;

Float PlayState_obj::sectionStartTime;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(canHit,"canHit");
	HX_MARK_MEMBER_NAME(noMissCount,"noMissCount");
	HX_MARK_MEMBER_NAME(camFocus,"camFocus");
	HX_MARK_MEMBER_NAME(camTween,"camTween");
	HX_MARK_MEMBER_NAME(camZoomTween,"camZoomTween");
	HX_MARK_MEMBER_NAME(uiZoomTween,"uiZoomTween");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(autoCam,"autoCam");
	HX_MARK_MEMBER_NAME(autoZoom,"autoZoom");
	HX_MARK_MEMBER_NAME(autoUi,"autoUi");
	HX_MARK_MEMBER_NAME(bopSpeed,"bopSpeed");
	HX_MARK_MEMBER_NAME(sectionHasOppNotes,"sectionHasOppNotes");
	HX_MARK_MEMBER_NAME(sectionHasBFNotes,"sectionHasBFNotes");
	HX_MARK_MEMBER_NAME(sectionHaveNotes,"sectionHaveNotes");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(gf,"gf");
	HX_MARK_MEMBER_NAME(boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(skipListener,"skipListener");
	HX_MARK_MEMBER_NAME(upTime,"upTime");
	HX_MARK_MEMBER_NAME(downTime,"downTime");
	HX_MARK_MEMBER_NAME(leftTime,"leftTime");
	HX_MARK_MEMBER_NAME(rightTime,"rightTime");
	HX_MARK_MEMBER_NAME(upPress,"upPress");
	HX_MARK_MEMBER_NAME(downPress,"downPress");
	HX_MARK_MEMBER_NAME(leftPress,"leftPress");
	HX_MARK_MEMBER_NAME(rightPress,"rightPress");
	HX_MARK_MEMBER_NAME(upRelease,"upRelease");
	HX_MARK_MEMBER_NAME(downRelease,"downRelease");
	HX_MARK_MEMBER_NAME(leftRelease,"leftRelease");
	HX_MARK_MEMBER_NAME(rightRelease,"rightRelease");
	HX_MARK_MEMBER_NAME(upHold,"upHold");
	HX_MARK_MEMBER_NAME(downHold,"downHold");
	HX_MARK_MEMBER_NAME(leftHold,"leftHold");
	HX_MARK_MEMBER_NAME(rightHold,"rightHold");
	HX_MARK_MEMBER_NAME(invuln,"invuln");
	HX_MARK_MEMBER_NAME(invulnCount,"invulnCount");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(enemyStrums,"enemyStrums");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(misses,"misses");
	HX_MARK_MEMBER_NAME(accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(camOverlay,"camOverlay");
	HX_MARK_MEMBER_NAME(comboUI,"comboUI");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_MARK_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_MARK_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_MARK_MEMBER_NAME(trainSound,"trainSound");
	HX_MARK_MEMBER_NAME(limo,"limo");
	HX_MARK_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_MARK_MEMBER_NAME(fastCar,"fastCar");
	HX_MARK_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_MARK_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_MARK_MEMBER_NAME(santa,"santa");
	HX_MARK_MEMBER_NAME(bgGirls,"bgGirls");
	HX_MARK_MEMBER_NAME(talking,"talking");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(dadBeats,"dadBeats");
	HX_MARK_MEMBER_NAME(bfBeats,"bfBeats");
	HX_MARK_MEMBER_NAME(meta,"meta");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_MARK_MEMBER_NAME(trainMoving,"trainMoving");
	HX_MARK_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_MARK_MEMBER_NAME(trainCars,"trainCars");
	HX_MARK_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_MARK_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_MARK_MEMBER_NAME(startedMoving,"startedMoving");
	HX_MARK_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_MARK_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_MARK_MEMBER_NAME(curLight,"curLight");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(canHit,"canHit");
	HX_VISIT_MEMBER_NAME(noMissCount,"noMissCount");
	HX_VISIT_MEMBER_NAME(camFocus,"camFocus");
	HX_VISIT_MEMBER_NAME(camTween,"camTween");
	HX_VISIT_MEMBER_NAME(camZoomTween,"camZoomTween");
	HX_VISIT_MEMBER_NAME(uiZoomTween,"uiZoomTween");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(autoCam,"autoCam");
	HX_VISIT_MEMBER_NAME(autoZoom,"autoZoom");
	HX_VISIT_MEMBER_NAME(autoUi,"autoUi");
	HX_VISIT_MEMBER_NAME(bopSpeed,"bopSpeed");
	HX_VISIT_MEMBER_NAME(sectionHasOppNotes,"sectionHasOppNotes");
	HX_VISIT_MEMBER_NAME(sectionHasBFNotes,"sectionHasBFNotes");
	HX_VISIT_MEMBER_NAME(sectionHaveNotes,"sectionHaveNotes");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(gf,"gf");
	HX_VISIT_MEMBER_NAME(boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(skipListener,"skipListener");
	HX_VISIT_MEMBER_NAME(upTime,"upTime");
	HX_VISIT_MEMBER_NAME(downTime,"downTime");
	HX_VISIT_MEMBER_NAME(leftTime,"leftTime");
	HX_VISIT_MEMBER_NAME(rightTime,"rightTime");
	HX_VISIT_MEMBER_NAME(upPress,"upPress");
	HX_VISIT_MEMBER_NAME(downPress,"downPress");
	HX_VISIT_MEMBER_NAME(leftPress,"leftPress");
	HX_VISIT_MEMBER_NAME(rightPress,"rightPress");
	HX_VISIT_MEMBER_NAME(upRelease,"upRelease");
	HX_VISIT_MEMBER_NAME(downRelease,"downRelease");
	HX_VISIT_MEMBER_NAME(leftRelease,"leftRelease");
	HX_VISIT_MEMBER_NAME(rightRelease,"rightRelease");
	HX_VISIT_MEMBER_NAME(upHold,"upHold");
	HX_VISIT_MEMBER_NAME(downHold,"downHold");
	HX_VISIT_MEMBER_NAME(leftHold,"leftHold");
	HX_VISIT_MEMBER_NAME(rightHold,"rightHold");
	HX_VISIT_MEMBER_NAME(invuln,"invuln");
	HX_VISIT_MEMBER_NAME(invulnCount,"invulnCount");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(enemyStrums,"enemyStrums");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(misses,"misses");
	HX_VISIT_MEMBER_NAME(accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(camOverlay,"camOverlay");
	HX_VISIT_MEMBER_NAME(comboUI,"comboUI");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_VISIT_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_VISIT_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_VISIT_MEMBER_NAME(trainSound,"trainSound");
	HX_VISIT_MEMBER_NAME(limo,"limo");
	HX_VISIT_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_VISIT_MEMBER_NAME(fastCar,"fastCar");
	HX_VISIT_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_VISIT_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_VISIT_MEMBER_NAME(santa,"santa");
	HX_VISIT_MEMBER_NAME(bgGirls,"bgGirls");
	HX_VISIT_MEMBER_NAME(talking,"talking");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(dadBeats,"dadBeats");
	HX_VISIT_MEMBER_NAME(bfBeats,"bfBeats");
	HX_VISIT_MEMBER_NAME(meta,"meta");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_VISIT_MEMBER_NAME(trainMoving,"trainMoving");
	HX_VISIT_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_VISIT_MEMBER_NAME(trainCars,"trainCars");
	HX_VISIT_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_VISIT_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_VISIT_MEMBER_NAME(startedMoving,"startedMoving");
	HX_VISIT_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_VISIT_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_VISIT_MEMBER_NAME(curLight,"curLight");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { return ::hx::Val( gf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"limo") ) { return ::hx::Val( limo ); }
		if (HX_FIELD_EQ(inName,"meta") ) { return ::hx::Val( meta ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		if (HX_FIELD_EQ(inName,"santa") ) { return ::hx::Val( santa ); }
		if (HX_FIELD_EQ(inName,"keyUp") ) { return ::hx::Val( keyUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"uiBop") ) { return ::hx::Val( uiBop_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"canHit") ) { return ::hx::Val( canHit ); }
		if (HX_FIELD_EQ(inName,"autoUi") ) { return ::hx::Val( autoUi ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"upTime") ) { return ::hx::Val( upTime ); }
		if (HX_FIELD_EQ(inName,"upHold") ) { return ::hx::Val( upHold ); }
		if (HX_FIELD_EQ(inName,"invuln") ) { return ::hx::Val( invuln ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"misses") ) { return ::hx::Val( misses ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"autoCam") ) { return ::hx::Val( autoCam ); }
		if (HX_FIELD_EQ(inName,"upPress") ) { return ::hx::Val( upPress ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"comboUI") ) { return ::hx::Val( comboUI ); }
		if (HX_FIELD_EQ(inName,"fastCar") ) { return ::hx::Val( fastCar ); }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { return ::hx::Val( bgGirls ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking ); }
		if (HX_FIELD_EQ(inName,"bfBeats") ) { return ::hx::Val( bfBeats ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyDown") ) { return ::hx::Val( keyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"camMove") ) { return ::hx::Val( camMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"inRange") ) { return ::hx::Val( inRange_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"camFocus") ) { return ::hx::Val( camFocus ); }
		if (HX_FIELD_EQ(inName,"camTween") ) { return ::hx::Val( camTween ); }
		if (HX_FIELD_EQ(inName,"autoZoom") ) { return ::hx::Val( autoZoom ); }
		if (HX_FIELD_EQ(inName,"bopSpeed") ) { return ::hx::Val( bopSpeed ); }
		if (HX_FIELD_EQ(inName,"downTime") ) { return ::hx::Val( downTime ); }
		if (HX_FIELD_EQ(inName,"leftTime") ) { return ::hx::Val( leftTime ); }
		if (HX_FIELD_EQ(inName,"downHold") ) { return ::hx::Val( downHold ); }
		if (HX_FIELD_EQ(inName,"leftHold") ) { return ::hx::Val( leftHold ); }
		if (HX_FIELD_EQ(inName,"accuracy") ) { return ::hx::Val( accuracy ); }
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"dadBeats") ) { return ::hx::Val( dadBeats ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"keyCheck") ) { return ::hx::Val( keyCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"curLight") ) { return ::hx::Val( curLight ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { return ::hx::Val( boyfriend ); }
		if (HX_FIELD_EQ(inName,"rightTime") ) { return ::hx::Val( rightTime ); }
		if (HX_FIELD_EQ(inName,"downPress") ) { return ::hx::Val( downPress ); }
		if (HX_FIELD_EQ(inName,"leftPress") ) { return ::hx::Val( leftPress ); }
		if (HX_FIELD_EQ(inName,"upRelease") ) { return ::hx::Val( upRelease ); }
		if (HX_FIELD_EQ(inName,"rightHold") ) { return ::hx::Val( rightHold ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCars") ) { return ::hx::Val( trainCars ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightPress") ) { return ::hx::Val( rightPress ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"camOverlay") ) { return ::hx::Val( camOverlay ); }
		if (HX_FIELD_EQ(inName,"trainSound") ) { return ::hx::Val( trainSound ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCanMiss") ) { return ::hx::Val( setCanMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainStart") ) { return ::hx::Val( trainStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainReset") ) { return ::hx::Val( trainReset_dyn() ); }
		if (HX_FIELD_EQ(inName,"camFocusBF") ) { return ::hx::Val( camFocusBF_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"noMissCount") ) { return ::hx::Val( noMissCount ); }
		if (HX_FIELD_EQ(inName,"uiZoomTween") ) { return ::hx::Val( uiZoomTween ); }
		if (HX_FIELD_EQ(inName,"downRelease") ) { return ::hx::Val( downRelease ); }
		if (HX_FIELD_EQ(inName,"leftRelease") ) { return ::hx::Val( leftRelease ); }
		if (HX_FIELD_EQ(inName,"invulnCount") ) { return ::hx::Val( invulnCount ); }
		if (HX_FIELD_EQ(inName,"enemyStrums") ) { return ::hx::Val( enemyStrums ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { return ::hx::Val( halloweenBG ); }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { return ::hx::Val( phillyTrain ); }
		if (HX_FIELD_EQ(inName,"schoolIntro") ) { return ::hx::Val( schoolIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShitAuto") ) { return ::hx::Val( keyShitAuto_dyn() ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { return ::hx::Val( trainMoving ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camZoomTween") ) { return ::hx::Val( camZoomTween ); }
		if (HX_FIELD_EQ(inName,"skipListener") ) { return ::hx::Val( skipListener ); }
		if (HX_FIELD_EQ(inName,"rightRelease") ) { return ::hx::Val( rightRelease ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { return ::hx::Val( playerStrums ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { return ::hx::Val( upperBoppers ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"badNoteCheck") ) { return ::hx::Val( badNoteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetFastCar") ) { return ::hx::Val( resetFastCar_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarDrive") ) { return ::hx::Val( fastCarDrive_dyn() ); }
		if (HX_FIELD_EQ(inName,"uiChangeZoom") ) { return ::hx::Val( uiChangeZoom_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { return ::hx::Val( bottomBoppers ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"truncateFloat") ) { return ::hx::Val( truncateFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { return ::hx::Val( trainCooldown ); }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { return ::hx::Val( startedMoving ); }
		if (HX_FIELD_EQ(inName,"camChangeZoom") ) { return ::hx::Val( camChangeZoom_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { return ::hx::Val( grpLimoDancers ); }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { return ::hx::Val( defaultCamZoom ); }
		if (HX_FIELD_EQ(inName,"updateAccuracy") ) { return ::hx::Val( updateAccuracy_dyn() ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { return ::hx::Val( trainFinishing ); }
		if (HX_FIELD_EQ(inName,"updateTrainPos") ) { return ::hx::Val( updateTrainPos_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { return ::hx::Val( fastCarCanDrive ); }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { return ::hx::Val( lightningOffset ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sectionHaveNotes") ) { return ::hx::Val( sectionHaveNotes ); }
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { return ::hx::Val( phillyCityLights ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { return ::hx::Val( trainFrameTiming ); }
		if (HX_FIELD_EQ(inName,"camFocusOpponent") ) { return ::hx::Val( camFocusOpponent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"sectionHasBFNotes") ) { return ::hx::Val( sectionHasBFNotes ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sectionHasOppNotes") ) { return ::hx::Val( sectionHasOppNotes ); }
		if (HX_FIELD_EQ(inName,"noteMissWrongPress") ) { return ::hx::Val( noteMissWrongPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"setBoyfriendInvuln") ) { return ::hx::Val( setBoyfriendInvuln_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"lightningStrikeShit") ) { return ::hx::Val( lightningStrikeShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { return ::hx::Val( lightningStrikeBeat ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"sectionContainsBfNotes") ) { return ::hx::Val( sectionContainsBfNotes_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"sectionContainsOppNotes") ) { return ::hx::Val( sectionContainsOppNotes_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		if (HX_FIELD_EQ(inName,"minCombo") ) { outValue = ( minCombo ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"limoSongs") ) { outValue = ( limoSongs ); return true; }
		if (HX_FIELD_EQ(inName,"mallSongs") ) { outValue = ( mallSongs ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"returnSong") ) { outValue = ( returnSong ); return true; }
		if (HX_FIELD_EQ(inName,"stageSongs") ) { outValue = ( stageSongs ); return true; }
		if (HX_FIELD_EQ(inName,"pixelSongs") ) { outValue = ( pixelSongs ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"spookySongs") ) { outValue = ( spookySongs ); return true; }
		if (HX_FIELD_EQ(inName,"phillySongs") ) { outValue = ( phillySongs ); return true; }
		if (HX_FIELD_EQ(inName,"schoolSongs") ) { outValue = ( schoolSongs ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"schoolScared") ) { outValue = ( schoolScared ); return true; }
		if (HX_FIELD_EQ(inName,"sectionStart") ) { outValue = ( sectionStart ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"evilMallSongs") ) { outValue = ( evilMallSongs ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"returnLocation") ) { outValue = ( returnLocation ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
		if (HX_FIELD_EQ(inName,"evilSchoolSongs") ) { outValue = ( evilSchoolSongs ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { outValue = ( sectionStartTime ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"sectionStartPoint") ) { outValue = ( sectionStartPoint ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"limo") ) { limo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"meta") ) { meta=inValue.Cast<  ::SongMetaTags >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"santa") ) { santa=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"canHit") ) { canHit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoUi") ) { autoUi=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upTime") ) { upTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upHold") ) { upHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invuln") ) { invuln=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"misses") ) { misses=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"autoCam") ) { autoCam=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upPress") ) { upPress=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboUI") ) { comboUI=inValue.Cast<  ::ComboPopup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCar") ) { fastCar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { bgGirls=inValue.Cast<  ::BackgroundGirls >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talking") ) { talking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bfBeats") ) { bfBeats=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"camFocus") ) { camFocus=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camTween") ) { camTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoZoom") ) { autoZoom=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bopSpeed") ) { bopSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downTime") ) { downTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftTime") ) { leftTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downHold") ) { downHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftHold") ) { leftHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dadBeats") ) { dadBeats=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLight") ) { curLight=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=inValue.Cast<  ::Boyfriend >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightTime") ) { rightTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downPress") ) { downPress=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftPress") ) { leftPress=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upRelease") ) { upRelease=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightHold") ) { rightHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCars") ) { trainCars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightPress") ) { rightPress=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camOverlay") ) { camOverlay=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { trainSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"noMissCount") ) { noMissCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uiZoomTween") ) { uiZoomTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downRelease") ) { downRelease=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftRelease") ) { leftRelease=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invulnCount") ) { invulnCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enemyStrums") ) { enemyStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { halloweenBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { phillyTrain=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { trainMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camZoomTween") ) { camZoomTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipListener") ) { skipListener=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightRelease") ) { rightRelease=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { upperBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { bottomBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { trainCooldown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { startedMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { grpLimoDancers=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { trainFinishing=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { fastCarCanDrive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { lightningOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sectionHaveNotes") ) { sectionHaveNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { phillyCityLights=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { trainFrameTiming=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"sectionHasBFNotes") ) { sectionHasBFNotes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sectionHasOppNotes") ) { sectionHasOppNotes=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { lightningStrikeBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"minCombo") ) { minCombo=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"limoSongs") ) { limoSongs=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"mallSongs") ) { mallSongs=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"returnSong") ) { returnSong=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"stageSongs") ) { stageSongs=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"pixelSongs") ) { pixelSongs=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"spookySongs") ) { spookySongs=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"phillySongs") ) { phillySongs=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"schoolSongs") ) { schoolSongs=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"schoolScared") ) { schoolScared=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"sectionStart") ) { sectionStart=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"evilMallSongs") ) { evilMallSongs=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"returnLocation") ) { returnLocation=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"evilSchoolSongs") ) { evilSchoolSongs=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { sectionStartTime=ioValue.Cast< Float >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"sectionStartPoint") ) { sectionStartPoint=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("canHit",23,74,1f,b8));
	outFields->push(HX_("noMissCount",b2,ff,e8,2e));
	outFields->push(HX_("camFocus",49,45,c1,0c));
	outFields->push(HX_("camTween",dc,8f,a8,21));
	outFields->push(HX_("camZoomTween",49,64,14,60));
	outFields->push(HX_("uiZoomTween",64,81,43,03));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("autoCam",e0,5b,70,9d));
	outFields->push(HX_("autoZoom",22,92,1e,34));
	outFields->push(HX_("autoUi",a3,23,81,73));
	outFields->push(HX_("bopSpeed",84,9e,ad,c9));
	outFields->push(HX_("sectionHasOppNotes",27,cd,a6,7e));
	outFields->push(HX_("sectionHasBFNotes",08,26,76,57));
	outFields->push(HX_("sectionHaveNotes",14,d6,07,5e));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("gf",1f,5a,00,00));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("skipListener",13,ea,01,a0));
	outFields->push(HX_("upTime",08,28,78,7c));
	outFields->push(HX_("downTime",8f,c9,e4,81));
	outFields->push(HX_("leftTime",b4,0f,f8,53));
	outFields->push(HX_("rightTime",09,22,c3,b7));
	outFields->push(HX_("upPress",28,73,fd,24));
	outFields->push(HX_("downPress",c1,27,9e,de));
	outFields->push(HX_("leftPress",fc,41,68,dd));
	outFields->push(HX_("rightPress",07,3a,4d,cb));
	outFields->push(HX_("upRelease",ac,98,a5,94));
	outFields->push(HX_("downRelease",85,65,4f,7f));
	outFields->push(HX_("leftRelease",80,c4,80,58));
	outFields->push(HX_("rightRelease",4b,15,9c,43));
	outFields->push(HX_("upHold",3a,25,8e,74));
	outFields->push(HX_("downHold",c1,c6,fa,79));
	outFields->push(HX_("leftHold",e6,0c,0e,4c));
	outFields->push(HX_("rightHold",3b,1f,d9,af));
	outFields->push(HX_("invuln",e6,05,e5,9f));
	outFields->push(HX_("invulnCount",09,8d,6e,3e));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("playerStrums",4b,e1,2a,0d));
	outFields->push(HX_("enemyStrums",72,af,eb,f8));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("misses",6a,62,54,56));
	outFields->push(HX_("accuracy",39,06,c5,ff));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("camOverlay",41,27,21,1b));
	outFields->push(HX_("comboUI",22,a2,32,7a));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("halloweenBG",92,b2,88,5c));
	outFields->push(HX_("phillyCityLights",30,e0,12,1f));
	outFields->push(HX_("phillyTrain",80,9b,65,bb));
	outFields->push(HX_("trainSound",e7,b3,e5,da));
	outFields->push(HX_("limo",1f,17,b3,47));
	outFields->push(HX_("grpLimoDancers",70,18,93,51));
	outFields->push(HX_("fastCar",d8,f2,1f,de));
	outFields->push(HX_("upperBoppers",37,47,71,21));
	outFields->push(HX_("bottomBoppers",ce,2c,ba,6e));
	outFields->push(HX_("santa",8d,45,86,77));
	outFields->push(HX_("bgGirls",92,16,2b,41));
	outFields->push(HX_("talking",36,57,a8,16));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("defaultCamZoom",01,50,2a,0b));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("dadBeats",76,7e,85,58));
	outFields->push(HX_("bfBeats",d9,19,1d,f7));
	outFields->push(HX_("meta",c5,4a,59,48));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("fastCarCanDrive",d2,f1,13,ee));
	outFields->push(HX_("trainMoving",76,00,99,48));
	outFields->push(HX_("trainFrameTiming",af,67,10,1b));
	outFields->push(HX_("trainCars",c7,61,9c,4d));
	outFields->push(HX_("trainFinishing",87,15,8c,24));
	outFields->push(HX_("trainCooldown",93,a3,58,0c));
	outFields->push(HX_("startedMoving",af,76,97,fb));
	outFields->push(HX_("lightningStrikeBeat",72,e2,3d,b6));
	outFields->push(HX_("lightningOffset",3d,a8,e5,e6));
	outFields->push(HX_("curLight",36,8b,aa,bc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(PlayState_obj,canHit),HX_("canHit",23,74,1f,b8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,noMissCount),HX_("noMissCount",b2,ff,e8,2e)},
	{::hx::fsString,(int)offsetof(PlayState_obj,camFocus),HX_("camFocus",49,45,c1,0c)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,camTween),HX_("camTween",dc,8f,a8,21)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,camZoomTween),HX_("camZoomTween",49,64,14,60)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,uiZoomTween),HX_("uiZoomTween",64,81,43,03)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,autoCam),HX_("autoCam",e0,5b,70,9d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,autoZoom),HX_("autoZoom",22,92,1e,34)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,autoUi),HX_("autoUi",a3,23,81,73)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,bopSpeed),HX_("bopSpeed",84,9e,ad,c9)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,sectionHasOppNotes),HX_("sectionHasOppNotes",27,cd,a6,7e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,sectionHasBFNotes),HX_("sectionHasBFNotes",08,26,76,57)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,sectionHaveNotes),HX_("sectionHaveNotes",14,d6,07,5e)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(PlayState_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(PlayState_obj,gf),HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(PlayState_obj,boyfriend),HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipListener),HX_("skipListener",13,ea,01,a0)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,upTime),HX_("upTime",08,28,78,7c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,downTime),HX_("downTime",8f,c9,e4,81)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,leftTime),HX_("leftTime",b4,0f,f8,53)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,rightTime),HX_("rightTime",09,22,c3,b7)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,upPress),HX_("upPress",28,73,fd,24)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,downPress),HX_("downPress",c1,27,9e,de)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,leftPress),HX_("leftPress",fc,41,68,dd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,rightPress),HX_("rightPress",07,3a,4d,cb)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,upRelease),HX_("upRelease",ac,98,a5,94)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,downRelease),HX_("downRelease",85,65,4f,7f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,leftRelease),HX_("leftRelease",80,c4,80,58)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,rightRelease),HX_("rightRelease",4b,15,9c,43)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,upHold),HX_("upHold",3a,25,8e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,downHold),HX_("downHold",c1,c6,fa,79)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,leftHold),HX_("leftHold",e6,0c,0e,4c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,rightHold),HX_("rightHold",3b,1f,d9,af)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,invuln),HX_("invuln",e6,05,e5,9f)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,invulnCount),HX_("invulnCount",09,8d,6e,3e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,playerStrums),HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,enemyStrums),HX_("enemyStrums",72,af,eb,f8)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,misses),HX_("misses",6a,62,54,56)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracy),HX_("accuracy",39,06,c5,ff)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camOverlay),HX_("camOverlay",41,27,21,1b)},
	{::hx::fsObject /*  ::ComboPopup */ ,(int)offsetof(PlayState_obj,comboUI),HX_("comboUI",22,a2,32,7a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,halloweenBG),HX_("halloweenBG",92,b2,88,5c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,phillyCityLights),HX_("phillyCityLights",30,e0,12,1f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,phillyTrain),HX_("phillyTrain",80,9b,65,bb)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,trainSound),HX_("trainSound",e7,b3,e5,da)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,limo),HX_("limo",1f,17,b3,47)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpLimoDancers),HX_("grpLimoDancers",70,18,93,51)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,fastCar),HX_("fastCar",d8,f2,1f,de)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,upperBoppers),HX_("upperBoppers",37,47,71,21)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,bottomBoppers),HX_("bottomBoppers",ce,2c,ba,6e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,santa),HX_("santa",8d,45,86,77)},
	{::hx::fsObject /*  ::BackgroundGirls */ ,(int)offsetof(PlayState_obj,bgGirls),HX_("bgGirls",92,16,2b,41)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talking),HX_("talking",36,57,a8,16)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,defaultCamZoom),HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PlayState_obj,dadBeats),HX_("dadBeats",76,7e,85,58)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PlayState_obj,bfBeats),HX_("bfBeats",d9,19,1d,f7)},
	{::hx::fsObject /*  ::SongMetaTags */ ,(int)offsetof(PlayState_obj,meta),HX_("meta",c5,4a,59,48)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fastCarCanDrive),HX_("fastCarCanDrive",d2,f1,13,ee)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainMoving),HX_("trainMoving",76,00,99,48)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,trainFrameTiming),HX_("trainFrameTiming",af,67,10,1b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCars),HX_("trainCars",c7,61,9c,4d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainFinishing),HX_("trainFinishing",87,15,8c,24)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCooldown),HX_("trainCooldown",93,a3,58,0c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedMoving),HX_("startedMoving",af,76,97,fb)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningStrikeBeat),HX_("lightningStrikeBeat",72,e2,3d,b6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningOffset),HX_("lightningOffset",3d,a8,e5,e6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curLight),HX_("curLight",36,8b,aa,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsString,(void *) &PlayState_obj::returnLocation,HX_("returnLocation",05,ff,61,ea)},
	{::hx::fsInt,(void *) &PlayState_obj::returnSong,HX_("returnSong",a5,0c,87,e8)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::stageSongs,HX_("stageSongs",60,8b,17,d4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::spookySongs,HX_("spookySongs",13,95,a6,1e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::phillySongs,HX_("phillySongs",b6,3e,0d,26)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::limoSongs,HX_("limoSongs",5f,5f,be,9d)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::mallSongs,HX_("mallSongs",8a,ab,74,4a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::evilMallSongs,HX_("evilMallSongs",56,26,1a,ba)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::schoolSongs,HX_("schoolSongs",ea,c9,f6,09)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::schoolScared,HX_("schoolScared",b4,73,9b,bc)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::evilSchoolSongs,HX_("evilSchoolSongs",b6,8f,09,ca)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::pixelSongs,HX_("pixelSongs",98,7a,b5,1f)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsInt,(void *) &PlayState_obj::minCombo,HX_("minCombo",5c,95,94,41)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsBool,(void *) &PlayState_obj::sectionStart,HX_("sectionStart",3d,60,e8,e2)},
	{::hx::fsInt,(void *) &PlayState_obj::sectionStartPoint,HX_("sectionStartPoint",d3,c6,3d,94)},
	{::hx::fsFloat,(void *) &PlayState_obj::sectionStartTime,HX_("sectionStartTime",ea,ba,df,45)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("canHit",23,74,1f,b8),
	HX_("noMissCount",b2,ff,e8,2e),
	HX_("camFocus",49,45,c1,0c),
	HX_("camTween",dc,8f,a8,21),
	HX_("camZoomTween",49,64,14,60),
	HX_("uiZoomTween",64,81,43,03),
	HX_("camFollow",e0,6e,47,22),
	HX_("autoCam",e0,5b,70,9d),
	HX_("autoZoom",22,92,1e,34),
	HX_("autoUi",a3,23,81,73),
	HX_("bopSpeed",84,9e,ad,c9),
	HX_("sectionHasOppNotes",27,cd,a6,7e),
	HX_("sectionHasBFNotes",08,26,76,57),
	HX_("sectionHaveNotes",14,d6,07,5e),
	HX_("vocals",5e,10,51,59),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("skipListener",13,ea,01,a0),
	HX_("upTime",08,28,78,7c),
	HX_("downTime",8f,c9,e4,81),
	HX_("leftTime",b4,0f,f8,53),
	HX_("rightTime",09,22,c3,b7),
	HX_("upPress",28,73,fd,24),
	HX_("downPress",c1,27,9e,de),
	HX_("leftPress",fc,41,68,dd),
	HX_("rightPress",07,3a,4d,cb),
	HX_("upRelease",ac,98,a5,94),
	HX_("downRelease",85,65,4f,7f),
	HX_("leftRelease",80,c4,80,58),
	HX_("rightRelease",4b,15,9c,43),
	HX_("upHold",3a,25,8e,74),
	HX_("downHold",c1,c6,fa,79),
	HX_("leftHold",e6,0c,0e,4c),
	HX_("rightHold",3b,1f,d9,af),
	HX_("invuln",e6,05,e5,9f),
	HX_("invulnCount",09,8d,6e,3e),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSection",45,58,c1,68),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("enemyStrums",72,af,eb,f8),
	HX_("camZooming",60,3b,bf,d6),
	HX_("curSong",75,95,6d,b7),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("misses",6a,62,54,56),
	HX_("accuracy",39,06,c5,ff),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("camOverlay",41,27,21,1b),
	HX_("comboUI",22,a2,32,7a),
	HX_("dialogue",18,2d,94,a7),
	HX_("halloweenBG",92,b2,88,5c),
	HX_("phillyCityLights",30,e0,12,1f),
	HX_("phillyTrain",80,9b,65,bb),
	HX_("trainSound",e7,b3,e5,da),
	HX_("limo",1f,17,b3,47),
	HX_("grpLimoDancers",70,18,93,51),
	HX_("fastCar",d8,f2,1f,de),
	HX_("upperBoppers",37,47,71,21),
	HX_("bottomBoppers",ce,2c,ba,6e),
	HX_("santa",8d,45,86,77),
	HX_("bgGirls",92,16,2b,41),
	HX_("talking",36,57,a8,16),
	HX_("songScore",3d,bb,53,a8),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("inCutscene",8f,21,01,56),
	HX_("dadBeats",76,7e,85,58),
	HX_("bfBeats",d9,19,1d,f7),
	HX_("meta",c5,4a,59,48),
	HX_("create",fc,66,0f,7c),
	HX_("updateAccuracy",62,f9,ee,34),
	HX_("schoolIntro",58,5d,50,47),
	HX_("startTimer",03,98,4c,2c),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("startSong",57,9d,4b,05),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("truncateFloat",56,85,20,77),
	HX_("update",09,86,05,87),
	HX_("endSong",50,dd,7c,2e),
	HX_("endingSong",5c,73,d7,67),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("keyDown",a1,69,47,9c),
	HX_("keyUp",da,b9,fe,de),
	HX_("keyCheck",a9,3e,20,8a),
	HX_("keyShit",ff,40,2c,a6),
	HX_("keyShitAuto",0e,38,ca,cf),
	HX_("noteMiss",0e,78,8f,57),
	HX_("noteMissWrongPress",c4,44,1f,cd),
	HX_("badNoteCheck",f1,30,bc,41),
	HX_("setBoyfriendInvuln",6e,61,8e,4c),
	HX_("setCanMiss",aa,5f,93,b9),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("fastCarCanDrive",d2,f1,13,ee),
	HX_("resetFastCar",c9,38,fe,4f),
	HX_("fastCarDrive",12,97,d2,be),
	HX_("trainMoving",76,00,99,48),
	HX_("trainFrameTiming",af,67,10,1b),
	HX_("trainCars",c7,61,9c,4d),
	HX_("trainFinishing",87,15,8c,24),
	HX_("trainCooldown",93,a3,58,0c),
	HX_("trainStart",7a,9b,24,de),
	HX_("startedMoving",af,76,97,fb),
	HX_("updateTrainPos",d5,01,38,2b),
	HX_("trainReset",e7,70,e1,40),
	HX_("lightningStrikeShit",bc,d0,7c,c1),
	HX_("stepHit",67,ae,41,81),
	HX_("lightningStrikeBeat",72,e2,3d,b6),
	HX_("lightningOffset",3d,a8,e5,e6),
	HX_("beatHit",7d,ea,04,74),
	HX_("curLight",36,8b,aa,bc),
	HX_("sectionContainsBfNotes",19,db,9d,fa),
	HX_("sectionContainsOppNotes",d6,ae,8e,6b),
	HX_("camFocusOpponent",06,ac,4f,40),
	HX_("camFocusBF",4d,23,94,b3),
	HX_("camMove",c0,36,52,d3),
	HX_("camChangeZoom",92,99,9f,e3),
	HX_("uiChangeZoom",17,f4,a9,09),
	HX_("uiBop",0f,bc,7b,a3),
	HX_("inRange",98,7b,dc,80),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::returnLocation,"returnLocation");
	HX_MARK_MEMBER_NAME(PlayState_obj::returnSong,"returnSong");
	HX_MARK_MEMBER_NAME(PlayState_obj::stageSongs,"stageSongs");
	HX_MARK_MEMBER_NAME(PlayState_obj::spookySongs,"spookySongs");
	HX_MARK_MEMBER_NAME(PlayState_obj::phillySongs,"phillySongs");
	HX_MARK_MEMBER_NAME(PlayState_obj::limoSongs,"limoSongs");
	HX_MARK_MEMBER_NAME(PlayState_obj::mallSongs,"mallSongs");
	HX_MARK_MEMBER_NAME(PlayState_obj::evilMallSongs,"evilMallSongs");
	HX_MARK_MEMBER_NAME(PlayState_obj::schoolSongs,"schoolSongs");
	HX_MARK_MEMBER_NAME(PlayState_obj::schoolScared,"schoolScared");
	HX_MARK_MEMBER_NAME(PlayState_obj::evilSchoolSongs,"evilSchoolSongs");
	HX_MARK_MEMBER_NAME(PlayState_obj::pixelSongs,"pixelSongs");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::minCombo,"minCombo");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::sectionStart,"sectionStart");
	HX_MARK_MEMBER_NAME(PlayState_obj::sectionStartPoint,"sectionStartPoint");
	HX_MARK_MEMBER_NAME(PlayState_obj::sectionStartTime,"sectionStartTime");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::returnLocation,"returnLocation");
	HX_VISIT_MEMBER_NAME(PlayState_obj::returnSong,"returnSong");
	HX_VISIT_MEMBER_NAME(PlayState_obj::stageSongs,"stageSongs");
	HX_VISIT_MEMBER_NAME(PlayState_obj::spookySongs,"spookySongs");
	HX_VISIT_MEMBER_NAME(PlayState_obj::phillySongs,"phillySongs");
	HX_VISIT_MEMBER_NAME(PlayState_obj::limoSongs,"limoSongs");
	HX_VISIT_MEMBER_NAME(PlayState_obj::mallSongs,"mallSongs");
	HX_VISIT_MEMBER_NAME(PlayState_obj::evilMallSongs,"evilMallSongs");
	HX_VISIT_MEMBER_NAME(PlayState_obj::schoolSongs,"schoolSongs");
	HX_VISIT_MEMBER_NAME(PlayState_obj::schoolScared,"schoolScared");
	HX_VISIT_MEMBER_NAME(PlayState_obj::evilSchoolSongs,"evilSchoolSongs");
	HX_VISIT_MEMBER_NAME(PlayState_obj::pixelSongs,"pixelSongs");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::minCombo,"minCombo");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sectionStart,"sectionStart");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sectionStartPoint,"sectionStartPoint");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sectionStartTime,"sectionStartTime");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("curStage",1e,65,b9,cb),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("returnLocation",05,ff,61,ea),
	HX_("returnSong",a5,0c,87,e8),
	HX_("stageSongs",60,8b,17,d4),
	HX_("spookySongs",13,95,a6,1e),
	HX_("phillySongs",b6,3e,0d,26),
	HX_("limoSongs",5f,5f,be,9d),
	HX_("mallSongs",8a,ab,74,4a),
	HX_("evilMallSongs",56,26,1a,ba),
	HX_("schoolSongs",ea,c9,f6,09),
	HX_("schoolScared",b4,73,9b,bc),
	HX_("evilSchoolSongs",b6,8f,09,ca),
	HX_("pixelSongs",98,7a,b5,1f),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("minCombo",5c,95,94,41),
	HX_("campaignScore",22,22,d6,07),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("sectionStart",3d,60,e8,e2),
	HX_("sectionStartPoint",d3,c6,3d,94),
	HX_("sectionStartTime",ea,ba,df,45),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_62_boot)
HXDLIN(  62)		instance = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_64_boot)
HXDLIN(  64)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_66_boot)
HXDLIN(  66)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_67_boot)
HXDLIN(  67)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_68_boot)
HXDLIN(  68)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_69_boot)
HXDLIN(  69)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_71_boot)
HXDLIN(  71)		returnLocation = HX_("main",39,38,56,48);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_72_boot)
HXDLIN(  72)		returnSong = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_77_boot)
HXDLIN(  77)		stageSongs = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_167,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_78_boot)
HXDLIN(  78)		spookySongs = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_169,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_79_boot)
HXDLIN(  79)		phillySongs = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_171,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_80_boot)
HXDLIN(  80)		limoSongs = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_173,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_81_boot)
HXDLIN(  81)		mallSongs = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_175,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_82_boot)
HXDLIN(  82)		evilMallSongs = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_177,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_83_boot)
HXDLIN(  83)		schoolSongs = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_179,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_84_boot)
HXDLIN(  84)		schoolScared = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_181,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_85_boot)
HXDLIN(  85)		evilSchoolSongs = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_183,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_86_boot)
HXDLIN(  86)		pixelSongs = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_185,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_173_boot)
HXDLIN( 173)		minCombo = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_220_boot)
HXDLIN( 220)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_225_boot)
HXDLIN( 225)		daPixelZoom = ((Float)6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_232_boot)
HXDLIN( 232)		sectionStart = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_233_boot)
HXDLIN( 233)		sectionStartPoint = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_234_boot)
HXDLIN( 234)		sectionStartTime = ((Float)0);
            	}
}

