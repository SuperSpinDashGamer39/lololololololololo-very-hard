// Generated by Haxe 4.1.5
#ifndef INCLUDED_title_TitleVideo
#define INCLUDED_title_TitleVideo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(VideoHandler)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(title,TitleVideo)

namespace title{


class HXCPP_CLASS_ATTRIBUTES TitleVideo_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef TitleVideo_obj OBJ_;
		TitleVideo_obj();

	public:
		enum { _hx_ClassId = 0x7fb87997 };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="title.TitleVideo")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"title.TitleVideo"); }
		static ::hx::ObjectPtr< TitleVideo_obj > __new( ::Dynamic MaxSize);
		static ::hx::ObjectPtr< TitleVideo_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TitleVideo_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TitleVideo",e3,2b,92,3f); }

		 ::flixel::FlxSprite blackScreen;
		 ::flixel::group::FlxTypedGroup credGroup;
		 ::flixel::group::FlxTypedGroup textGroup;
		 ::flixel::FlxSprite ngSpr;
		::Array< ::String > curWacky;
		 ::flixel::FlxSprite wackyImage;
		int oldFPS;
		 ::VideoHandler video;
		void create();

		void update(Float elapsed);

};

} // end namespace title

#endif /* INCLUDED_title_TitleVideo */ 
