// Generated by Haxe 4.1.5
#ifndef INCLUDED_config_Config
#define INCLUDED_config_Config

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(config,Config)

namespace config{


class HXCPP_CLASS_ATTRIBUTES Config_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Config_obj OBJ_;
		Config_obj();

	public:
		enum { _hx_ClassId = 0x1da6f924 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="config.Config")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"config.Config"); }

		inline static ::hx::ObjectPtr< Config_obj > __new() {
			::hx::ObjectPtr< Config_obj > __this = new Config_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Config_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Config_obj *__this = (Config_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Config_obj), false, "config.Config"));
			*(void **)__this = Config_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Config_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Config",e2,ca,66,fc); }

		static Float offset;
		static ::String accuracy;
		static Float healthMultiplier;
		static Float healthDrainMultiplier;
		static int comboType;
		static bool downscroll;
		static bool noteGlow;
		static int ghostTapType;
		static bool noFpsCap;
		static int controllerScheme;
		static int bgDim;
		static void resetSettings();
		static ::Dynamic resetSettings_dyn();

		static void reload();
		static ::Dynamic reload_dyn();

		static void write(Float offsetW,::String accuracyW,Float healthMultiplierW,Float healthDrainMultiplierW,int comboTypeW,bool downscrollW,bool noteGlowW,int ghostTapTypeW,bool noFpsCapW,int controllerSchemeW,int bgDimW);
		static ::Dynamic write_dyn();

		static void configCheck();
		static ::Dynamic configCheck_dyn();

};

} // end namespace config

#endif /* INCLUDED_config_Config */ 
